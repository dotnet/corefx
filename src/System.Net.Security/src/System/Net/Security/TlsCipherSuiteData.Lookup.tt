<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Net.Primitives" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TlsCipherSuiteNameParser.ttinclude" #><#@
    include file="TlsCipherSuite.cs" #>
<# Array enumValues = typeof(TlsCipherSuite).GetEnumValues(); #>

using System.Collections.Generic;
using System.Security.Authentication;

namespace System.Net.Security
{
    internal partial struct TlsCipherSuiteData
    {
        private const int LookupCount = <#= enumValues.Length #>;

        private static readonly Dictionary<TlsCipherSuite, TlsCipherSuiteData> s_tlsLookup =
            new Dictionary<TlsCipherSuite, TlsCipherSuiteData>(LookupCount)
            {
<#
foreach (TlsCipherSuite val in enumValues)
{
    TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
#>
                {
                    TlsCipherSuite.<#= val #>,
                    new TlsCipherSuiteData()
                    {
                        KeyExchangeAlgorithm = ExchangeAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.KeyExchangeAlgorithm) #>,
                        CipherAlgorithm = CipherAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.CipherAlgorithm) #>,
                        CipherAlgorithmStrength = <#= data.CipherAlgorithmStrength #>,
                        MACAlgorithm = HashAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.MACAlgorithm) #>,
                    }
                },
<#
}
#>
            };
    }
}
