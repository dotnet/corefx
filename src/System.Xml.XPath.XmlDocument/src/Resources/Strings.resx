<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Xdom_Node_Modify_ReadOnly" xml:space="preserve">
    <value>This node is read-only. It cannot be modified.</value>
  </data>
  <data name="Xml_BadNameChar" xml:space="preserve">
    <value>The '{0}' character, hexadecimal value {1}, cannot be included in a name.</value>
  </data>
  <data name="Xml_BadStartNameChar" xml:space="preserve">
    <value>Name cannot begin with the '{0}' character, hexadecimal value {1}.</value>
  </data>
  <data name="Xml_CanNotBindToReservedNamespace" xml:space="preserve">
    <value>Cannot bind to the reserved namespace.</value>
  </data>
  <data name="Xml_CannotStartDocumentOnFragment" xml:space="preserve">
    <value>WriteStartDocument cannot be called on writers created with ConformanceLevel.Fragment.</value>
  </data>
  <data name="Xml_CannotWriteXmlDecl" xml:space="preserve">
    <value>Cannot write XML declaration. XML declaration can be only at the beginning of the document.</value>
  </data>
  <data name="Xml_ClosedOrError" xml:space="preserve">
    <value>The Writer is closed or in error state.</value>
  </data>
  <data name="Xml_ConformanceLevelFragment" xml:space="preserve">
    <value>Make sure that the ConformanceLevel setting is set to ConformanceLevel.Fragment or ConformanceLevel.Auto if you want to write an XML fragment.</value>
  </data>
  <data name="Xml_DtdAlreadyWritten" xml:space="preserve">
    <value>The DTD has already been written out.</value>
  </data>
  <data name="Xml_DtdNotAllowedInFragment" xml:space="preserve">
    <value>DTD is not allowed in XML fragments.</value>
  </data>
  <data name="Xml_DupAttributeName" xml:space="preserve">
    <value>'{0}' is a duplicate attribute name.</value>
  </data>
  <data name="Xml_DupXmlDecl" xml:space="preserve">
    <value>Cannot write XML declaration. WriteStartDocument method has already written it.</value>
  </data>
  <data name="Xml_EmptyLocalName" xml:space="preserve">
    <value>The empty string '' is not a valid local name.</value>
  </data>
  <data name="Xml_EmptyName" xml:space="preserve">
    <value>The empty string '' is not a valid name.</value>
  </data>
  <data name="Xml_ErrorPosition" xml:space="preserve">
    <value>Line {0}, position {1}.</value>
  </data>
  <data name="Xml_InvalidCharacter" xml:space="preserve">
    <value>'{0}', hexadecimal value {1}, is an invalid character.</value>
  </data>
  <data name="Xml_InvalidNameCharsDetail" xml:space="preserve">
    <value>Invalid name character in '{0}'. The '{1}' character, hexadecimal value {2}, cannot be included in a name.</value>
  </data>
  <data name="Xml_InvalidOperation" xml:space="preserve">
    <value>Operation is not valid due to the current state of the object.</value>
  </data>
  <data name="Xml_InvalidReadContentAs" xml:space="preserve">
    <value>The {0} method is not supported on node type {1}. If you want to read typed content of an element, use the ReadElementContentAs method.</value>
  </data>
  <data name="Xml_InvalidReadElementContentAs" xml:space="preserve">
    <value>The {0} method is not supported on node type {1}.</value>
  </data>
  <data name="Xml_InvalidSurrogateHighChar" xml:space="preserve">
    <value>Invalid high surrogate character (0x{0}). A high surrogate character must have a value from range (0xD800 - 0xDBFF).</value>
  </data>
  <data name="Xml_InvalidSurrogateMissingLowChar" xml:space="preserve">
    <value>The surrogate pair is invalid. Missing a low surrogate character.</value>
  </data>
  <data name="Xml_InvalidSurrogatePairWithArgs" xml:space="preserve">
    <value>The surrogate pair (0x{0}, 0x{1}) is invalid. A high surrogate character (0xD800 - 0xDBFF) must always be paired with a low surrogate character (0xDC00 - 0xDFFF).</value>
  </data>
  <data name="Xml_InvalidXmlSpace" xml:space="preserve">
    <value>'{0}' is an invalid xml:space value.</value>
  </data>
  <data name="Xml_NamespaceDeclXmlXmlns" xml:space="preserve">
    <value>Prefix '{0}' cannot be mapped to namespace name reserved for "xml" or "xmlns".</value>
  </data>
  <data name="Xml_NonWhitespace" xml:space="preserve">
    <value>Only white space characters should be used.</value>
  </data>
  <data name="Xml_NoRoot" xml:space="preserve">
    <value>Document does not have a root element.</value>
  </data>
  <data name="Xml_NoStartTag" xml:space="preserve">
    <value>There was no XML start tag open.</value>
  </data>
  <data name="Xml_PrefixForEmptyNs" xml:space="preserve">
    <value>Cannot use a prefix with an empty namespace.</value>
  </data>
  <data name="Xml_RedefinePrefix" xml:space="preserve">
    <value>The prefix '{0}' cannot be redefined from '{1}' to '{2}' within the same start element tag.</value>
  </data>
  <data name="Xml_UndefNamespace" xml:space="preserve">
    <value>The '{0}' namespace is not defined.</value>
  </data>
  <data name="Xml_WrongToken" xml:space="preserve">
    <value>Token {0} in state {1} would result in an invalid XML document.</value>
  </data>
  <data name="Xml_XmlnsPrefix" xml:space="preserve">
    <value>Prefix "xmlns" is reserved for use by XML.</value>
  </data>
  <data name="Xml_XmlPrefix" xml:space="preserve">
    <value>Prefix "xml" is reserved for use by XML and can be mapped only to namespace name "http://www.w3.org/XML/1998/namespace".</value>
  </data>
  <data name="XmlConvert_BadFormat" xml:space="preserve">
    <value>The string '{0}' is not a valid {1} value.</value>
  </data>
  <data name="XmlConvert_BadUri" xml:space="preserve">
    <value>The string was not recognized as a valid Uri.</value>
  </data>
  <data name="XmlConvert_NotOneCharString" xml:space="preserve">
    <value>String must be exactly one character long.</value>
  </data>
  <data name="XmlConvert_Overflow" xml:space="preserve">
    <value>Value '{0}' was either too large or too small for {1}.</value>
  </data>
  <data name="XmlConvert_TypeBadMapping" xml:space="preserve">
    <value>Xml type '{0}' does not support Clr type '{1}'.</value>
  </data>
  <data name="XmlConvert_TypeBadMapping2" xml:space="preserve">
    <value>Xml type '{0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'.</value>
  </data>
  <data name="XmlConvert_TypeFromString" xml:space="preserve">
    <value>Xml type '{0}' cannot convert to Clr type '{1}' unless the source value is a String or an XmlAtomicValue.</value>
  </data>
  <data name="XmlConvert_TypeListBadMapping" xml:space="preserve">
    <value>Xml type 'List of {0}' does not support Clr type '{1}'.</value>
  </data>
  <data name="XmlConvert_TypeListBadMapping2" xml:space="preserve">
    <value>Xml type 'List of {0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'.</value>
  </data>
  <data name="XmlConvert_TypeNoNamespace" xml:space="preserve">
    <value>The String '{0}' cannot be represented as an XmlQualifiedName.  A namespace for prefix '{1}' cannot be found.</value>
  </data>
  <data name="XmlConvert_TypeNoPrefix" xml:space="preserve">
    <value>The QName '{0}' cannot be represented as a String.  A prefix for namespace '{1}' cannot be found.</value>
  </data>
  <data name="XmlConvert_TypeToString" xml:space="preserve">
    <value>Xml type '{0}' cannot convert from Clr type '{1}' unless the destination type is String or XmlAtomicValue.</value>
  </data>
  <data name="Xpn_BadPosition" xml:space="preserve">
    <value>Operation is not valid due to the current position of the navigator.</value>
  </data>
  <data name="Xpn_MissingParent" xml:space="preserve">
    <value>The current position of the navigator is missing a valid parent.</value>
  </data>
  <data name="Xpn_NoContent" xml:space="preserve">
    <value>No content generated as the result of the operation.</value>
  </data>
</root>