<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Arg_KeyNotFoundWithKey" xml:space="preserve">
    <value>The given key '{0}' was not present in the dictionary.</value>
  </data>
  <data name="Argument_InvalidTypeName" xml:space="preserve">
    <value>The name of the type is invalid.</value>
  </data>
  <data name="ArgumentOutOfRange_NeedNonNegNum" xml:space="preserve">
    <value>Non-negative number required.</value>
  </data>
  <data name="ArgumentOutOfRange_NeedValidId" xml:space="preserve">
    <value>The ID parameter must be in the range {0} through {1}.</value>
  </data>
  <data name="EventSource_AbstractMustNotDeclareEventMethods" xml:space="preserve">
    <value>Abstract event source must not declare event methods ({0} with ID {1}).</value>
  </data>
  <data name="EventSource_AbstractMustNotDeclareKTOC" xml:space="preserve">
    <value>Abstract event source must not declare {0} nested type.</value>
  </data>
  <data name="EventSource_AddScalarOutOfRange" xml:space="preserve">
    <value>Getting out of bounds during scalar addition.</value>
  </data>
  <data name="EventSource_BadHexDigit" xml:space="preserve">
    <value>Bad Hexidecimal digit "{0}".</value>
  </data>
  <data name="EventSource_ChannelTypeDoesNotMatchEventChannelValue" xml:space="preserve">
    <value>Channel {0} does not match event channel value {1}.</value>
  </data>
  <data name="EventSource_DataDescriptorsOutOfRange" xml:space="preserve">
    <value>Data descriptors are out of range.</value>
  </data>
  <data name="EventSource_DuplicateStringKey" xml:space="preserve">
    <value>Multiple definitions for string "{0}".</value>
  </data>
  <data name="EventSource_EnumKindMismatch" xml:space="preserve">
    <value>The type of {0} is not expected in {1}.</value>
  </data>
  <data name="EventSource_EvenHexDigits" xml:space="preserve">
    <value>Must have an even number of Hexidecimal digits.</value>
  </data>
  <data name="EventSource_EventChannelOutOfRange" xml:space="preserve">
    <value>Channel {0} has a value of {1} which is outside the legal range (16-254).</value>
  </data>
  <data name="EventSource_EventIdReused" xml:space="preserve">
    <value>Event {0} has ID {1} which is already in use.</value>
  </data>
  <data name="EventSource_EventMustHaveTaskIfNonDefaultOpcode" xml:space="preserve">
    <value>Event {0} (with ID {1}) has a non-default opcode but not a task.</value>
  </data>
  <data name="EventSource_EventMustNotBeExplicitImplementation" xml:space="preserve">
    <value>Event method {0} (with ID {1}) is an explicit interface method implementation. Re-write method as implicit implementation.</value>
  </data>
  <data name="EventSource_EventNameDoesNotEqualTaskPlusOpcode" xml:space="preserve">
    <value>Event {0} (with ID {1}) has a name that is not the concatenation of its task name and opcode.</value>
  </data>
  <data name="EventSource_EventNameReused" xml:space="preserve">
    <value>Event name {0} used more than once.  If you wish to overload a method, the overloaded method should have a NonEvent attribute.</value>
  </data>
  <data name="EventSource_EventParametersMismatch" xml:space="preserve">
    <value>Event {0} was called with {1} argument(s), but it is defined with {2} parameter(s).</value>
  </data>
  <data name="EventSource_EventSourceGuidInUse" xml:space="preserve">
    <value>An instance of EventSource with Guid {0} already exists.</value>
  </data>
  <data name="EventSource_EventTooBig" xml:space="preserve">
    <value>The payload for a single event is too large.</value>
  </data>
  <data name="EventSource_EventWithAdminChannelMustHaveMessage" xml:space="preserve">
    <value>Event {0} specifies an Admin channel {1}. It must specify a Message property.</value>
  </data>
  <data name="EventSource_IllegalKeywordsValue" xml:space="preserve">
    <value>Keyword {0} has a value of {1} which is outside the legal range (0-0x0000080000000000).</value>
  </data>
  <data name="EventSource_IllegalOpcodeValue" xml:space="preserve">
    <value>Opcode {0} has a value of {1} which is outside the legal range (11-238).</value>
  </data>
  <data name="EventSource_IllegalTaskValue" xml:space="preserve">
    <value>Task {0} has a value of {1} which is outside the legal range (1-65535).</value>
  </data>
  <data name="EventSource_IllegalValue" xml:space="preserve">
    <value>Illegal value "{0}" (prefix strings with @ to indicate a literal string).</value>
  </data>
  <data name="EventSource_IncorrentlyAuthoredTypeInfo" xml:space="preserve">
    <value>Incorrectly-authored TypeInfo - a type should be serialized as one field or as one group</value>
  </data>
  <data name="EventSource_InvalidCommand" xml:space="preserve">
    <value>Invalid command value.</value>
  </data>
  <data name="EventSource_InvalidEventFormat" xml:space="preserve">
    <value>Can't specify both etw event format flags.</value>
  </data>
  <data name="EventSource_KeywordCollision" xml:space="preserve">
    <value>Keywords {0} and {1} are defined with the same value ({2}).</value>
  </data>
  <data name="EventSource_KeywordNeedPowerOfTwo" xml:space="preserve">
    <value>Value {0} for keyword {1} needs to be a power of 2.</value>
  </data>
  <data name="EventSource_ListenerCreatedInsideCallback" xml:space="preserve">
    <value>Creating an EventListener inside a EventListener callback.</value>
  </data>
  <data name="EventSource_ListenerNotFound" xml:space="preserve">
    <value>Listener not found.</value>
  </data>
  <data name="EventSource_ListenerWriteFailure" xml:space="preserve">
    <value>An error occurred when writing to a listener.</value>
  </data>
  <data name="EventSource_MaxChannelExceeded" xml:space="preserve">
    <value>Attempt to define more than the maximum limit of 8 channels for a provider.</value>
  </data>
  <data name="EventSource_MismatchIdToWriteEvent" xml:space="preserve">
    <value>Event {0} was assigned event ID {1} but {2} was passed to WriteEvent.</value>
  </data>
  <data name="EventSource_NeedGuid" xml:space="preserve">
    <value>The Guid of an EventSource must be non zero.</value>
  </data>
  <data name="EventSource_NeedName" xml:space="preserve">
    <value>The name of an EventSource must not be null.</value>
  </data>
  <data name="EventSource_NeedPositiveId" xml:space="preserve">
    <value>Event IDs must be positive integers.</value>
  </data>
  <data name="EventSource_NoFreeBuffers" xml:space="preserve">
    <value>No Free Buffers available from the operating system (e.g. event rate too fast).</value>
  </data>
  <data name="EventSource_NonCompliantTypeError" xml:space="preserve">
    <value>The API supports only anonymous types or types decorated with the EventDataAttribute. Non-compliant type: {0} dataType.</value>
  </data>
  <data name="EventSource_NoRelatedActivityId" xml:space="preserve">
    <value>EventSource expects the first parameter of the Event method to be of type Guid and to be named "relatedActivityId" when calling WriteEventWithRelatedActivityId.</value>
  </data>
  <data name="EventSource_NotSupportedArrayOfBinary" xml:space="preserve">
    <value>Arrays of Binary are not supported.</value>
  </data>
  <data name="EventSource_NotSupportedArrayOfNil" xml:space="preserve">
    <value>Arrays of Nil are not supported.</value>
  </data>
  <data name="EventSource_NotSupportedArrayOfNullTerminatedString" xml:space="preserve">
    <value>Arrays of null-terminated string are not supported.</value>
  </data>
  <data name="EventSource_NotSupportedCustomSerializedData" xml:space="preserve">
    <value>Enumerables of custom-serialized data are not supported</value>
  </data>
  <data name="EventSource_NotSupportedNestedArraysEnums" xml:space="preserve">
    <value>Nested arrays/enumerables are not supported.</value>
  </data>
  <data name="EventSource_NullInput" xml:space="preserve">
    <value>Null passed as a event argument.</value>
  </data>
  <data name="EventSource_OpcodeCollision" xml:space="preserve">
    <value>Opcodes {0} and {1} are defined with the same value ({2}).</value>
  </data>
  <data name="EventSource_PinArrayOutOfRange" xml:space="preserve">
    <value>Pins are out of range.</value>
  </data>
  <data name="EventSource_RecursiveTypeDefinition" xml:space="preserve">
    <value>Recursive type definition is not supported.</value>
  </data>
  <data name="EventSource_SessionIdError" xml:space="preserve">
    <value>Bit position in AllKeywords ({0}) must equal the command argument named "EtwSessionKeyword" ({1}).</value>
  </data>
  <data name="EventSource_StopsFollowStarts" xml:space="preserve">
    <value>An event with stop suffix must follow a corresponding event with a start suffix.</value>
  </data>
  <data name="EventSource_TaskCollision" xml:space="preserve">
    <value>Tasks {0} and {1} are defined with the same value ({2}).</value>
  </data>
  <data name="EventSource_TaskOpcodePairReused" xml:space="preserve">
    <value>Event {0} (with ID {1}) has the same task/opcode pair as event {2} (with ID {3}).</value>
  </data>
  <data name="EventSource_TooManyArgs" xml:space="preserve">
    <value>Too many arguments.</value>
  </data>
  <data name="EventSource_TooManyFields" xml:space="preserve">
    <value>Too many fields in structure.</value>
  </data>
  <data name="EventSource_ToString" xml:space="preserve">
    <value>EventSource({0}, {1})</value>
  </data>
  <data name="EventSource_TraitEven" xml:space="preserve">
    <value>There must be an even number of trait strings (they are key-value pairs).</value>
  </data>
  <data name="EventSource_TypeMustBeSealedOrAbstract" xml:space="preserve">
    <value>Event source types must be sealed or abstract.</value>
  </data>
  <data name="EventSource_TypeMustDeriveFromEventSource" xml:space="preserve">
    <value>Event source types must derive from EventSource.</value>
  </data>
  <data name="EventSource_UndefinedChannel" xml:space="preserve">
    <value>Use of undefined channel value {0} for event {1}.</value>
  </data>
  <data name="EventSource_UndefinedKeyword" xml:space="preserve">
    <value>Use of undefined keyword value {0} for event {1}.</value>
  </data>
  <data name="EventSource_UndefinedOpcode" xml:space="preserve">
    <value>Use of undefined opcode value {0} for event {1}.</value>
  </data>
  <data name="EventSource_UnknownEtwTrait" xml:space="preserve">
    <value>Unknown ETW trait "{0}".</value>
  </data>
  <data name="EventSource_UnsupportedEventTypeInManifest" xml:space="preserve">
    <value>Unsupported type {0} in event source.</value>
  </data>
  <data name="EventSource_UnsupportedMessageProperty" xml:space="preserve">
    <value>Event {0} specifies an illegal or unsupported formatting message ("{1}").</value>
  </data>
  <data name="EventSource_VarArgsParameterMismatch" xml:space="preserve">
    <value>The parameters to the Event method do not match the parameters to the WriteEvent method. This may cause the event to be displayed incorrectly.</value>
  </data>
</root>
