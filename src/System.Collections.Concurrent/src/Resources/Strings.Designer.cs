//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resources {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Collections.Concurrent.Resources.Strings", typeof(Strings).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CompleteAdding may not be used concurrently with additions to the collection..
        /// </summary>
        internal static string BlockingCollection_Add_ConcurrentCompleteAdd {
            get {
                return ResourceManager.GetString("BlockingCollection_Add_ConcurrentCompleteAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying collection didn&apos;t accept the item..
        /// </summary>
        internal static string BlockingCollection_Add_Failed {
            get {
                return ResourceManager.GetString("BlockingCollection_Add_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one of the specified collections is marked as complete with regards to additions..
        /// </summary>
        internal static string BlockingCollection_CantAddAnyWhenCompleted {
            get {
                return ResourceManager.GetString("BlockingCollection_CantAddAnyWhenCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All collections are marked as complete with regards to additions..
        /// </summary>
        internal static string BlockingCollection_CantTakeAnyWhenAllDone {
            get {
                return ResourceManager.GetString("BlockingCollection_CantTakeAnyWhenAllDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection argument is empty and has been marked as complete with regards to additions..
        /// </summary>
        internal static string BlockingCollection_CantTakeWhenDone {
            get {
                return ResourceManager.GetString("BlockingCollection_CantTakeWhenDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection has been marked as complete with regards to additions..
        /// </summary>
        internal static string BlockingCollection_Completed {
            get {
                return ResourceManager.GetString("BlockingCollection_Completed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array argument is of the incorrect type..
        /// </summary>
        internal static string BlockingCollection_CopyTo_IncorrectType {
            get {
                return ResourceManager.GetString("BlockingCollection_CopyTo_IncorrectType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array argument is multidimensional..
        /// </summary>
        internal static string BlockingCollection_CopyTo_MultiDim {
            get {
                return ResourceManager.GetString("BlockingCollection_CopyTo_MultiDim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index argument must be greater than or equal zero..
        /// </summary>
        internal static string BlockingCollection_CopyTo_NonNegative {
            get {
                return ResourceManager.GetString("BlockingCollection_CopyTo_NonNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of elements in the collection is greater than the available space from index to the end of the destination array..
        /// </summary>
        internal static string BlockingCollection_CopyTo_TooManyElems {
            get {
                return ResourceManager.GetString("BlockingCollection_CopyTo_TooManyElems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The boundedCapacity argument must be positive..
        /// </summary>
        internal static string BlockingCollection_ctor_BoundedCapacityRange {
            get {
                return ResourceManager.GetString("BlockingCollection_ctor_BoundedCapacityRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection argument contains more items than are allowed by the boundedCapacity..
        /// </summary>
        internal static string BlockingCollection_ctor_CountMoreThanCapacity {
            get {
                return ResourceManager.GetString("BlockingCollection_ctor_CountMoreThanCapacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection has been disposed..
        /// </summary>
        internal static string BlockingCollection_Disposed {
            get {
                return ResourceManager.GetString("BlockingCollection_Disposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying collection was modified from outside of the BlockingCollection&lt;T&gt;..
        /// </summary>
        internal static string BlockingCollection_Take_CollectionModified {
            get {
                return ResourceManager.GetString("BlockingCollection_Take_CollectionModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified timeout must represent a value between -1 and {0}, inclusive..
        /// </summary>
        internal static string BlockingCollection_TimeoutInvalid {
            get {
                return ResourceManager.GetString("BlockingCollection_TimeoutInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collections argument contains at least one disposed element..
        /// </summary>
        internal static string BlockingCollection_ValidateCollectionsArray_DispElems {
            get {
                return ResourceManager.GetString("BlockingCollection_ValidateCollectionsArray_DispElems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collections length is greater than the supported range for 32 bit machine..
        /// </summary>
        internal static string BlockingCollection_ValidateCollectionsArray_LargeSize {
            get {
                return ResourceManager.GetString("BlockingCollection_ValidateCollectionsArray_LargeSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collections argument contains at least one null element..
        /// </summary>
        internal static string BlockingCollection_ValidateCollectionsArray_NullElems {
            get {
                return ResourceManager.GetString("BlockingCollection_ValidateCollectionsArray_NullElems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collections argument is a zero-length array..
        /// </summary>
        internal static string BlockingCollection_ValidateCollectionsArray_ZeroSize {
            get {
                return ResourceManager.GetString("BlockingCollection_ValidateCollectionsArray_ZeroSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation was canceled..
        /// </summary>
        internal static string Common_OperationCanceled {
            get {
                return ResourceManager.GetString("Common_OperationCanceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array argument is null..
        /// </summary>
        internal static string ConcurrentBag_CopyTo_ArgumentNullException {
            get {
                return ResourceManager.GetString("ConcurrentBag_CopyTo_ArgumentNullException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index argument must be greater than or equal zero..
        /// </summary>
        internal static string ConcurrentBag_CopyTo_ArgumentOutOfRangeException {
            get {
                return ResourceManager.GetString("ConcurrentBag_CopyTo_ArgumentOutOfRangeException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection argument is null..
        /// </summary>
        internal static string ConcurrentBag_Ctor_ArgumentNullException {
            get {
                return ResourceManager.GetString("ConcurrentBag_Ctor_ArgumentNullException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SyncRoot property may not be used for the synchronization of concurrent collections..
        /// </summary>
        internal static string ConcurrentCollection_SyncRoot_NotSupported {
            get {
                return ResourceManager.GetString("ConcurrentCollection_SyncRoot_NotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array is multidimensional, or the type parameter for the set cannot be cast automatically to the type of the destination array..
        /// </summary>
        internal static string ConcurrentDictionary_ArrayIncorrectType {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ArrayIncorrectType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index is equal to or greater than the length of the array, or the number of elements in the dictionary is greater than the available space from index to the end of the destination array..
        /// </summary>
        internal static string ConcurrentDictionary_ArrayNotLargeEnough {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ArrayNotLargeEnough", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The capacity argument must be greater than or equal to zero..
        /// </summary>
        internal static string ConcurrentDictionary_CapacityMustNotBeNegative {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_CapacityMustNotBeNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The concurrencyLevel argument must be positive..
        /// </summary>
        internal static string ConcurrentDictionary_ConcurrencyLevelMustBePositive {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ConcurrencyLevelMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index argument is less than zero..
        /// </summary>
        internal static string ConcurrentDictionary_IndexIsNegative {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_IndexIsNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TKey is a reference type and item.Key is null..
        /// </summary>
        internal static string ConcurrentDictionary_ItemKeyIsNull {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ItemKeyIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key already existed in the dictionary..
        /// </summary>
        internal static string ConcurrentDictionary_KeyAlreadyExisted {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_KeyAlreadyExisted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source argument contains duplicate keys..
        /// </summary>
        internal static string ConcurrentDictionary_SourceContainsDuplicateKeys {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_SourceContainsDuplicateKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key was of an incorrect type for this dictionary..
        /// </summary>
        internal static string ConcurrentDictionary_TypeOfKeyIncorrect {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_TypeOfKeyIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value was of an incorrect type for this dictionary..
        /// </summary>
        internal static string ConcurrentDictionary_TypeOfValueIncorrect {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_TypeOfValueIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The count argument must be greater than or equal to zero..
        /// </summary>
        internal static string ConcurrentStack_PushPopRange_CountOutOfRange {
            get {
                return ResourceManager.GetString("ConcurrentStack_PushPopRange_CountOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sum of the startIndex and count arguments must be less than or equal to the collection&apos;s Count..
        /// </summary>
        internal static string ConcurrentStack_PushPopRange_InvalidCount {
            get {
                return ResourceManager.GetString("ConcurrentStack_PushPopRange_InvalidCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The startIndex argument must be greater than or equal to zero..
        /// </summary>
        internal static string ConcurrentStack_PushPopRange_StartOutOfRange {
            get {
                return ResourceManager.GetString("ConcurrentStack_PushPopRange_StartOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamic partitions are not supported by this partitioner..
        /// </summary>
        internal static string Partitioner_DynamicPartitionsNotSupported {
            get {
                return ResourceManager.GetString("Partitioner_DynamicPartitionsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not call GetEnumerator on partitions after the source enumerable is disposed.
        /// </summary>
        internal static string PartitionerStatic_CanNotCallGetEnumeratorAfterSourceHasBeenDisposed {
            get {
                return ResourceManager.GetString("PartitionerStatic_CanNotCallGetEnumeratorAfterSourceHasBeenDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MoveNext must be called at least once before calling Current..
        /// </summary>
        internal static string PartitionerStatic_CurrentCalledBeforeMoveNext {
            get {
                return ResourceManager.GetString("PartitionerStatic_CurrentCalledBeforeMoveNext", resourceCulture);
            }
        }
    }
}
