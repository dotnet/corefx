<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ErrorIfBuildToolsRestoredFromIndividualProject Condition="!Exists('$(ToolsDir)')">true</ErrorIfBuildToolsRestoredFromIndividualProject>
  </PropertyGroup>
  
  <Import Project="..\dir.targets" />
  
  <PropertyGroup Condition=" '$(TargetFrameworkIdentifier)' == '' 
                         and '$(TargetFrameworkVersion)'    == '' 
                         and '$(TargetFrameworkProfile)'    == '' ">
    <TargetingDefaultPlatform>true</TargetingDefaultPlatform>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == ''">
     <TargetFrameworkIdentifier>.NETPortable</TargetFrameworkIdentifier>
  </PropertyGroup>

  <!--
    Limit the assembly resolution to just explicit locations.
    Don't search anything machine-wide or build-order dependent.
   -->
  <PropertyGroup>
    <AssemblySearchPaths>{HintPathFromItem};{RawFileName}</AssemblySearchPaths>
  </PropertyGroup>

  <!--
    When targeting an explicit platform other than the default,
    also allow the target framework directory.
  -->
  <PropertyGroup Condition="'$(TargetingDefaultPlatform)' != 'true'">
    <AssemblySearchPaths>$(AssemblySearchPaths);{TargetFrameworkDirectory}</AssemblySearchPaths>
  </PropertyGroup>

  <!-- Setup the default target for projects not already explicitly targeting another platform -->
  <PropertyGroup Condition="'$(TargetingDefaultPlatform)' == 'true'">
    <!-- Setting a default portable profile, although nothing should resolve from there as we want to use the pacakge refs -->
    <TargetPlatformIdentifier>Portable</TargetPlatformIdentifier>
    <TargetFrameworkIdentifier>.NETPortable</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetFrameworkProfile>Profile7</TargetFrameworkProfile>
    <TargetFrameworkMonikerDisplayName>.NET Portable Subset</TargetFrameworkMonikerDisplayName>
    <ImplicitlyExpandTargetFramework>false</ImplicitlyExpandTargetFramework>
  </PropertyGroup>


  <!-- Need to add references to the mscorlib design-time facade for some old-style portable dependencies like xunit -->
  <Target Name="AddDesignTimeFacadeReferences"
      Condition="'$(TargetingDefaultPlatform)' == 'true'"
      BeforeTargets="ResolveReferences"
      DependsOnTargets="GetReferenceAssemblyPaths"
  >
    <ItemGroup>
      <PossibleTargetFrameworks Include="$(_TargetFrameworkDirectories)" />
      <ReferencePath Include="%(PossibleTargetFrameworks.Identity)mscorlib.dll" 
                     Condition="'%(PossibleTargetFrameworks.Identity)' != '' and Exists('%(PossibleTargetFrameworks.Identity)mscorlib.dll')" />
    </ItemGroup>
  </Target>

  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" 
          Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable'" />
          
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets"
          Condition="'$(TargetFrameworkIdentifier)' != '.NETPortable'" />

  <!-- Restore packages -->
  <PropertyGroup>
    <PackagesConfig Condition="Exists('$(MSBuildProjectDirectory)\packages.config')">$(MSBuildProjectDirectory)\packages.config</PackagesConfig>
    <RestorePackages Condition="'$(RestorePackages)' == '' and Exists('$(PackagesConfig)')">true</RestorePackages>
    <RestorePackagesSemaphore>$(PackagesDir)$(MSBuildProjectFile)-packages.config</RestorePackagesSemaphore>
  </PropertyGroup>

  <Target Name="RestorePackages" 
          BeforeTargets="ResolveNuGetPackages"
          Inputs="$(PackagesConfig)"
          Outputs="$(RestorePackagesSemaphore)"
          Condition="'$(RestorePackages)' == 'true'">
    <Exec Command="$(NugetRestoreCommand) &quot;$(PackagesConfig)&quot;" StandardOutputImportance="Low" />
    <Copy SourceFiles="$(PackagesConfig)" DestinationFiles="$(RestorePackagesSemaphore)" ContinueOnError="True" SkipUnchangedFiles="True" />
  </Target>

  <Import Project="$(ToolsDir)packageresolve.targets" Condition="Exists('$(ToolsDir)packageresolve.targets')" />

  <!-- Version assemblies -->
  <PropertyGroup>
    <!--
      For now to avoid conflicts with files coming from packages default assembly version to 999.999.999.999
      until we correctly add the AssemblyVersion property to each of the projects.
    -->
    <AssemblyVersion Condition="'$(AssemblyVersion)'==''">999.999.999.999</AssemblyVersion>
    <GenerateAssemblyInfo Condition="'$(GenerateAssemblyInfo)'==''">true</GenerateAssemblyInfo>
    <CLSCompliant Condition="'$(CLSCompliant)'==''">true</CLSCompliant>
  </PropertyGroup>

  <Import Project="$(ToolsDir)versioning.targets" Condition="Exists('$(ToolsDir)versioning.targets')" />

  <Import Project="$(ToolsDir)publishtest.targets" Condition="Exists('$(ToolsDir)publishtest.targets')" />

  <PropertyGroup>
    <IsTestProject Condition="'$(IsTestProject)'=='' And $(MSBuildProjectName.EndsWith('.Tests'))">True</IsTestProject>
    <CLSCompliant Condition="'$(IsTestProject)'=='True'">false</CLSCompliant>
  </PropertyGroup>

  <!-- VS does not evaluate the conditions when loading the projects and so we add this via a target file and import it with a condition -->
  <!--
    Disable temporarily until we can get this working in both TFS and Github
  <Import Project="$(ToolsDir)resources.targets" />
  -->

  <PropertyGroup>
    <ResourcesSourceOutputDirectory Condition="'$(ResourcesSourceOutputDirectory)' == ''">$(MSBuildProjectDirectory)\Resources</ResourcesSourceOutputDirectory>
    <StringResourcesPath Condition="'$(StringResourcesPath)'=='' And Exists('$(ResourcesSourceOutputDirectory)\Strings.resx')">$(ResourcesSourceOutputDirectory)\Strings.resx</StringResourcesPath>
    <ResourceSRPath Condition="'$(ResourceSRPath)'=='' And '$(MSBuildProjectExtension)' == '.csproj'">$(ResourcesSourceOutputDirectory)\SR.cs</ResourceSRPath>
  </PropertyGroup>

  <Import Project="$(ToolsDir)ResourcesIncludes.targets" Condition="Exists('$(ToolsDir)ResourcesIncludes.targets') and Exists('$(StringResourcesPath)') And Exists('$(ResourceSRPath)') And '$(SkipResourcesIncludesTarget)'==''"/>

  <!-- sign.targets relies on the value of IsTestProject so be sure to import it after it's defined -->
  <Import Project="$(ToolsDir)sign.targets" Condition="Exists('$(ToolsDir)sign.targets')" />

  <PropertyGroup>
    <TestRuntimePackageConfig>$(ToolsDir)test-runtime\packages.config</TestRuntimePackageConfig>
    <TestRuntimePackageSemaphore>$(PackagesDir)Test-Runtime-packages.config</TestRuntimePackageSemaphore>
  </PropertyGroup>

  <Target Name="RestoreTestRuntimePackage" 
          BeforeTargets="ResolveNuGetPackages"
          Inputs="$(TestRuntimePackageConfig)"
          Outputs="$(TestRuntimePackageSemaphore)"
          Condition="'$(IsTestProject)' == 'true'">
    <Exec Command="$(NugetRestoreCommand) &quot;$(TestRuntimePackageConfig)&quot;" StandardOutputImportance="Low" />
    <Copy SourceFiles="$(TestRuntimePackageConfig)" DestinationFiles="$(TestRuntimePackageSemaphore)" ContinueOnError="true" />
  </Target>

  <!-- Which categories of tests to run by default -->
  <PropertyGroup>
    <RunTestsWithCategories Condition="'$(RunTestsWithCategories)' == '' And '$(RunTestsWithoutCategories)' == ''">InnerLoop</RunTestsWithCategories>
    <TestCategories Condition="'$(TestCategories)'==''">InnerLoop</TestCategories>

    <TestDisabled>False</TestDisabled>
    <TestDisabled Condition="'$(IsTestProject)'!='True' Or '$(SkipTests)'=='True' Or '$(RunTestsForProject)'=='False'">True</TestDisabled>
  </PropertyGroup>

  <ItemGroup>
    <!-- Split semicolon separated lists -->
    <TestCategoriesItems Include="$(TestCategories)" />
    <RunTestsWithCategoriesItems Include="$(RunTestsWithCategories)" />
    <RunTestsWithoutCategoriesItems Include="$(RunTestsWithoutCategories)" />
  </ItemGroup>

  <!-- General xunit options -->
  <PropertyGroup>
    <XunitCommandLine>xunit.console.netcore.exe $(TargetFileName)</XunitCommandLine>
    <XunitOptions>$(XunitOptions) -xml .\testResults.xml</XunitOptions>
    <XunitOptions>$(XunitOptions) -notrait category=failing</XunitOptions>
  </PropertyGroup>
  
  <!-- Directory specific coverage options -->
  <PropertyGroup>
    <CoverageEnabledForProject Condition="'$(CoverageEnabledForProject)'=='' and '$(IsTestProject)'=='true'">$(_CoverageEnabled)</CoverageEnabledForProject>
    <XunitHost>corerun.exe</XunitHost>
    <CoverageHost>$(CoverageToolPath)</CoverageHost>
    <CoverageOutputFilePath>$(CoverageReportDir)$(MSBuildProjectName).coverage.xml</CoverageOutputFilePath>
    <CoverageOptions>-filter:"+[*]* -[*.Tests]*" -nodefaultfilters -excludebyattribute:*.ExcludeFromCodeCoverage* -skipautoprops -hideskipped:All -threshold:1 -oldstyle</CoverageOptions>
    <CoverageCommandLine>$(CoverageOptions) -returntargetcode -register:user -target:$(XunitHost) -output:$(CoverageOutputFilePath)</CoverageCommandLine>
  </PropertyGroup>
  
  <!-- In VS (2015 Preview or later currently required): Debug to run unit tests on CoreCLR. -->
  <PropertyGroup Condition="'$(IsTestProject)'=='True'">
    <DebugTestFrameworkFolder>aspnetcore50</DebugTestFrameworkFolder>
    <StartWorkingDirectory Condition="'$(StartWorkingDirectory)' == ''">$(TestPath)$(DebugTestFrameworkFolder)</StartWorkingDirectory>
    <StartAction Condition="'$(StartAction)' == ''">Program</StartAction>
    <StartProgram Condition="'$(StartProgram)' == ''">$(StartWorkingDirectory)\$(TestHost)</StartProgram>
    <StartArguments Condition="'$(StartArguments)' == ''">$(TestCommandLine) -wait</StartArguments>
    <DebugEngines>{2E36F1D4-B23C-435D-AB41-18E608940038}</DebugEngines>
  </PropertyGroup>

  <!-- On command line run unit tests on CoreCLR after the Test target -->
  <Target Name="RunTestsForProject"
          AfterTargets="CheckTestCategories"
          Condition="'$(TestDisabled)'!='True'">

    <PropertyGroup>
      <XunitOptions Condition="'@(RunWithTraits)'!=''">$(XunitOptions) -trait category=@(RunWithTraits, ' -trait category=') </XunitOptions>
      <XunitOptions Condition="'@(RunWithoutTraits)'!=''">$(XunitOptions) -notrait category=@(RunWithoutTraits, ' -notrait category=') </XunitOptions>
    </PropertyGroup>

    <!-- xUnit command line without coverage enabled -->
    <PropertyGroup>
      <TestHost>$(XunitHost)</TestHost>
      <TestCommandLine>$(XunitCommandLine) $(XunitOptions)</TestCommandLine>
    </PropertyGroup>
    
    <!-- xUnit command line with coverage enabled -->
    <PropertyGroup Condition="'$(CoverageEnabledForProject)'=='true'">
      <TestHost>$(CoverageHost)</TestHost>
      <XunitOptions>$(XunitOptions) -parallel none</XunitOptions>
      <TestCommandLine>$(CoverageCommandLine) -targetargs:"$(TestCommandLine)"</TestCommandLine>
    </PropertyGroup>

    <MakeDir Condition="'$(CoverageEnabledForProject)'=='true'" Directories="$(CoverageReportDir)" />

    <Exec Command="$(TestHost) $(TestCommandLine)"
          WorkingDirectory="$(TestPath)%(TestTargetFramework.Folder)"
          ContinueOnError="True">
      <Output PropertyName="TestRunExitCode" TaskParameter="ExitCode" />
    </Exec>

    <Error Condition="'$(TestRunExitCode)' != '0'" Text="One or more tests failed while running tests from '$(MSBuildProjectName)' please check log for details!" />
  </Target>

  <Target Name="CheckTestCategories"
          AfterTargets="Test"
          Condition="'$(TestDisabled)'!='True'">

    <Error Condition="'$(RunTestsWithCategories)' != '' And '$(RunTestsWithoutCategories)' != ''"
           Text="Specifying both RunTestsWithCategories and RunTestsWithoutCategories is not supported please only specify one or the other." />

    <ItemGroup Condition="'@(RunTestsWithCategoriesItems)'!=''">
      <!-- Intersection of TestCategoriesItems and RunTestsWithCategoriesItems -->
      <TestCategoriesToRun Include="@(TestCategoriesItems)" Condition="'@(RunTestsWithCategoriesItems)'=='%(Identity)'" />
    </ItemGroup>
    <ItemGroup Condition="'@(RunTestsWithoutCategoriesItems)'!=''">
      <!-- Run all test categories except specified -->
      <TestCategoriesToRun Include="@(TestCategoriesItems)" Exclude="@(RunTestsWithoutCategoriesItems)" />
    </ItemGroup>
    <ItemGroup>
      <RunWithInnerLoopItems Include="@(TestCategoriesToRun)" Condition="'%(TestCategoriesToRun.Identity)'=='InnerLoop'" />
      
      <RunWithTraits Condition="'@(RunWithInnerLoopItems)'==''" Include="@(TestCategoriesToRun)" />

      <RunWithoutTraits Condition="'@(RunWithInnerLoopItems)'!=''" Include="@(TestCategoriesItems)" />
      <RunWithoutTraits Condition="'@(RunWithInnerLoopItems)'!=''" Remove="@(TestCategoriesToRun)" />
    </ItemGroup>
    <PropertyGroup>
      <!-- If there is nothing to run then disable the test -->
      <TestDisabled Condition="'@(TestCategoriesToRun)'==''">True</TestDisabled>
    </PropertyGroup>
  </Target>

  <!-- Generate coverage reports for individual projects. -->
  <Target Name="GenerateIndividualCoverageReport"
          AfterTargets="RunTestsForProject"
          Inputs="$(CoverageOutputFilePath)"
          Outputs="$(CoverageReportDir)index.htm"
          Condition="'$(BuildAllProjects)'!='true' and '$(CoverageEnabledForProject)'=='true'">

    <Exec Command="$(CoverageReportGeneratorCommandLine) -reports:$(CoverageOutputFilePath)" 
          ContinueOnError="ErrorAndContinue" />
  </Target>

</Project>
