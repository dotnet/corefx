<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(TargetFrameworkVersion)' != '' and '$(TargetFrameworkProfile)' != ''">
    <TargetingPortable>true</TargetingPortable>
  </PropertyGroup>

  <!-- Setup the default target for projects not already explicitly targeting portable -->
  <PropertyGroup Condition="'$(TargetingPortable)' != 'true'">
    <!-- Setting a default portable profile, although nothing should resolve from there as we want to use the pacakge refs -->
    <TargetPlatformIdentifier>Portable</TargetPlatformIdentifier>
    <TargetFrameworkIdentifier>.NETPortable</TargetFrameworkIdentifier>
    <TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">v4.5</TargetFrameworkVersion>
    <TargetFrameworkProfile Condition="'$(TargetFrameworkProfile)' == ''">Profile7</TargetFrameworkProfile>
    <TargetFrameworkMonikerDisplayName>.NET Portable Subset</TargetFrameworkMonikerDisplayName>
    <ImplicitlyExpandTargetFramework Condition="'$(ImplicitlyExpandTargetFramework)' == ''">false</ImplicitlyExpandTargetFramework>

    <AssemblySearchPaths>
      {HintPathFromItem};
      $(OutDir);
      {RawFileName};
    </AssemblySearchPaths>
    <!-- For our projects we don't want to resolve from the usual paths for now only hint paths and output directory 
      {CandidateAssemblyFiles};
      $(ReferencePath);
      {TargetFrameworkDirectory};
      {Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};
    -->
  </PropertyGroup>

  <!-- Need to add references to the mscorlib design-time facade for some old-style portable dependencies like xunit -->
  <Target Name="AddDesignTimeFacadeReferences"
      Condition="'$(TargetingPortable)' != 'true'"
      BeforeTargets="ResolveReferences"
      DependsOnTargets="GetReferenceAssemblyPaths"
  >
    <ItemGroup>
      <PossibleTargetFrameworks Include="$(_TargetFrameworkDirectories)" />
      <ReferencePath Include="%(PossibleTargetFrameworks.Identity)mscorlib.dll" />
    </ItemGroup>
  </Target>

  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />

  <Import Project="$(ToolsDir)packageresolve.targets" Condition="Exists('$(ToolsDir)packageresolve.targets')" />

  <Import Project="$(ToolsDir)sign.targets" Condition="Exists('$(ToolsDir)sign.targets')" />
  
  <Import Project="$(ToolsDir)publishtest.targets" Condition="Exists('$(ToolsDir)publishtest.targets')" />
  
  <PropertyGroup>
    <IsTestProject Condition="'$(IsTestProject)'=='' And $([System.String]::new('$(MSBuildProjectName)').EndsWith('.Tests'))">True</IsTestProject>
    <RunTestsForProject Condition="'$(RunTestsForProject)'=='' and '$(IsTestProject)'=='True'">True</RunTestsForProject>
    <RunTestsForProject Condition="'$(SkipTests)'=='True'">False</RunTestsForProject>
  </PropertyGroup>

  <Target Name="RunTestsForProject"
          AfterTargets="PrepareForRun"
          Condition="'$(RunTestsForProject)'=='True'">

    <!-- xUnit Traits -->
    <PropertyGroup>
      <ExcludeTraits Condition="'$(ExcludeTraits)'==''">category=outerloop;category=failing</ExcludeTraits>
    </PropertyGroup>
    <ItemGroup>
      <IncludeTraitsItems Include="$(IncludeTraits)" />
      <ExcludeTraitsItems Include="$(ExcludeTraits)" />
    </ItemGroup>
    
    <!-- Construct and invoke xunit console runner via corerun.exe -->
    <PropertyGroup>
      <XunitCommandLine>corerun.exe xunit.console.netcore.exe</XunitCommandLine>
      
      <XunitOptions>$(XunitOptions) $(TargetFileName)</XunitOptions>
      <XunitOptions Condition="'@(IncludeTraitsItems)'!=''">$(XunitOptions) -trait @(IncludeTraitsItems, ' -trait ')</XunitOptions>
      <XunitOptions Condition="'@(ExcludeTraitsItems)'!=''">$(XunitOptions) -notrait @(ExcludeTraitsItems, ' -notrait ')</XunitOptions>
    </PropertyGroup>

    <Exec Command="$(XunitCommandLine) $(XunitOptions)"
          WorkingDirectory="$(TestPath)%(TestTargetFramework.Folder)"
          ContinueOnError="True">
      <Output PropertyName="TestRunExitCode" TaskParameter="ExitCode" />
    </Exec>

    <Error Condition="'$(TestRunExitCode)' != '0'" Text="One or more tests failed while running tests from '$(MSBuildProjectName)' please check log for details!" />
  </Target>
</Project>