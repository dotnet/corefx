// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
// ------------------------------------------------------------------------------
// Changes to this file must follow the http://aka.ms/api-review process.
// ------------------------------------------------------------------------------


namespace System.CodeDom.Compiler
{
    /// <summary>
    /// Identifies code generated by a tool. This class cannot be inherited.
    /// </summary>
    [System.AttributeUsageAttribute((System.AttributeTargets)(32767), Inherited = false, AllowMultiple = false)]
    public sealed partial class GeneratedCodeAttribute : System.Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratedCodeAttribute" />
        /// class specifying the name and version of the tool that generated the code.
        /// </summary>
        /// <param name="tool">The name of the tool that generated the code.</param>
        /// <param name="version">The version of the tool that generated the code.</param>
        public GeneratedCodeAttribute(string tool, string version) { }
        /// <summary>
        /// Gets the name of the tool that generated the code.
        /// </summary>
        /// <returns>
        /// The name of the tool that generated to code.
        /// </returns>
        public string Tool { get { return default(string); } }
        /// <summary>
        /// Gets the version of the tool that generated the code.
        /// </summary>
        /// <returns>
        /// The version of the tool that generated the code.
        /// </returns>
        public string Version { get { return default(string); } }
    }
}
namespace System.Diagnostics.CodeAnalysis
{
    /// <summary>
    /// Suppresses reporting of a specific static analysis tool rule violation, allowing multiple suppressions
    /// on a single code artifact.
    /// </summary>
    [System.AttributeUsageAttribute((System.AttributeTargets)(32767), Inherited = false, AllowMultiple = true)]
    [System.Diagnostics.ConditionalAttribute("CODE_ANALYSIS")]
    public sealed partial class SuppressMessageAttribute : System.Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuppressMessageAttribute" />
        /// class, specifying the category of the static analysis tool and the identifier for an analysis
        /// rule.
        /// </summary>
        /// <param name="category">The category for the attribute.</param>
        /// <param name="checkId">The identifier of the analysis tool rule the attribute applies to.</param>
        public SuppressMessageAttribute(string category, string checkId) { }
        /// <summary>
        /// Gets the category identifying the classification of the attribute.
        /// </summary>
        /// <returns>
        /// The category identifying the attribute.
        /// </returns>
        public string Category { get { return default(string); } }
        /// <summary>
        /// Gets the identifier of the static analysis tool rule to be suppressed.
        /// </summary>
        /// <returns>
        /// The identifier of the static analysis tool rule to be suppressed.
        /// </returns>
        public string CheckId { get { return default(string); } }
        /// <summary>
        /// Gets or sets the justification for suppressing the code analysis message.
        /// </summary>
        /// <returns>
        /// The justification for suppressing the message.
        /// </returns>
        public string Justification { get { return default(string); } set { } }
        /// <summary>
        /// Gets or sets an optional argument expanding on exclusion criteria.
        /// </summary>
        /// <returns>
        /// A string containing the expanded exclusion criteria.
        /// </returns>
        public string MessageId { get { return default(string); } set { } }
        /// <summary>
        /// Gets or sets the scope of the code that is relevant for the attribute.
        /// </summary>
        /// <returns>
        /// The scope of the code that is relevant for the attribute.
        /// </returns>
        public string Scope { get { return default(string); } set { } }
        /// <summary>
        /// Gets or sets a fully qualified path that represents the target of the attribute.
        /// </summary>
        /// <returns>
        /// A fully qualified path that represents the target of the attribute.
        /// </returns>
        public string Target { get { return default(string); } set { } }
    }
}
