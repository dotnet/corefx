<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <DefineConstants>$(DefineConstants);XMLSERIALIZERGENERATORTESTS</DefineConstants>
    <Configurations>netcoreapp-Debug;netcoreapp-Release</Configurations>
    <CoverageSupported>false</CoverageSupported>
    <SkipTestsOnPlatform Condition="'$(ArchGroup)' == 'arm' OR '$(ArchGroup)' == 'arm64' OR '$(ArchGroup)' == 'armel'">true</SkipTestsOnPlatform>
  </PropertyGroup>
  <PropertyGroup>
    <!-- Reuse the same runtimeconfig used by MSBuild. -->
    <GeneratorRuntimeConfig>$(MSBuildToolsPath)\MSBuild.runtimeconfig.json</GeneratorRuntimeConfig>
    <GeneratorCommand Condition="'$(TargetsNetCoreApp)' == 'true'">"$(TestHostRootPath)$([System.IO.Path]::GetFileName('$(DotNetTool)'))" --fx-version $(ProductVersion)</GeneratorCommand>
    <GeneratorCommand Condition="'$(TargetsNetCoreApp)' != 'true'">"$(DotNetTool)"</GeneratorCommand>
    <GeneratorCommand Condition="'$(OS)' == 'Windows_NT'">set DOTNET_MULTILEVEL_LOOKUP=0 &amp; $(GeneratorCommand)</GeneratorCommand>
    <GeneratorCommand Condition="'$(OS)' != 'Windows_NT'">export DOTNET_MULTILEVEL_LOOKUP=0 &amp; $(GeneratorCommand)</GeneratorCommand>
  </PropertyGroup>
  <ItemGroup Condition=" '$(SkipTestsOnPlatform)' != 'true' ">
    <Compile Include=".\SGenTests.cs" />
    <Compile Include="$(CommonTestPath)\System\Runtime\Serialization\Utils.cs" />
    <Compile Include="$(TestSourceFolder)..\..\System.Runtime.Serialization.Xml\tests\SerializationTypes.cs" />
    <Compile Include="$(TestSourceFolder)..\..\System.Private.Xml\tests\XmlSerializer\XmlSerializerTests.cs" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include=".\AlwaysPassTest.cs" />
    <Content Include="$(GeneratorRuntimeConfig)">
      <!-- Rename it to match the Generator application name -->
      <Link>dotnet-Microsoft.XmlSerializer.Generator.runtimeconfig.json</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <ReferenceFromRuntime Include="dotnet-Microsoft.XmlSerializer.Generator">
      <!-- Copy this to our test output directory and run from there.
           This is required so that we can stage the application with a custom runtimeconfig that lets it run on the test shared framework. -->
      <Private>true</Private>
    </ReferenceFromRuntime>
  </ItemGroup>
  <!-- This target runs before binplacing as it needs to provide a test assembly to binplace, and depends on CopyFilesToOutputDirectory
       so that the Generator app dll and runtimeconfig will be copied to the OutputPath -->
  <Target Name="GenerateSerializationAssembly" DependsOnTargets="CopyFilesToOutputDirectory" AfterTargets="PrepareForRun" Condition=" '$(SkipTestsOnPlatform)' != 'true' ">
    <PropertyGroup>
      <SerializerName>$(AssemblyName).XmlSerializers</SerializerName>
    </PropertyGroup>
    <Message Text="Running Serialization Tool" Importance="normal" />
    <Exec Command="$(GeneratorCommand) $(OutputPath)dotnet-Microsoft.XmlSerializer.Generator.dll $(OutputPath)Microsoft.XmlSerializer.Generator.Tests.dll --force --quiet" />
    <Warning Condition="Exists('$(OutputPath)$(SerializerName).cs') != 'true'" Text="Fail to generate $(OutputPath)$(SerializerName).cs" />
    <Csc Condition="Exists('$(OutputPath)$(SerializerName).cs') == 'true'" OutputAssembly="$(OutputPath)$(SerializerName).dll" References="@(ReferencePath);@(IntermediateAssembly)" EmitDebugInformation="$(DebugSymbols)" DebugType="$(DebugType)" Sources="$(OutputPath)$(SerializerName).cs" TargetType="Library" ToolExe="$(CscToolExe)" ToolPath="$(CscToolPath)" DisabledWarnings="$(NoWarn), 219" UseSharedCompilation="true" />
    <Warning Condition="Exists('$(OutputPath)$(SerializerName).dll') != 'true'" Text="Fail to generate $(OutputPath)$(SerializerName).dll" />
    <ItemGroup>
      <!-- Include the Serializer in ReferenceCopyLocalPaths so that it will be binplaced -->
      <ReferenceCopyLocalPaths Include="$(OutputPath)$(SerializerName).dll" />
    </ItemGroup>
  </Target>
</Project>