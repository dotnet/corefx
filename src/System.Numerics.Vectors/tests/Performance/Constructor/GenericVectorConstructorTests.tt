<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ include file="..\..\..\..\Common\src\CoreLib\System\Numerics\GenerationConfig.ttinclude" #><# GenerateCopyrightHeader(); #>

using System;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using Xunit;
using Xunit.Sdk;
using Microsoft.Xunit.Performance;

namespace System.Numerics.Tests
{
    public static class Constructor
    {
        private static Random s_random = new Random();

        public const int DefaultInnerIterationsCount = 100000000;

<# 
    foreach (var type in supportedTypes)
    {
#>
        [Benchmark(InnerIterationCount = DefaultInnerIterationsCount)]
        public static void ConstructorBenchmark_<#=type.Name#>()
        {
            <#=type.Name#>[] arrValues = GenerateRandomValuesForVector<<#=type.Name#>>();
            var spanValues = new Span<<#=type.Name#>>(arrValues);
            foreach (BenchmarkIteration iteration in Benchmark.Iterations)
            {
                using (iteration.StartMeasurement())
                {
                    Construct<<#=type.Name#>>(spanValues);
                }
            }
        }

<#
    }
#>

        public static void Construct<T>(Span<T> values) where T : struct
        {
            for (var iteration = 0; iteration < Benchmark.InnerIterationCount; iteration++)
            {
                Vector<T> vect = new Vector<T>(values);
            }
        }

<# 
    foreach (var type in supportedTypes)
    {
#>
        [Benchmark(InnerIterationCount = DefaultInnerIterationsCount)]
        public static void SpanCastBenchmark_<#=type.Name#>()
        {
            <#=type.Name#>[] arrValues = GenerateRandomValuesForVector<<#=type.Name#>>();
            var spanValues = new ReadOnlySpan<<#=type.Name#>>(arrValues);
            foreach (BenchmarkIteration iteration in Benchmark.Iterations)
            {
                using (iteration.StartMeasurement())
                {
                    SpanCast<<#=type.Name#>>(spanValues);
                }
            }
        }

<#
    }
#>

        public static void SpanCast<T>(ReadOnlySpan<T> values) where T : struct
        {
            for (var iteration = 0; iteration < Benchmark.InnerIterationCount; iteration++)
            {
                ReadOnlySpan<Vector<T>> vectors = MemoryMarshal.Cast<T, Vector<T>>(values);
                Vector<T> vector = vectors[0];
            }
        }

        internal static T[] GenerateRandomValuesForVector<T>() where T : struct
        {
            int minValue = GetMinValue<T>();
            int maxValue = GetMaxValue<T>();
            return Util.GenerateRandomValues<T>(Vector<T>.Count, minValue, maxValue);
        }

        internal static int GetMinValue<T>() where T : struct
        {
            if (typeof(T) == typeof(Int64) || typeof(T) == typeof(Single) || typeof(T) == typeof(Double) || typeof(T) == typeof(UInt32) || typeof(T) == typeof(UInt64))
            {
                return int.MinValue;
            }
            TypeInfo typeInfo = typeof(T).GetTypeInfo();
            FieldInfo field = typeInfo.GetDeclaredField("MinValue");
            var value = field.GetValue(null);
            return (int)(dynamic)value;
        }

        internal static int GetMaxValue<T>() where T : struct
        {
            if (typeof(T) == typeof(Int64) || typeof(T) == typeof(Single) || typeof(T) == typeof(Double) || typeof(T) == typeof(UInt32) || typeof(T) == typeof(UInt64))
            {
                return int.MaxValue;
            }
            TypeInfo typeInfo = typeof(T).GetTypeInfo();
            FieldInfo field = typeInfo.GetDeclaredField("MaxValue");
            var value = field.GetValue(null);
            return (int)(dynamic)value;
        }
    }
}
