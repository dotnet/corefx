using System;
using System.IO;
using BenchmarkDotNet.Extensions;
using BenchmarkDotNet.Loggers;
using BenchmarkDotNet.Running;
using BenchmarkDotNet.Toolchains;
using BenchmarkDotNet.Toolchains.CsProj;
using BenchmarkDotNet.Toolchains.DotNetCli;

public class CoreFxToolchain : Toolchain
{
    public CoreFxToolchain(string targetFrameworkMoniker)
        : base(
            "CoreFX",
            new CoreFxGenerator(targetFrameworkMoniker),
            new CoreFxBuilder(),
            new DotNetCliExecutor(GetDotNetPath()))
    {
    }

    private static string GetDotNetPath()
        => Path.Combine(
            Environment.GetEnvironmentVariable("RUNTIME_PATH", EnvironmentVariableTarget.Process),
            "dotnet");
}

public class CoreFxGenerator : CsProjGenerator
{
    public CoreFxGenerator(string targetFrameworkMoniker)
        : base(targetFrameworkMoniker, platform => platform.ToConfig(), runtimeFrameworkVersion: null)
    {
    }
    
    protected override string GetBuildArtifactsDirectoryPath(BuildPartition buildPartition, string programName) 
        => Path.Combine(
            // we want to store it on the same level as the project which defines benchmarks, to make sure that all .targets and .props files are going to be included
            GetProjectFilePath(buildPartition.RepresentativeBenchmarkCase.Descriptor.Type, NullLogger.Instance).Directory.Parent.FullName, 
            programName);

    protected override string GetProjectFilePath(string buildArtifactsDirectoryPath)
        => Path.Combine(buildArtifactsDirectoryPath, "BenchmarkDotNet.Autogenerated.Performance.Tests.csproj"); // Performance.Tests is key part of the name for the CoreFX MSBuild magic to work
        
    protected override string GetBinariesDirectoryPath(string buildArtifactsDirectoryPath, string configuration)
        => Path.Combine(buildArtifactsDirectoryPath, "bin", configuration); // TFM not used

    protected override void GenerateProject(BuildPartition buildPartition, ArtifactsPaths artifactsPaths, ILogger logger)
    {
        var configurationsPath = Path.Combine(Path.GetDirectoryName(artifactsPaths.ProjectFilePath), "Configurations.props");
        
        File.WriteAllText(configurationsPath, 
$@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""14.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <PropertyGroup>
    <BuildConfigurations>
      {TargetFrameworkMoniker};
    </BuildConfigurations>
  </PropertyGroup>
</Project>");
            
        File.WriteAllText(artifactsPaths.ProjectFilePath, 
$@"<Project Sdk=""Microsoft.NET.Sdk"">
  <PropertyGroup>
    <OutputPath>bin\{buildPartition.BuildConfiguration}</OutputPath>
    <AssemblyName>{artifactsPaths.ProgramName}</AssemblyName>
    <AssemblyTitle>{artifactsPaths.ProgramName}</AssemblyTitle>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
    <DebugType>pdbonly</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <IsBenchmarkDotNetProject>true</IsBenchmarkDotNetProject>
    <StartupObject>BenchmarkDotNet.Autogenerated.UniqueProgramName</StartupObject>
  </PropertyGroup>
  {GetRuntimeSettings(buildPartition.RepresentativeBenchmarkCase.Job.Environment.Gc, buildPartition.Resolver)}
  <ItemGroup>
    <Compile Include=""{Path.GetFileName(artifactsPaths.ProgramCodePath)}"" Exclude=""bin\**;obj\**;**\*.xproj;packages\**"" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include=""{GetProjectFilePath(buildPartition.RepresentativeBenchmarkCase.Descriptor.Type, logger).FullName}"" />
  </ItemGroup>
  <ItemGroup>
    <SupplementalTestData Include=""$(RuntimeConfigPath)"" DestinationName=""{artifactsPaths.ProgramName}.runtimeconfig.json"" />
  </ItemGroup>
</Project>");
    }
}

public class CoreFxBuilder : DotNetCliBuilder
{
    public CoreFxBuilder() : base(targetFrameworkMoniker: null, customDotNetCliPath: null)
    {
    }
    
    public override string RestoreCommand => "msbuild /p:ConfigurationGroup=Release";

    public override string GetBuildCommand(string frameworkMoniker, bool justTheProjectItself, string configuration)
        => "msbuild /p:ConfigurationGroup=Release";
}
