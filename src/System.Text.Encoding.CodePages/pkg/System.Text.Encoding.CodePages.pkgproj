<Project DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />
  <ItemGroup>
    <ProjectReference Include="..\ref\System.Text.Encoding.CodePages.csproj">
      <SupportedFramework>net461;netcoreapp2.0;$(AllXamarinFrameworks)</SupportedFramework>
    </ProjectReference>
    <ProjectReference Include="..\src\System.Text.Encoding.CodePages.csproj" />
    <HarvestIncludePaths Include="lib/net46" />
    <HarvestIncludePaths Include="runtimes/win/lib/netstandard1.3;lib/netstandard1.3" />
  </ItemGroup>
  <ItemGroup>
    <InboxOnTargetFramework Include="MonoAndroid10" />
    <InboxOnTargetFramework Include="MonoTouch10" />
    <InboxOnTargetFramework Include="xamarinios10" />
    <InboxOnTargetFramework Include="xamarinmac20" />
    <InboxOnTargetFramework Include="xamarintvos10" />
    <InboxOnTargetFramework Include="xamarinwatchos10" />

    <!-- Since UAP and .NETCoreApp are package based we still want to enable
         OOBing libraries that happen to overlap with their framework package.
         This avoids us having to lock the API in our NuGet packages just 
         to match what shipped inbox: since we can provide a new library 
         we can update it to add API without raising the netstandard version. -->
    <ValidatePackageSuppression Include="TreatAsOutOfBox">
      <Value>.NETCoreApp;UAP</Value>
    </ValidatePackageSuppression>
  </ItemGroup>
  <PropertyGroup>
    <!-- Excluding the reference assets on the package so that RAR will see the run-time conflicts at build time in order to
    generate the right binding redirects when targeting Desktop. https://github.com/dotnet/corefx/issues/32457 -->
    <ExcludeReferenceAssets>true</ExcludeReferenceAssets>
  </PropertyGroup>
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.targets))\Directory.Build.targets" />
</Project>