// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Globalization;
using Microsoft.Xunit.Performance;
using Xunit;

namespace System.Tests
{
    public class Perf_Double
    {
        public static readonly double dValue = 1.23456789E+5;
        private const int iterCount = 20000;

        [Benchmark(InnerIterationCount = iterCount)]
        [InlineData(104234.343)]
        [InlineData(double.MinValue / 2)]
        [InlineData(Math.PI)]
        [InlineData(Math.E)]
        [InlineData(double.MaxValue)]
        [InlineData(double.MinValue)]
        [InlineData(double.NaN)]
        [InlineData(double.PositiveInfinity)]
        [InlineData(double.NegativeInfinity)]
        [InlineData(0xFFFFFFFFFFFFF)]
        [InlineData(0x800FFFFFFFFFFFFF)]
        [InlineData(0x7FFFFFFFFFFFF)]
        [InlineData(0x8000000000000000)]
        [InlineData(0x0000000000000000)]
        public void DefaultToString(double number)
        {
            foreach (var iteration in Benchmark.Iterations)
            {
                using (iteration.StartMeasurement())
                {
                    for (int i = 0; i < Benchmark.InnerIterationCount; i++)
                    {
                        number.ToString();
                    }
                }
            }
        }

        [Benchmark(InnerIterationCount = iterCount)]
        [InlineData("zh", 104234.343)]
        [InlineData("zh", double.MinValue / 2)]
        [InlineData("zh", Math.PI)]
        [InlineData("zh", Math.E)]
        [InlineData("zh", double.MaxValue)]
        [InlineData("zh", double.MinValue)]
        [InlineData("zh", double.NaN)]
        [InlineData("zh", double.PositiveInfinity)]
        [InlineData("zh", double.NegativeInfinity)]
        [InlineData("zh", 0xFFFFFFFFFFFFF)]
        [InlineData("zh", 0x800FFFFFFFFFFFFF)]
        [InlineData("zh", 0x7FFFFFFFFFFFF)]
        [InlineData("zh", 0x8000000000000000)]
        [InlineData("zh", 0x0000000000000000)]
        public void ToStringWithCultureInfo(string cultureName, double number)
        {
            CultureInfo cultureInfo = new CultureInfo(cultureName);
            foreach (var iteration in Benchmark.Iterations)
            {
                using (iteration.StartMeasurement())
                {
                    for (int i = 0; i < Benchmark.InnerIterationCount; i++)
                    {
                        number.ToString(cultureInfo);
                    }
                }
            }
        }

        [Benchmark(InnerIterationCount = iterCount)]
        [InlineData("R", 104234.343)]
        [InlineData("R", double.MinValue / 2)]
        [InlineData("R", Math.PI)]
        [InlineData("R", Math.E)]
        [InlineData("R", double.MaxValue)]
        [InlineData("R", double.MinValue)]
        [InlineData("R", double.NaN)]
        [InlineData("R", double.PositiveInfinity)]
        [InlineData("R", double.NegativeInfinity)]
        [InlineData("R", 0xFFFFFFFFFFFFF)]
        [InlineData("R", 0x800FFFFFFFFFFFFF)]
        [InlineData("R", 0x7FFFFFFFFFFFF)]
        [InlineData("R", 0x8000000000000000)]
        [InlineData("R", 0x0000000000000000)]
        [InlineData("G", 104234.343)]
        [InlineData("G", double.MinValue / 2)]
        [InlineData("G", Math.PI)]
        [InlineData("G", Math.E)]
        [InlineData("G", double.MaxValue)]
        [InlineData("G", double.MinValue)]
        [InlineData("G", double.NaN)]
        [InlineData("G", double.PositiveInfinity)]
        [InlineData("G", double.NegativeInfinity)]
        [InlineData("G", 0xFFFFFFFFFFFFF)]
        [InlineData("G", 0x800FFFFFFFFFFFFF)]
        [InlineData("G", 0x7FFFFFFFFFFFF)]
        [InlineData("G", 0x8000000000000000)]
        [InlineData("G", 0x0000000000000000)]
        [InlineData("G17", 104234.343)]
        [InlineData("G17", double.MinValue / 2)]
        [InlineData("G17", Math.PI)]
        [InlineData("G17", Math.E)]
        [InlineData("G17", double.MaxValue)]
        [InlineData("G17", double.MinValue)]
        [InlineData("G17", double.NaN)]
        [InlineData("G17", double.PositiveInfinity)]
        [InlineData("G17", double.NegativeInfinity)]
        [InlineData("G17", 0xFFFFFFFFFFFFF)]
        [InlineData("G17", 0x800FFFFFFFFFFFFF)]
        [InlineData("G17", 0x7FFFFFFFFFFFF)]
        [InlineData("G17", 0x8000000000000000)]
        [InlineData("G17", 0x0000000000000000)]
        [InlineData("G16", 104234.343)]
        [InlineData("G16", double.MinValue / 2)]
        [InlineData("G16", Math.PI)]
        [InlineData("G16", Math.E)]
        [InlineData("G16", double.MaxValue)]
        [InlineData("G16", double.MinValue)]
        [InlineData("G16", double.NaN)]
        [InlineData("G16", double.PositiveInfinity)]
        [InlineData("G16", double.NegativeInfinity)]
        [InlineData("G16", 0xFFFFFFFFFFFFF)]
        [InlineData("G16", 0x800FFFFFFFFFFFFF)]
        [InlineData("G16", 0x7FFFFFFFFFFFF)]
        [InlineData("G16", 0x8000000000000000)]
        [InlineData("G16", 0x0000000000000000)]
        [InlineData("G15", 104234.343)]
        [InlineData("G15", double.MinValue / 2)]
        [InlineData("G15", Math.PI)]
        [InlineData("G15", Math.E)]
        [InlineData("G15", double.MaxValue)]
        [InlineData("G15", double.MinValue)]
        [InlineData("G15", double.NaN)]
        [InlineData("G15", double.PositiveInfinity)]
        [InlineData("G15", double.NegativeInfinity)]
        [InlineData("G15", 0xFFFFFFFFFFFFF)]
        [InlineData("G15", 0x800FFFFFFFFFFFFF)]
        [InlineData("G15", 0x7FFFFFFFFFFFF)]
        [InlineData("G15", 0x8000000000000000)]
        [InlineData("G15", 0x0000000000000000)]
        [InlineData("G14", 104234.343)]
        [InlineData("G14", double.MinValue / 2)]
        [InlineData("G14", Math.PI)]
        [InlineData("G14", Math.E)]
        [InlineData("G14", double.MaxValue)]
        [InlineData("G14", double.MinValue)]
        [InlineData("G14", double.NaN)]
        [InlineData("G14", double.PositiveInfinity)]
        [InlineData("G14", double.NegativeInfinity)]
        [InlineData("G14", 0xFFFFFFFFFFFFF)]
        [InlineData("G14", 0x800FFFFFFFFFFFFF)]
        [InlineData("G14", 0x7FFFFFFFFFFFF)]
        [InlineData("G14", 0x8000000000000000)]
        [InlineData("G14", 0x0000000000000000)]
        [InlineData("G13", 104234.343)]
        [InlineData("G13", double.MinValue / 2)]
        [InlineData("G13", Math.PI)]
        [InlineData("G13", Math.E)]
        [InlineData("G13", double.MaxValue)]
        [InlineData("G13", double.MinValue)]
        [InlineData("G13", double.NaN)]
        [InlineData("G13", double.PositiveInfinity)]
        [InlineData("G13", double.NegativeInfinity)]
        [InlineData("G13", 0xFFFFFFFFFFFFF)]
        [InlineData("G13", 0x800FFFFFFFFFFFFF)]
        [InlineData("G13", 0x7FFFFFFFFFFFF)]
        [InlineData("G13", 0x8000000000000000)]
        [InlineData("G13", 0x0000000000000000)]
        [InlineData("G12", 104234.343)]
        [InlineData("G12", double.MinValue / 2)]
        [InlineData("G12", Math.PI)]
        [InlineData("G12", Math.E)]
        [InlineData("G12", double.MaxValue)]
        [InlineData("G12", double.MinValue)]
        [InlineData("G12", double.NaN)]
        [InlineData("G12", double.PositiveInfinity)]
        [InlineData("G12", double.NegativeInfinity)]
        [InlineData("G12", 0xFFFFFFFFFFFFF)]
        [InlineData("G12", 0x800FFFFFFFFFFFFF)]
        [InlineData("G12", 0x7FFFFFFFFFFFF)]
        [InlineData("G12", 0x8000000000000000)]
        [InlineData("G12", 0x0000000000000000)]
        [InlineData("G11", 104234.343)]
        [InlineData("G11", double.MinValue / 2)]
        [InlineData("G11", Math.PI)]
        [InlineData("G11", Math.E)]
        [InlineData("G11", double.MaxValue)]
        [InlineData("G11", double.MinValue)]
        [InlineData("G11", double.NaN)]
        [InlineData("G11", double.PositiveInfinity)]
        [InlineData("G11", double.NegativeInfinity)]
        [InlineData("G11", 0xFFFFFFFFFFFFF)]
        [InlineData("G11", 0x800FFFFFFFFFFFFF)]
        [InlineData("G11", 0x7FFFFFFFFFFFF)]
        [InlineData("G11", 0x8000000000000000)]
        [InlineData("G11", 0x0000000000000000)]
        [InlineData("G10", 104234.343)]
        [InlineData("G10", double.MinValue / 2)]
        [InlineData("G10", Math.PI)]
        [InlineData("G10", Math.E)]
        [InlineData("G10", double.MaxValue)]
        [InlineData("G10", double.MinValue)]
        [InlineData("G10", double.NaN)]
        [InlineData("G10", double.PositiveInfinity)]
        [InlineData("G10", double.NegativeInfinity)]
        [InlineData("G10", 0xFFFFFFFFFFFFF)]
        [InlineData("G10", 0x800FFFFFFFFFFFFF)]
        [InlineData("G10", 0x7FFFFFFFFFFFF)]
        [InlineData("G10", 0x8000000000000000)]
        [InlineData("G10", 0x0000000000000000)]
        [InlineData("G9", 104234.343)]
        [InlineData("G9", double.MinValue / 2)]
        [InlineData("G9", Math.PI)]
        [InlineData("G9", Math.E)]
        [InlineData("G9", double.MaxValue)]
        [InlineData("G9", double.MinValue)]
        [InlineData("G9", double.NaN)]
        [InlineData("G9", double.PositiveInfinity)]
        [InlineData("G9", double.NegativeInfinity)]
        [InlineData("G9", 0xFFFFFFFFFFFFF)]
        [InlineData("G9", 0x800FFFFFFFFFFFFF)]
        [InlineData("G9", 0x7FFFFFFFFFFFF)]
        [InlineData("G9", 0x8000000000000000)]
        [InlineData("G9", 0x0000000000000000)]
        [InlineData("G8", 104234.343)]
        [InlineData("G8", double.MinValue / 2)]
        [InlineData("G8", Math.PI)]
        [InlineData("G8", Math.E)]
        [InlineData("G8", double.MaxValue)]
        [InlineData("G8", double.MinValue)]
        [InlineData("G8", double.NaN)]
        [InlineData("G8", double.PositiveInfinity)]
        [InlineData("G8", double.NegativeInfinity)]
        [InlineData("G8", 0xFFFFFFFFFFFFF)]
        [InlineData("G8", 0x800FFFFFFFFFFFFF)]
        [InlineData("G8", 0x7FFFFFFFFFFFF)]
        [InlineData("G8", 0x8000000000000000)]
        [InlineData("G8", 0x0000000000000000)]
        [InlineData("G7", 104234.343)]
        [InlineData("G7", double.MinValue / 2)]
        [InlineData("G7", Math.PI)]
        [InlineData("G7", Math.E)]
        [InlineData("G7", double.MaxValue)]
        [InlineData("G7", double.MinValue)]
        [InlineData("G7", double.NaN)]
        [InlineData("G7", double.PositiveInfinity)]
        [InlineData("G7", double.NegativeInfinity)]
        [InlineData("G7", 0xFFFFFFFFFFFFF)]
        [InlineData("G7", 0x800FFFFFFFFFFFFF)]
        [InlineData("G7", 0x7FFFFFFFFFFFF)]
        [InlineData("G7", 0x8000000000000000)]
        [InlineData("G7", 0x0000000000000000)]
        [InlineData("G6", 104234.343)]
        [InlineData("G6", double.MinValue / 2)]
        [InlineData("G6", Math.PI)]
        [InlineData("G6", Math.E)]
        [InlineData("G6", double.MaxValue)]
        [InlineData("G6", double.MinValue)]
        [InlineData("G6", double.NaN)]
        [InlineData("G6", double.PositiveInfinity)]
        [InlineData("G6", double.NegativeInfinity)]
        [InlineData("G6", 0xFFFFFFFFFFFFF)]
        [InlineData("G6", 0x800FFFFFFFFFFFFF)]
        [InlineData("G6", 0x7FFFFFFFFFFFF)]
        [InlineData("G6", 0x8000000000000000)]
        [InlineData("G6", 0x0000000000000000)]
        [InlineData("G5", 104234.343)]
        [InlineData("G5", double.MinValue / 2)]
        [InlineData("G5", Math.PI)]
        [InlineData("G5", Math.E)]
        [InlineData("G5", double.MaxValue)]
        [InlineData("G5", double.MinValue)]
        [InlineData("G5", double.NaN)]
        [InlineData("G5", double.PositiveInfinity)]
        [InlineData("G5", double.NegativeInfinity)]
        [InlineData("G5", 0xFFFFFFFFFFFFF)]
        [InlineData("G5", 0x800FFFFFFFFFFFFF)]
        [InlineData("G5", 0x7FFFFFFFFFFFF)]
        [InlineData("G5", 0x8000000000000000)]
        [InlineData("G5", 0x0000000000000000)]
        [InlineData("G4", 104234.343)]
        [InlineData("G4", double.MinValue / 2)]
        [InlineData("G4", Math.PI)]
        [InlineData("G4", Math.E)]
        [InlineData("G4", double.MaxValue)]
        [InlineData("G4", double.MinValue)]
        [InlineData("G4", double.NaN)]
        [InlineData("G4", double.PositiveInfinity)]
        [InlineData("G4", double.NegativeInfinity)]
        [InlineData("G4", 0xFFFFFFFFFFFFF)]
        [InlineData("G4", 0x800FFFFFFFFFFFFF)]
        [InlineData("G4", 0x7FFFFFFFFFFFF)]
        [InlineData("G4", 0x8000000000000000)]
        [InlineData("G4", 0x0000000000000000)]
        [InlineData("G3", 104234.343)]
        [InlineData("G3", double.MinValue / 2)]
        [InlineData("G3", Math.PI)]
        [InlineData("G3", Math.E)]
        [InlineData("G3", double.MaxValue)]
        [InlineData("G3", double.MinValue)]
        [InlineData("G3", double.NaN)]
        [InlineData("G3", double.PositiveInfinity)]
        [InlineData("G3", double.NegativeInfinity)]
        [InlineData("G3", 0xFFFFFFFFFFFFF)]
        [InlineData("G3", 0x800FFFFFFFFFFFFF)]
        [InlineData("G3", 0x7FFFFFFFFFFFF)]
        [InlineData("G3", 0x8000000000000000)]
        [InlineData("G3", 0x0000000000000000)]
        [InlineData("G2", 104234.343)]
        [InlineData("G2", double.MinValue / 2)]
        [InlineData("G2", Math.PI)]
        [InlineData("G2", Math.E)]
        [InlineData("G2", double.MaxValue)]
        [InlineData("G2", double.MinValue)]
        [InlineData("G2", double.NaN)]
        [InlineData("G2", double.PositiveInfinity)]
        [InlineData("G2", double.NegativeInfinity)]
        [InlineData("G2", 0xFFFFFFFFFFFFF)]
        [InlineData("G2", 0x800FFFFFFFFFFFFF)]
        [InlineData("G2", 0x7FFFFFFFFFFFF)]
        [InlineData("G2", 0x8000000000000000)]
        [InlineData("G2", 0x0000000000000000)]
        [InlineData("G1", 104234.343)]
        [InlineData("G1", double.MinValue / 2)]
        [InlineData("G1", Math.PI)]
        [InlineData("G1", Math.E)]
        [InlineData("G1", double.MaxValue)]
        [InlineData("G1", double.MinValue)]
        [InlineData("G1", double.NaN)]
        [InlineData("G1", double.PositiveInfinity)]
        [InlineData("G1", double.NegativeInfinity)]
        [InlineData("G1", 0xFFFFFFFFFFFFF)]
        [InlineData("G1", 0x800FFFFFFFFFFFFF)]
        [InlineData("G1", 0x7FFFFFFFFFFFF)]
        [InlineData("G1", 0x8000000000000000)]
        [InlineData("G1", 0x0000000000000000)]
        [InlineData("G0", 104234.343)]
        [InlineData("G0", double.MinValue / 2)]
        [InlineData("G0", Math.PI)]
        [InlineData("G0", Math.E)]
        [InlineData("G0", double.MaxValue)]
        [InlineData("G0", double.MinValue)]
        [InlineData("G0", double.NaN)]
        [InlineData("G0", double.PositiveInfinity)]
        [InlineData("G0", double.NegativeInfinity)]
        [InlineData("G0", 0xFFFFFFFFFFFFF)]
        [InlineData("G0", 0x800FFFFFFFFFFFFF)]
        [InlineData("G0", 0x7FFFFFFFFFFFF)]
        [InlineData("G0", 0x8000000000000000)]
        [InlineData("G0", 0x0000000000000000)]
        public void ToStringWithFormat(string format, double number)
        {
            foreach (var iteration in Benchmark.Iterations)
            {
                using (iteration.StartMeasurement())
                {
                    for (int i = 0; i < Benchmark.InnerIterationCount; i++)
                    {
                        number.ToString(format);
                    }
                }
            }
        }

        [Benchmark]
        public static void Decimal_ToString()
        {
            decimal decimalNum = new decimal(dValue);
            foreach (var iteration in Benchmark.Iterations)
                using (iteration.StartMeasurement())
                    decimalNum.ToString();
        }
    }
}
