<Project>
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />

  <PropertyGroup Condition="'$(DotNetBuildFromSource)' == 'true'">
    <AdditionalBuildConfigurations>$(AdditionalBuildConfigurations);package-$(ConfigurationGroup)</AdditionalBuildConfigurations>
  </PropertyGroup>

  <PropertyGroup>
    <BuildAllPackages>false</BuildAllPackages>
  </PropertyGroup>

  <ItemGroup Condition="'$(BuildAllPackages)' == 'true'">
    <Project Include="$(MSBuildThisFileDirectory)..\pkg\*\*.builds" >
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <Project Include="*\pkg\**\*.pkgproj" Condition="'$(BuildAllConfigurations)' == 'true' OR '$(DotNetBuildFromSource)' == 'true'">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
  </ItemGroup>

  <ItemGroup Condition="'$(BuildAllPackages)' == 'false' AND '$(SkipManagedPackageBuild)' != 'true'" >
    <Project Include="$(MSBuildThisFileDirectory)..\pkg\Microsoft.Private.PackageBaseline\Microsoft.Private.PackageBaseline.builds">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <Project Include="$(MSBuildThisFileDirectory)..\pkg\Microsoft.Private.CoreFx.NETCoreApp\Microsoft.Private.CoreFx.NETCoreApp.builds">
      <AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
    </Project>
    <!-- add specific builds / pkgproj's here to include in servicing builds -->
  </ItemGroup>

  <ItemGroup>
    <BuildingPackageProjects Include="@(Project->'%(FileName)')" />
  </ItemGroup>

  <UsingTask TaskName="UpdatePackageIndex" AssemblyFile="$(PackagingTaskDir)Microsoft.DotNet.Build.Tasks.Packaging.dll"/>

  <!--
    Updates the package index to mark all packages we are building that can go stable as stable.
    this will allow for a kicked off build to control package stability at queue time. This does edit
    the package index in-place but that shouldn't cause any problems for official builds are the only
    ones that might do this. After we ship a stable set of packages this target should be ran and the
    changes to the package index should be commited to the repo.
  -->
  <Target Name="UpdatePackageIndexWithStableVersions"
          BeforeTargets="BuildAllProjects"
          Condition="'$(DotNetFinalVersionKind)' == 'release'">
    <ItemGroup>
      <!--
      The private packages don't get stabilized so they don't need to be included
      in the set of packages that we are gathering stable versions from.
      -->
      <PkgProjects Include="$(MSBuildThisFileDirectory)..\pkg\*\*.pkgproj" Exclude="$(MSBuildThisFileDirectory)..\pkg\*Private*\*.pkgproj" />
      <PkgProjects Include="*\pkg\**\*.pkgproj" />

    </ItemGroup>

    <ItemGroup>
      <PkgProjectsToFileName Include="@(PkgProjects->'%(FileName)')" >
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </PkgProjectsToFileName>
      <BuildingPkgProjectsFileNames Include="@(PkgProjectsToFileName)" Condition="'@(PkgProjectsToFileName)' == '@(BuildingPackageProjects)' and '%(Identity)' != ''" />
      <BuildingPkgProjectsIdentities Include="@(BuildingPkgProjectsFileNames->'%(OriginalIdentity)')" />
    </ItemGroup>

    <MSBuild Targets="GetPackageIdentityWithoutPrerelease"
             BuildInParallel="$(BuildInParallel)"
             Projects="@(BuildingPkgProjectsIdentities)"
             RemoveProperties="Configuration">
      <Output TaskParameter="TargetOutputs"
              ItemName="_StablePackages" />
    </MSBuild>

    <Message Text="Marking package '%(_StablePackages.Identity)' stable with version '%(_StablePackages.Version)'" />

    <UpdatePackageIndex
      PackageIndexFile="$(PackageIndexFile)"
      StablePackages="@(_StablePackages)"
      Condition="'%(_StablePackages.BlockStable)' != 'true'" />

  </Target>

  <!-- Generate a version text file we include in our packages -->
  <Target Name="GenerateVersionFileForPackages"
          BeforeTargets="BuildAllProjects"
          DependsOnTargets="InitializeSourceControlInformationFromSourceControlManager">

    <Error Condition="'$(SourceRevisionId)' == ''" Text="SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs." />

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(VersionFileForPackages)))" />

    <WriteLinesToFile
      File="$(VersionFileForPackages)"
      Lines="$(SourceRevisionId)"
      Overwrite="true" />
  </Target>

  <Import Project="$(RepositoryEngineeringDir)dir.traversal.targets" />
</Project>
