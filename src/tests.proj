<Project InitialTargets="IncludeProjectReferences">
  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" />

  <PropertyGroup>
    <EnableFullCoverageReportTarget>true</EnableFullCoverageReportTarget>
    <GenerateFullCoverageReport>true</GenerateFullCoverageReport>
    <CoverageReportInputPath>$(ArtifactsBinDir)*.Tests/**/coverage.xml</CoverageReportInputPath>
    <CoverageReportDir>$(ArtifactsDir)coverage</CoverageReportDir>
    <SerializeProjects Condition="'$(Coverage)' == 'true'">true</SerializeProjects>
  </PropertyGroup>

  <ItemGroup Condition="'$(BuildAllConfigurations)' != 'true'">
    <!-- We currently only test with C# projects. -->
    <Project Condition="'$(DirectoryToBuild)' == ''" Include="$(MSBuildThisFileDirectory)*\tests\**\*.Tests.csproj" Exclude="@(ProjectExclusions)" />
    <Project Condition="'$(DirectoryToBuild)' != ''" Include="$(DirectoryToBuild)\**\*.Tests.csproj" />
  </ItemGroup>

  <ItemGroup Condition="'$(BuildAllConfigurations)' == 'true'">
    <Project Include="$(RepoRoot)pkg\test\testPackages.proj" />
  </ItemGroup>

  <Target Name="IncludeProjectReferences" DependsOnTargets="FilterProjects">
    <ItemGroup>
      <ProjectReference Include="@(Project)" />
    </ItemGroup>
  </Target>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />
  
  <Target Name="Build" DependsOnTargets="BuildAllProjects" />
  <Target Name="BuildAllProjects" DependsOnTargets="$(TraversalBuildDependsOn);FilterProjects">
    <MSBuild Targets="Build"
             Projects="@(Project)"
             Properties="BuildAllProjects=true;BuildConfiguration=$(BuildConfiguration);%(Project.AdditionalProperties)"
             BuildInParallel="true"
             ContinueOnError="ErrorAndStop" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="Test" DependsOnTargets="TestAllProjects" />
  <Target Name="TestAllProjects" DependsOnTargets="FilterProjects">
    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="Test"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)' == 'true' AND '%(Identity)' != ''"
             Properties="TestAllProjects=true;BuildConfiguration=$(BuildConfiguration)"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="Test"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)' != 'true'"
             Properties="TestAllProjects=true;BuildConfiguration=$(BuildConfiguration)"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

</Project>
