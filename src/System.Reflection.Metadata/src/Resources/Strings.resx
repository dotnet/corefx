<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ImageTooSmall" xml:space="preserve">
    <value>Image is too small.</value>
  </data>
  <data name="InvalidCorHeaderSize" xml:space="preserve">
    <value>Invalid COR header size.</value>
  </data>
  <data name="InvalidHandle" xml:space="preserve">
    <value>Invalid handle.</value>
  </data>
  <data name="InvalidLocalSignatureToken" xml:space="preserve">
    <value>Invalid local signature token: 0x{0:X8}</value>
  </data>
  <data name="InvalidMetadataSectionSpan" xml:space="preserve">
    <value>Invalid metadata section span.</value>
  </data>
  <data name="InvalidMethodHeader1" xml:space="preserve">
    <value>Invalid method header: 0x{0:X2}</value>
  </data>
  <data name="InvalidMethodHeader2" xml:space="preserve">
    <value>Invalid method header: 0x{0:X2} 0x{1:X2}</value>
  </data>
  <data name="InvalidPESignature" xml:space="preserve">
    <value>Invalid PE signature.</value>
  </data>
  <data name="InvalidSehHeader" xml:space="preserve">
    <value>Invalid SEH header: 0x{0:X2}</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>Invalid token.</value>
  </data>
  <data name="MetadataImageDoesNotRepresentAnAssembly" xml:space="preserve">
    <value>Metadata image doesn't represent an assembly.</value>
  </data>
  <data name="StandaloneDebugMetadataImageDoesNotContainModuleTable" xml:space="preserve">
    <value>Standalone debug metadata image doesn't contain Module table.</value>
  </data>
  <data name="PEImageNotAvailable" xml:space="preserve">
    <value>PE image not available.</value>
  </data>
  <data name="MissingDataDirectory" xml:space="preserve">
    <value>Missing data directory.</value>
  </data>
  <data name="NotMetadataHeapHandle" xml:space="preserve">
    <value>Specified handle is not a valid metadata heap handle.</value>
  </data>
  <data name="NotMetadataTableOrUserStringHandle" xml:space="preserve">
    <value>Specified handle is not a valid metadata table or UserString heap handle.</value>
  </data>
  <data name="SectionTooSmall" xml:space="preserve">
    <value>Section too small.</value>
  </data>
  <data name="StreamMustSupportReadAndSeek" xml:space="preserve">
    <value>Stream must support read and seek operations.</value>
  </data>
  <data name="UnknownFileFormat" xml:space="preserve">
    <value>Unknown file format.</value>
  </data>
  <data name="UnknownPEMagicValue" xml:space="preserve">
    <value>Unknown PE Magic value.</value>
  </data>
  <data name="MetadataTableNotSorted" xml:space="preserve">
    <value>Metadata table 0x{0:x2} not sorted.</value>
  </data>
  <data name="AssemblyTableInvalidNumberOfRows" xml:space="preserve">
    <value>Invalid number of rows of Assembly table: {0}.</value>
  </data>
  <data name="ModuleTableInvalidNumberOfRows" xml:space="preserve">
    <value>Invalid number of rows of Module table: {0}.</value>
  </data>
  <data name="UnknownTables" xml:space="preserve">
    <value>Unknown tables: 0x{0:x16}.</value>
  </data>
  <data name="IllegalTablesInCompressedMetadataStream" xml:space="preserve">
    <value>Illegal tables in compressed metadata stream.</value>
  </data>
  <data name="TableRowCountSpaceTooSmall" xml:space="preserve">
    <value>Table row count space to small.</value>
  </data>
  <data name="OutOfBoundsRead" xml:space="preserve">
    <value>Read out of bounds.</value>
  </data>
  <data name="MetadataHeaderTooSmall" xml:space="preserve">
    <value>Metadata header too small.</value>
  </data>
  <data name="MetadataSignature" xml:space="preserve">
    <value>Invalid COR20 header signature.</value>
  </data>
  <data name="NotEnoughSpaceForVersionString" xml:space="preserve">
    <value>Not enough space for version string.</value>
  </data>
  <data name="StreamHeaderTooSmall" xml:space="preserve">
    <value>Stream header too small.</value>
  </data>
  <data name="NotEnoughSpaceForStreamHeaderName" xml:space="preserve">
    <value>Not enough space for stream header name.</value>
  </data>
  <data name="NotEnoughSpaceForStringStream" xml:space="preserve">
    <value>Not enough space for String stream.</value>
  </data>
  <data name="NotEnoughSpaceForBlobStream" xml:space="preserve">
    <value>Not enough space for Blob stream.</value>
  </data>
  <data name="NotEnoughSpaceForGUIDStream" xml:space="preserve">
    <value>Not enough space for GUID stream.</value>
  </data>
  <data name="NotEnoughSpaceForMetadataStream" xml:space="preserve">
    <value>Not enough space for Metadata stream.</value>
  </data>
  <data name="InvalidMetadataStreamFormat" xml:space="preserve">
    <value>Invalid Metadata stream format.</value>
  </data>
  <data name="MetadataTablesTooSmall" xml:space="preserve">
    <value>Metadata tables too small.</value>
  </data>
  <data name="MetadataTableHeaderTooSmall" xml:space="preserve">
    <value>Metadata table header too small.</value>
  </data>
  <data name="WinMDMissingMscorlibRef" xml:space="preserve">
    <value>Missing mscorlib reference in AssemblyRef table.</value>
  </data>
  <data name="UnableToReadMetadataFile" xml:space="preserve">
    <value>Unable to read metadata file.</value>
  </data>
  <data name="UnexpectedStreamEnd" xml:space="preserve">
    <value>Unexpected stream end.</value>
  </data>
  <data name="InvalidMethodRva" xml:space="preserve">
    <value>Invalid relative virtual address (RVA): 0x{0:X8}</value>
  </data>
  <data name="CantGetOffsetForVirtualHeapHandle" xml:space="preserve">
    <value>Can't get a heap offset for a virtual heap handle</value>
  </data>
  <data name="InvalidSectionName" xml:space="preserve">
    <value>Invalid section name</value>
  </data>
  <data name="InvalidNumberOfSections" xml:space="preserve">
    <value>Invalid number of sections in declared in PE header.</value>
  </data>
  <data name="InvalidSignature" xml:space="preserve">
    <value>Invalid signature.</value>
  </data>
  <data name="PEImageDoesNotHaveMetadata" xml:space="preserve">
    <value>PE image does not have metadata.</value>
  </data>
  <data name="InvalidCodedIndex" xml:space="preserve">
    <value>Invalid coded index.</value>
  </data>
  <data name="InvalidCompressedInteger" xml:space="preserve">
    <value>Invalid compressed integer.</value>
  </data>
  <data name="InvalidDocumentName" xml:space="preserve">
    <value>Invalid document name.</value>
  </data>
  <data name="RowIdOrHeapOffsetTooLarge" xml:space="preserve">
    <value>Row ID or heap offset is too large.</value>
  </data>
  <data name="EnCMapNotSorted" xml:space="preserve">
    <value>EnCMap table not sorted or has missing records.</value>
  </data>
  <data name="InvalidSerializedString" xml:space="preserve">
    <value>Invalid serialized string.</value>
  </data>
  <data name="StreamTooLarge" xml:space="preserve">
    <value>Stream length minus starting position is too large to hold a PEImage.</value>
  </data>
  <data name="NegativeByteCountOrOffset" xml:space="preserve">
    <value>Negative byte count or offset.</value>
  </data>
  <data name="ImageTooSmallOrContainsInvalidOffsetOrCount" xml:space="preserve">
    <value>Image is either too small or contains an invalid byte offset or count.</value>
  </data>
  <data name="LitteEndianArchitectureRequired" xml:space="preserve">
    <value>Little-endian architecture required.</value>
  </data>
  <data name="MetadataStringDecoderEncodingMustBeUtf8" xml:space="preserve">
    <value>The MetadataStringDecoder instance used to instantiate the Metadata reader must have a UTF8 encoding.</value>
  </data>
  <data name="InvalidConstantValue" xml:space="preserve">
    <value>Invalid constant value.</value>
  </data>
  <data name="InvalidImportDefinitionKind" xml:space="preserve">
    <value>Invalid import definition kind: {0}.</value>
  </data>
  <data name="ValueTooLarge" xml:space="preserve">
    <value>Value is too large.</value>
  </data>
  <data name="InvalidTypeSize" xml:space="preserve">
    <value>Invalid type size.</value>
  </data>
  <data name="HandleBelongsToFutureGeneration" xml:space="preserve">
    <value>Handle belongs to a future generation</value>
  </data>
  <data name="InvalidRowCount" xml:space="preserve">
    <value>Invalid row count: {0}</value>
  </data>
  <data name="InvalidEntryPointToken" xml:space="preserve">
    <value>Invalid entry point token: 0x{0:8X}</value>
  </data>
  <data name="TooManySubnamespaces" xml:space="preserve">
    <value>There are too many subnamespaces.</value>
  </data>
  <data name="SequencePointValueOutOfRange" xml:space="preserve">
    <value>Sequence point value is out of range.</value>
  </data>
  <data name="InvalidDirectoryRVA" xml:space="preserve">
    <value>Invalid directory relative virtual address.</value>
  </data>
  <data name="InvalidDirectorySize" xml:space="preserve">
    <value>Invalid directory size.</value>
  </data>
  <data name="InvalidDebugDirectoryEntryCharacteristics" xml:space="preserve">
    <value>The value of field Characteristics in debug directory entry must be zero.</value>
  </data>
  <data name="UnexpectedCodeViewDataSignature" xml:space="preserve">
    <value>Unexpected CodeView data signature value.</value>
  </data>
  <data name="InvalidPathPadding" xml:space="preserve">
    <value>The path must be padded with NUL characters.</value>
  </data>
  <data name="UnexpectedSignatureHeader" xml:space="preserve">
    <value>Expected signature header for '{0}', but found '{1}' (0x{2:x2}).</value>
  </data>
  <data name="UnexpectedSignatureHeader2" xml:space="preserve">
    <value>Expected signature header for '{0}' or '{1}', but found '{2}' (0x{3:x2}).</value>
  </data>
  <data name="NotTypeDefOrRefHandle" xml:space="preserve">
    <value>Specified handle is not a TypeDefinitionHandle or TypeRefererenceHandle.</value>
  </data>
  <data name="UnexpectedSignatureTypeCode" xml:space="preserve">
    <value>Unexpected SignatureTypeCode: (0x{0:x}).</value>
  </data>
  <data name="SignatureTypeSequenceMustHaveAtLeastOneElement" xml:space="preserve">
    <value>Signature type sequence must have at least one element.</value>
  </data>
  <data name="NotTypeDefOrRefOrSpecHandle" xml:space="preserve">
    <value>Specified handle is not a TypeDefinitionHandle, TypeRefererenceHandle, or TypeSpecificationHandle.</value>
  </data>
  <data name="NotCodeViewEntry" xml:space="preserve">
    <value>The Debug directory was not of type CodeView.</value>
  </data>
</root>
