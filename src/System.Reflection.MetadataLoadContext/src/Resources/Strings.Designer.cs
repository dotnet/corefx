//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Reflection.MetadataLoadContext.Resources {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Reflection.MetadataLoadContext.Resources.Strings", typeof(Strings).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous match found..
        /// </summary>
        internal static string Arg_AmbiguousMatchException {
            get {
                return ResourceManager.GetString("Arg_AmbiguousMatchException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array may not be empty..
        /// </summary>
        internal static string Arg_EmptyArray {
            get {
                return ResourceManager.GetString("Arg_EmptyArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Literal value was not found..
        /// </summary>
        internal static string Arg_EnumLitValueNotFound {
            get {
                return ResourceManager.GetString("Arg_EnumLitValueNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hashtable&apos;s capacity overflowed and went negative. Check load factor, capacity and the current size of the table..
        /// </summary>
        internal static string Arg_HTCapacityOverflow {
            get {
                return ResourceManager.GetString("Arg_HTCapacityOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type provided must be an Enum..
        /// </summary>
        internal static string Arg_MustBeEnum {
            get {
                return ResourceManager.GetString("Arg_MustBeEnum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type must be a type provided by the MetadataLoadContext..
        /// </summary>
        internal static string Arg_MustBeType {
            get {
                return ResourceManager.GetString("Arg_MustBeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a GenericMethodDefinition. MakeGenericMethod may only be called on a method for which MethodBase.IsGenericMethodDefinition is true..
        /// </summary>
        internal static string Arg_NotGenericMethodDefinition {
            get {
                return ResourceManager.GetString("Arg_NotGenericMethodDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method may only be called on a Type for which Type.IsGenericParameter is true..
        /// </summary>
        internal static string Arg_NotGenericParameter {
            get {
                return ResourceManager.GetString("Arg_NotGenericParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a GenericTypeDefinition. MakeGenericType may only be called on a type for which Type.IsGenericTypeDefinition is true..
        /// </summary>
        internal static string Arg_NotGenericTypeDefinition {
            get {
                return ResourceManager.GetString("Arg_NotGenericTypeDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is invalid on objects loaded by a MetadataLoadContext. Use CustomAttributeData instead..
        /// </summary>
        internal static string Arg_ReflectionOnlyCA {
            get {
                return ResourceManager.GetString("Arg_ReflectionOnlyCA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is invalid on objects loaded by a MetadataLoadContext..
        /// </summary>
        internal static string Arg_ReflectionOnlyIllegal {
            get {
                return ResourceManager.GetString("Arg_ReflectionOnlyIllegal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is illegal to invoke a method on a Type loaded by a MetadataLoadContext..
        /// </summary>
        internal static string Arg_ReflectionOnlyInvoke {
            get {
                return ResourceManager.GetString("Arg_ReflectionOnlyInvoke", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is illegal to request the default value on a ParameterInfo loaded by a MetadataLoadContext. Use RawDefaultValue instead..
        /// </summary>
        internal static string Arg_ReflectionOnlyParameterDefaultValue {
            get {
                return ResourceManager.GetString("Arg_ReflectionOnlyParameterDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of generic arguments provided does not match the number of generic parameters..
        /// </summary>
        internal static string Argument_GenericArgsCount {
            get {
                return ResourceManager.GetString("Argument_GenericArgsCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be an array type..
        /// </summary>
        internal static string Argument_HasToBeArrayClass {
            get {
                return ResourceManager.GetString("Argument_HasToBeArrayClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Enum type should contain one and only one instance field..
        /// </summary>
        internal static string Argument_InvalidEnum {
            get {
                return ResourceManager.GetString("Argument_InvalidEnum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly &apos;{0}&apos; contains a type reference 0x{1} that contains an invalid scope token..
        /// </summary>
        internal static string BadImageFormat_TypeRefBadScopeType {
            get {
                return ResourceManager.GetString("BadImageFormat_TypeRefBadScopeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly &apos;{0}&apos; contains a type reference 0x{1} that references a module not in the manifest..
        /// </summary>
        internal static string BadImageFormat_TypeRefModuleNotInManifest {
            get {
                return ResourceManager.GetString("BadImageFormat_TypeRefModuleNotInManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find core type &apos;{0}&apos;.
        /// </summary>
        internal static string CoreTypeNotFound {
            get {
                return ResourceManager.GetString("CoreTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An assembly that was not created by this MetadataLoadContext object was returned from its Resolving event handler..
        /// </summary>
        internal static string ExternalAssemblyReturnedByResolveHandler {
            get {
                return ResourceManager.GetString("ExternalAssemblyReturnedByResolveHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly &apos;{0}&apos; has already loaded been loaded into this MetadataLoadContext..
        /// </summary>
        internal static string FileLoadDuplicateAssemblies {
            get {
                return ResourceManager.GetString("FileLoadDuplicateAssemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find assembly &apos;{0}&apos;. Either explicitly load this assembly using a method such as LoadFromAssemblyPath() or subscribe to the Resolving event with a handler that returns a valid assembly..
        /// </summary>
        internal static string FileNotFoundAssembly {
            get {
                return ResourceManager.GetString("FileNotFoundAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the module file for &apos;{0}&apos;.
        /// </summary>
        internal static string FileNotFoundModule {
            get {
                return ResourceManager.GetString("FileNotFoundModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A type specification contained an out of range index for a generic method parameter: {0}.
        /// </summary>
        internal static string GenericMethodParamIndexOutOfRange {
            get {
                return ResourceManager.GetString("GenericMethodParamIndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A type specification contained an out of range index for a generic type parameter: {0}.
        /// </summary>
        internal static string GenericTypeParamIndexOutOfRange {
            get {
                return ResourceManager.GetString("GenericTypeParamIndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property is not supported on assemblies loaded by a MetadataLoadContext as there is no trust level to evaluate these against..
        /// </summary>
        internal static string InvalidOperation_IsSecurity {
            get {
                return ResourceManager.GetString("InvalidOperation_IsSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is only valid on generic types..
        /// </summary>
        internal static string InvalidOperation_NotGenericType {
            get {
                return ResourceManager.GetString("InvalidOperation_NotGenericType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type {0} was not loaded by the MetadataLoadContext that loaded the generic type or method..
        /// </summary>
        internal static string MakeGenericType_NotLoadedByMetadataLoadContext {
            get {
                return ResourceManager.GetString("MakeGenericType_NotLoadedByMetadataLoadContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A manifest resource entry specified a filename that does not appear in the assembly manifest: &apos;{0}&apos;.
        /// </summary>
        internal static string ManifestResourceInfoReferencedBadModule {
            get {
                return ResourceManager.GetString("ManifestResourceInfoReferencedBadModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This object is no longer valid because the MetadataLoadContext that created it has been disposed..
        /// </summary>
        internal static string MetadataLoadContextDisposed {
            get {
                return ResourceManager.GetString("MetadataLoadContextDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constructor invoked by a custom attribute cannot be found on type {0}.
        /// </summary>
        internal static string MissingCustomAttributeConstructor {
            get {
                return ResourceManager.GetString("MissingCustomAttributeConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ModuleResolve handlers may only return Modules loaded by the MetadataLoadContext that loaded the parent assembly..
        /// </summary>
        internal static string ModuleResolveEventReturnedExternalModule {
            get {
                return ResourceManager.GetString("ModuleResolveEventReturnedExternalModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation could not be completed because this MetadataLoadContext&apos;s CoreAssemblyName property was not set to a valid assembly name..
        /// </summary>
        internal static string NoCoreAssemblyDefined {
            get {
                return ResourceManager.GetString("NoCoreAssemblyDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types loaded by a MetadataLoadContext cannot pass any of these BindingFlags: InvokeMethod, CreateInstance, GetProperty, SetProperty.
        /// </summary>
        internal static string NoInvokeMember {
            get {
                return ResourceManager.GetString("NoInvokeMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This PE image is not a managed executable..
        /// </summary>
        internal static string NoMetadataInPeImage {
            get {
                return ResourceManager.GetString("NoMetadataInPeImage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ExceptionHandlingClause is not a clause..
        /// </summary>
        internal static string NotAClause {
            get {
                return ResourceManager.GetString("NotAClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ExceptionHandlingClause is not a filter..
        /// </summary>
        internal static string NotAFilter {
            get {
                return ResourceManager.GetString("NotAFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CodeBase property is not supported on assemblies loaded by a MetadataLoadContext. Use Assembly.Location to find the origin of an Assembly..
        /// </summary>
        internal static string NotSupported_AssemblyCodeBase {
            get {
                return ResourceManager.GetString("NotSupported_AssemblyCodeBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Passing true for ignoreCase is not supported on assemblies loaded by a MetadataLoadContext..
        /// </summary>
        internal static string NotSupported_CaseInsensitive {
            get {
                return ResourceManager.GetString("NotSupported_CaseInsensitive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parsing function pointer types in signatures is not supported..
        /// </summary>
        internal static string NotSupported_FunctionPointers {
            get {
                return ResourceManager.GetString("NotSupported_FunctionPointers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetBaseDefinition() is not supported on assemblies loaded by a MetadataLoadContext..
        /// </summary>
        internal static string NotSupported_GetBaseDefinition {
            get {
                return ResourceManager.GetString("NotSupported_GetBaseDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InterfaceMapping is not supported on assemblies loaded by a MetadataLoadContext..
        /// </summary>
        internal static string NotSupported_InterfaceMapping {
            get {
                return ResourceManager.GetString("NotSupported_InterfaceMapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Passing signature types to this implementation of MakeGenericType() is not supported..
        /// </summary>
        internal static string NotSupported_MakeGenericType_SignatureTypes {
            get {
                return ResourceManager.GetString("NotSupported_MakeGenericType_SignatureTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MDStreamVersion is not supported on assemblies loaded by a MetadataLoadContext..
        /// </summary>
        internal static string NotSupported_MDStreamVersion {
            get {
                return ResourceManager.GetString("NotSupported_MDStreamVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolving tokens is not supported on assemblies loaded by a MetadataLoadContext..
        /// </summary>
        internal static string NotSupported_ResolvingTokens {
            get {
                return ResourceManager.GetString("NotSupported_ResolvingTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is illegal to perform this operation on a Module that returns true for IsResource().
        /// </summary>
        internal static string ResourceOnlyModule {
            get {
                return ResourceManager.GetString("ResourceOnlyModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The module or file name &apos;{0}&apos; is not specified in the assembly&apos;s manifest..
        /// </summary>
        internal static string SpecifiedFileNameInvalid {
            get {
                return ResourceManager.GetString("SpecifiedFileNameInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Satellite assemblies are not supported on assemblies loaded by a MetadataLoadContext..
        /// </summary>
        internal static string String1NotSupported_SatelliteAssembly {
            get {
                return ResourceManager.GetString("String1NotSupported_SatelliteAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This MetadataLoadContext has already loaded the core Assembly using a previously supplied name..
        /// </summary>
        internal static string TooLateToSetCoreAssemblyName {
            get {
                return ResourceManager.GetString("TooLateToSetCoreAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find type &apos;{0}&apos; in assembly &apos;{1}&apos;.
        /// </summary>
        internal static string TypeNotFound {
            get {
                return ResourceManager.GetString("TypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum {0} has invalid underlying type: {1}.
        /// </summary>
        internal static string UnexpectedUnderlyingEnumType {
            get {
                return ResourceManager.GetString("UnexpectedUnderlyingEnumType", resourceCulture);
            }
        }
    }
}
