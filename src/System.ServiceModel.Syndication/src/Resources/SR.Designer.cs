//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.ServiceModel.Syndication.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.ServiceModel.Syndication.Resources.SR", typeof(SR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A binding instance has already been associated to listen URI &apos;{0}&apos;. If two endpoints want to share the same ListenUri, they must also share the same binding object instance. The two conflicting endpoints were either specified in AddServiceEndpoint() calls, in a config file, or a combination of AddServiceEndpoint() and config. .
        /// </summary>
        internal static string ABindingInstanceHasAlreadyBeenAssociatedTo1 {
            get {
                return ResourceManager.GetString("ABindingInstanceHasAlreadyBeenAssociatedTo1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation to establish the WebSocket connection timed out. To increase this time limit, use the OpenTimeout property on the service endpoint&apos;s binding..
        /// </summary>
        internal static string AcceptWebSocketTimedOutError {
            get {
                return ResourceManager.GetString("AcceptWebSocketTimedOutError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not perform an AccessCheck (error=0x{0:X})..
        /// </summary>
        internal static string AccessCheckFailed {
            get {
                return ResourceManager.GetString("AccessCheckFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied..
        /// </summary>
        internal static string AccessDenied {
            get {
                return ResourceManager.GetString("AccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service Endpoint is null..
        /// </summary>
        internal static string AChannelServiceEndpointIsNull0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Binding is null..
        /// </summary>
        internal static string AChannelServiceEndpointSBindingIsNull0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSBindingIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Contract is null..
        /// </summary>
        internal static string AChannelServiceEndpointSContractIsNull0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSContractIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Contract&apos;s name is null or empty..
        /// </summary>
        internal static string AChannelServiceEndpointSContractSNameIsNull0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSContractSNameIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Channel/Service endpoint&apos;s Contract&apos;s namespace is null..
        /// </summary>
        internal static string AChannelServiceEndpointSContractSNamespace0 {
            get {
                return ResourceManager.GetString("AChannelServiceEndpointSContractSNamespace0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint requested an address for acknowledgements that is not the same as the address for application messages. The channel could not be opened because this is not supported. Ensure the endpoint address used to create the channel is identical to the one the remote endpoint was set up with..
        /// </summary>
        internal static string AcksToMustBeSameAsRemoteAddress {
            get {
                return ResourceManager.GetString("AcksToMustBeSameAsRemoteAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address for acknowledgements must be the same as the address for application messages. Verify that your endpoint is configured to use the same URI for these two addresses..
        /// </summary>
        internal static string AcksToMustBeSameAsRemoteAddressReason {
            get {
                return ResourceManager.GetString("AcksToMustBeSameAsRemoteAddressReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The set of actions cannot be empty..
        /// </summary>
        internal static string ActionFilterEmptyList {
            get {
                return ResourceManager.GetString("ActionFilterEmptyList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executing user callback..
        /// </summary>
        internal static string ActivityCallback {
            get {
                return ResourceManager.GetString("ActivityCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityClose {
            get {
                return ResourceManager.GetString("ActivityClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close ChannelFactory. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityCloseChannelFactory {
            get {
                return ResourceManager.GetString("ActivityCloseChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close ClientBase. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityCloseClientBase {
            get {
                return ResourceManager.GetString("ActivityCloseClientBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close ServiceHost &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityCloseServiceHost {
            get {
                return ResourceManager.GetString("ActivityCloseServiceHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Construct ChannelFactory. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityConstructChannelFactory {
            get {
                return ResourceManager.GetString("ActivityConstructChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Construct ServiceHost &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityConstructServiceHost {
            get {
                return ResourceManager.GetString("ActivityConstructServiceHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute Async: Begin: &apos;{0}.{1}&apos;; End: &apos;{2}.{3}&apos;..
        /// </summary>
        internal static string ActivityExecuteAsyncMethod {
            get {
                return ResourceManager.GetString("ActivityExecuteAsyncMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute &apos;{0}.{1}&apos;..
        /// </summary>
        internal static string ActivityExecuteMethod {
            get {
                return ResourceManager.GetString("ActivityExecuteMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Listen at &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityListenAt {
            get {
                return ResourceManager.GetString("ActivityListenAt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityOpen {
            get {
                return ResourceManager.GetString("ActivityOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open ChannelFactory. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityOpenChannelFactory {
            get {
                return ResourceManager.GetString("ActivityOpenChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open ClientBase. Contract type: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityOpenClientBase {
            get {
                return ResourceManager.GetString("ActivityOpenClientBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open ServiceHost &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityOpenServiceHost {
            get {
                return ResourceManager.GetString("ActivityOpenServiceHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process action &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityProcessAction {
            get {
                return ResourceManager.GetString("ActivityProcessAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing message {0}..
        /// </summary>
        internal static string ActivityProcessingMessage {
            get {
                return ResourceManager.GetString("ActivityProcessingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading data from connection on &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityReadOnConnection {
            get {
                return ResourceManager.GetString("ActivityReadOnConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receiving data at via &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityReceiveAtVia {
            get {
                return ResourceManager.GetString("ActivityReceiveAtVia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive bytes on connection &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityReceiveBytes {
            get {
                return ResourceManager.GetString("ActivityReceiveBytes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close Security Session..
        /// </summary>
        internal static string ActivitySecurityClose {
            get {
                return ResourceManager.GetString("ActivitySecurityClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Renew Secure Session..
        /// </summary>
        internal static string ActivitySecurityRenew {
            get {
                return ResourceManager.GetString("ActivitySecurityRenew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set up Secure Session..
        /// </summary>
        internal static string ActivitySecuritySetup {
            get {
                return ResourceManager.GetString("ActivitySecuritySetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shared listener connection: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivitySharedListenerConnection {
            get {
                return ResourceManager.GetString("ActivitySharedListenerConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Socket connection: &apos;{0}&apos;..
        /// </summary>
        internal static string ActivitySocketConnection {
            get {
                return ResourceManager.GetString("ActivitySocketConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing10 ({0}).
        /// </summary>
        internal static string Addressing10ToStringFormat {
            get {
                return ResourceManager.GetString("Addressing10ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing200408 ({0}).
        /// </summary>
        internal static string Addressing200408ToStringFormat {
            get {
                return ResourceManager.GetString("Addressing200408ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element &apos;{0}&apos; in namespace &apos;{1}&apos; is not valid. This either means that element &apos;{0}&apos; is a duplicate element, or that it is not a legal extension because extension elements cannot be in the addressing namespace..
        /// </summary>
        internal static string AddressingExtensionInBadNS {
            get {
                return ResourceManager.GetString("AddressingExtensionInBadNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing Version &apos;{0}&apos; does not support adding WS-Addressing headers..
        /// </summary>
        internal static string AddressingHeadersCannotBeAddedToAddressingVersion {
            get {
                return ResourceManager.GetString("AddressingHeadersCannotBeAddedToAddressingVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AddressingNone ({0}).
        /// </summary>
        internal static string AddressingNoneToStringFormat {
            get {
                return ResourceManager.GetString("AddressingNoneToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addressing Version &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string AddressingVersionNotSupported {
            get {
                return ResourceManager.GetString("AddressingVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required address keyword was not specified..
        /// </summary>
        internal static string AddressNotSpecified {
            get {
                return ResourceManager.GetString("AddressNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MTAWorkerThread exception.
        /// </summary>
        internal static string AdminMTAWorkerThreadException {
            get {
                return ResourceManager.GetString("AdminMTAWorkerThreadException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple link-local only interfaces detected.  Please specifiy the interface you require by using the ListenIpAddress attribute in the PeerTransportBindingElement.
        /// </summary>
        internal static string AmbiguousConnectivitySpec {
            get {
                return ResourceManager.GetString("AmbiguousConnectivitySpec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service does not allow you to log on anonymously..
        /// </summary>
        internal static string AnonymousLogonsAreNotAllowed {
            get {
                return ResourceManager.GetString("AnonymousLogonsAreNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured application was not found. (The Application ID was {0}.).
        /// </summary>
        internal static string ApplicationNotFound {
            get {
                return ResourceManager.GetString("ApplicationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value must be &gt;= {0} and &lt;= {1}..
        /// </summary>
        internal static string ArgumentOutOfRange {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string asd {
            get {
                return ResourceManager.GetString("asd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}:{1} assertion is not supported..
        /// </summary>
        internal static string AssertionNotSupported {
            get {
                return ResourceManager.GetString("AssertionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsymmetricSecurityBindingElement cannot build a channel or listener factory. The InitiatorTokenParameters property is required but not set. Binding element configuration: {0}.
        /// </summary>
        internal static string AsymmetricSecurityBindingElementNeedsInitiatorTokenParameters {
            get {
                return ResourceManager.GetString("AsymmetricSecurityBindingElementNeedsInitiatorTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsymmetricSecurityBindingElement cannot build a channel or listener factory. The RecipientTokenParameters property is required but not set. Binding element configuration: {0}.
        /// </summary>
        internal static string AsymmetricSecurityBindingElementNeedsRecipientTokenParameters {
            get {
                return ResourceManager.GetString("AsymmetricSecurityBindingElementNeedsRecipientTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An AsyncCallback threw an exception..
        /// </summary>
        internal static string AsyncCallbackException {
            get {
                return ResourceManager.GetString("AsyncCallbackException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async End called on wrong channel..
        /// </summary>
        internal static string AsyncEndCalledOnWrongChannel {
            get {
                return ResourceManager.GetString("AsyncEndCalledOnWrongChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async End called with an IAsyncResult from a different Begin method..
        /// </summary>
        internal static string AsyncEndCalledWithAnIAsyncResult {
            get {
                return ResourceManager.GetString("AsyncEndCalledWithAnIAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message must be protected. This is required by an operation of the contract (&apos;{0}&apos;,&apos;{1}&apos;). The protection must be provided by the binding (&apos;{2}&apos;,&apos;{3}&apos;)..
        /// </summary>
        internal static string AtLeastOneContractOperationRequestRequiresProtectionLevelNotSupportedByBinding {
            get {
                return ResourceManager.GetString("AtLeastOneContractOperationRequestRequiresProtectionLevelNotSupportedByBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response message must be protected. This is required by an operation of the contract (&apos;{0}&apos;, &apos;{1}&apos;). The protection must be provided by the binding (&apos;{2}&apos;, &apos;{3}&apos;)..
        /// </summary>
        internal static string AtLeastOneContractOperationResponseRequiresProtectionLevelNotSupportedByBinding {
            get {
                return ResourceManager.GetString("AtLeastOneContractOperationResponseRequiresProtectionLevelNotSupportedByBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one fault reason must be specified..
        /// </summary>
        internal static string AtLeastOneFaultReasonMustBeSpecified {
            get {
                return ResourceManager.GetString("AtLeastOneFaultReasonMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one primary signature is allowed in a security header..
        /// </summary>
        internal static string AtMostOnePrimarySignatureInReceiveSecurityHeader {
            get {
                return ResourceManager.GetString("AtMostOnePrimarySignatureInReceiveSecurityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At most one reference list is supported with default policy check..
        /// </summary>
        internal static string AtMostOneReferenceListIsSupportedWithDefaultPolicyCheck {
            get {
                return ResourceManager.GetString("AtMostOneReferenceListIsSupportedWithDefaultPolicyCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At most one signature is supported with default policy check..
        /// </summary>
        internal static string AtMostOneSignatureIsSupportedWithDefaultPolicyCheck {
            get {
                return ResourceManager.GetString("AtMostOneSignatureIsSupportedWithDefaultPolicyCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Atom10 specification requires &apos;{0}&apos; to have one of these values: &quot;text&quot;, &quot;html&quot;, &quot;xhtml&quot;, however this value is &apos;{1}&apos; in the document being deserialized..
        /// </summary>
        internal static string Atom10SpecRequiresTextConstruct {
            get {
                return ResourceManager.GetString("Atom10SpecRequiresTextConstruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to get contract type for {0}, but that type is not a ServiceContract, nor does it inherit a ServiceContract..
        /// </summary>
        internal static string AttemptedToGetContractTypeForButThatTypeIs1 {
            get {
                return ResourceManager.GetString("AttemptedToGetContractTypeForButThatTypeIs1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The initial request context was already specified.  Can not create two for same message..
        /// </summary>
        internal static string AttemptToCreateMultipleRequestContext {
            get {
                return ResourceManager.GetString("AttemptToCreateMultipleRequestContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authenticate method in the ServiceAuthenticationManager returned null. If you do not want to return any authorization policies in the collection then return an empty ReadOnlyCollection instead. .
        /// </summary>
        internal static string AuthenticationManagerShouldNotReturnNull {
            get {
                return ResourceManager.GetString("AuthenticationManagerShouldNotReturnNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller was not authenticated by the service..
        /// </summary>
        internal static string AuthenticationOfClientFailed {
            get {
                return ResourceManager.GetString("AuthenticationOfClientFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication schemes configured on the host (&apos;{0}&apos;) do not allow those configured on the binding &apos;{1}&apos; (&apos;{2}&apos;).  Please ensure that the SecurityMode is set to Transport or TransportCredentialOnly.  Additionally, this may be resolved by changing the authentication schemes for this application through the IIS management tool, through the ServiceHost.Authentication.AuthenticationSchemes property, in the application configuration file at the &lt;serviceAuthenticationManager&gt; element, by updating the ClientCr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuthenticationSchemes_BindingAndHostConflict {
            get {
                return ResourceManager.GetString("AuthenticationSchemes_BindingAndHostConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication schemes cannot be inherited from the host for binding &apos;{0}&apos;. No AuthenticationScheme was specified on the ServiceHost or in the virtual application in IIS. This may be resolved by enabling at least one authentication scheme for this virtual application in IIS, through the ServiceHost.Authentication.AuthenticationSchemes property or in the configuration at the &lt;serviceAuthenticationManager&gt; element..
        /// </summary>
        internal static string AuthenticationSchemesCannotBeInheritedFromHost {
            get {
                return ResourceManager.GetString("AuthenticationSchemesCannotBeInheritedFromHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityTokenResponseCollection does not contain an authenticator..
        /// </summary>
        internal static string AuthenticatorNotPresentInRSTRCollection {
            get {
                return ResourceManager.GetString("AuthenticatorNotPresentInRSTRCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authentication failed..
        /// </summary>
        internal static string AuthFailed {
            get {
                return ResourceManager.GetString("AuthFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CloseTarget specified &apos;{0}&apos; does not identify the security token that signed the message..
        /// </summary>
        internal static string BadCloseTarget {
            get {
                return ResourceManager.GetString("BadCloseTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security context token is expired or is not valid. The message was not processed..
        /// </summary>
        internal static string BadContextTokenFaultReason {
            get {
                return ResourceManager.GetString("BadContextTokenFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be processed. This is most likely because the action &apos;{0}&apos; is incorrect or because the message contains an invalid or expired security context token or because there is a mismatch between bindings. The security context token would be invalid if the service aborted the channel due to inactivity. To prevent the service from aborting idle sessions prematurely increase the Receive timeout on the service endpoint&apos;s binding..
        /// </summary>
        internal static string BadContextTokenOrActionFaultReason {
            get {
                return ResourceManager.GetString("BadContextTokenOrActionFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid data buffer..
        /// </summary>
        internal static string BadData {
            get {
                return ResourceManager.GetString("BadData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Dispatch ID &apos;{0}&apos; could not be found or is invalid..
        /// </summary>
        internal static string BadDispID {
            get {
                return ResourceManager.GetString("BadDispID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid format for encrypted body..
        /// </summary>
        internal static string BadEncryptedBody {
            get {
                return ResourceManager.GetString("BadEncryptedBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EncryptedData or EncryptedKey is in an invalid state for this operation..
        /// </summary>
        internal static string BadEncryptionState {
            get {
                return ResourceManager.GetString("BadEncryptionState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client token at least needs to have the SecurityImpersonationLevel of at least Impersonation for Out of process Webhost activations..
        /// </summary>
        internal static string BadImpersonationLevelForOutOfProcWas {
            get {
                return ResourceManager.GetString("BadImpersonationLevelForOutOfProcWas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad Interface Registration.
        /// </summary>
        internal static string BadInterfaceRegistration {
            get {
                return ResourceManager.GetString("BadInterfaceRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect Interface version in registry.
        /// </summary>
        internal static string BadInterfaceVersion {
            get {
                return ResourceManager.GetString("BadInterfaceVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issued token is of unexpected type &apos;{0}&apos;. Expected token type &apos;{1}&apos;..
        /// </summary>
        internal static string BadIssuedTokenType {
            get {
                return ResourceManager.GetString("BadIssuedTokenType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid key encryption algorithm {0}..
        /// </summary>
        internal static string BadKeyEncryptionAlgorithm {
            get {
                return ResourceManager.GetString("BadKeyEncryptionAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Badly terminated value {0}..
        /// </summary>
        internal static string BadlyTerminatedValue {
            get {
                return ResourceManager.GetString("BadlyTerminatedValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of parameters in the request did not match the number supported by the method. Ensure that the correct number of parameters are specified..
        /// </summary>
        internal static string BadParamCount {
            get {
                return ResourceManager.GetString("BadParamCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no endorsing session token that matches the specified RenewTarget &apos;{0}&apos;..
        /// </summary>
        internal static string BadRenewTarget {
            get {
                return ResourceManager.GetString("BadRenewTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security negotiation failure because an incorrect Context attribute specified in RequestSecurityToken/RequestSecurityTokenResponse from the other party..
        /// </summary>
        internal static string BadSecurityNegotiationContext {
            get {
                return ResourceManager.GetString("BadSecurityNegotiationContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base address cannot contain a Uri fragment..
        /// </summary>
        internal static string BaseAddressCannotHaveFragment {
            get {
                return ResourceManager.GetString("BaseAddressCannotHaveFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base address cannot contain a Uri query string..
        /// </summary>
        internal static string BaseAddressCannotHaveQuery {
            get {
                return ResourceManager.GetString("BaseAddressCannotHaveQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base address cannot contain a Uri user info section..
        /// </summary>
        internal static string BaseAddressCannotHaveUserInfo {
            get {
                return ResourceManager.GetString("BaseAddressCannotHaveUserInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection already contains an address with scheme {0}.  There can be at most one address per scheme in this collection. If your service is being hosted in IIS you can fix the problem by setting &apos;system.serviceModel/serviceHostingEnvironment/multipleSiteBindingsEnabled&apos; to true or specifying &apos;system.serviceModel/serviceHostingEnvironment/baseAddressPrefixFilters&apos;..
        /// </summary>
        internal static string BaseAddressDuplicateScheme {
            get {
                return ResourceManager.GetString("BaseAddressDuplicateScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only an absolute Uri can be used as a base address..
        /// </summary>
        internal static string BaseAddressMustBeAbsolute {
            get {
                return ResourceManager.GetString("BaseAddressMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BasicHttpContextBinding {0}:{1} requires that AllowCookies property is set to true..
        /// </summary>
        internal static string BasicHttpContextBindingRequiresAllowCookie {
            get {
                return ResourceManager.GetString("BasicHttpContextBindingRequiresAllowCookie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BasicHttp binding requires that BasicHttpBinding.Security.Message.ClientCredentialType be equivalent to the BasicHttpMessageCredentialType.Certificate credential type for secure messages. Select Transport or TransportWithMessageCredential security for UserName credentials..
        /// </summary>
        internal static string BasicHttpMessageSecurityRequiresCertificate {
            get {
                return ResourceManager.GetString("BasicHttpMessageSecurityRequiresCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supporting SecurityToken cannot be written without encryption..
        /// </summary>
        internal static string BasicTokenCannotBeWrittenWithoutEncryption {
            get {
                return ResourceManager.GetString("BasicTokenCannotBeWrittenWithoutEncryption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A basic token is not expected in the security header in this context..
        /// </summary>
        internal static string BasicTokenNotExpected {
            get {
                return ResourceManager.GetString("BasicTokenNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bearer Key Type is not supported with WSFederationHttpBinding. Please use WS2007FederationHttpBinding..
        /// </summary>
        internal static string BearerKeyIncompatibleWithWSFederationHttpBinding {
            get {
                return ResourceManager.GetString("BearerKeyIncompatibleWithWSFederationHttpBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Proof Token was found in the response that was returned by the Security Token Service for a Bearer Key Type token request. Note that Proof Tokens should not be generated when a Bearer Key Type request is made..
        /// </summary>
        internal static string BearerKeyTypeCannotHaveProofKey {
            get {
                return ResourceManager.GetString("BearerKeyTypeCannotHaveProofKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service behavior {0} requires that the binding associated with endpoint {1} listening on {2} supports the context protocol, because the contract associated with this endpoint may require a session. Currently configured binding for this endpoint does not support the context protocol. Please modify the binding to add support for the context protocol or modify the SessionMode on the contract to NotAllowed..
        /// </summary>
        internal static string BehaviorRequiresContextProtocolSupportInBinding {
            get {
                return ResourceManager.GetString("BehaviorRequiresContextProtocolSupportInBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binary encoder session is not valid. There was an error decoding a previous message..
        /// </summary>
        internal static string BinaryEncoderSessionInvalid {
            get {
                return ResourceManager.GetString("BinaryEncoderSessionInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binary encoder session information is not properly formed..
        /// </summary>
        internal static string BinaryEncoderSessionMalformed {
            get {
                return ResourceManager.GetString("BinaryEncoderSessionMalformed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binary encoder session information exceeded the maximum size quota ({0}). To increase this quota, use the MaxSessionSize property on the BinaryMessageEncodingBindingElement..
        /// </summary>
        internal static string BinaryEncoderSessionTooLarge {
            get {
                return ResourceManager.GetString("BinaryEncoderSessionTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;,&apos;{1}&apos;) for contract (&apos;{2}&apos;,&apos;{3}&apos;) is configured with SecureConversation, but the authentication mode is not able to provide the request/reply-based integrity and confidentiality required for the negotiation..
        /// </summary>
        internal static string BindingDoesNotSupportProtectionForRst {
            get {
                return ResourceManager.GetString("BindingDoesNotSupportProtectionForRst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract operation &apos;{0}&apos; requires Windows identity for automatic impersonation. A Windows identity that represents the caller is not provided by binding (&apos;{1}&apos;,&apos;{2}&apos;) for contract (&apos;{3}&apos;,&apos;{4}&apos;..
        /// </summary>
        internal static string BindingDoesNotSupportWindowsIdenityForImpersonation {
            get {
                return ResourceManager.GetString("BindingDoesNotSupportWindowsIdenityForImpersonation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding &apos;{0}&apos; doesn&apos;t support creating any channel types. This often indicates that the BindingElements in a CustomBinding have been stacked incorrectly or in the wrong order. A Transport is required at the bottom of the stack. The recommended order for BindingElements is: TransactionFlow, ReliableSession, Security, CompositeDuplex, OneWay, StreamSecurity, MessageEncoding, Transport. .
        /// </summary>
        internal static string BindingDoesnTSupportAnyChannelTypes1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportAnyChannelTypes1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract does not allow Session, but Binding &apos;{0}&apos; does not support Datagram or is not configured properly to support it..
        /// </summary>
        internal static string BindingDoesntSupportDatagramButContractRequires {
            get {
                return ResourceManager.GetString("BindingDoesntSupportDatagramButContractRequires", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires Duplex, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportDuplexButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportDuplexButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires OneWay, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportOneWayButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportOneWayButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires Request/Reply, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportRequestReplyButContract1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportRequestReplyButContract1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires Session, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportSessionButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportSessionButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract requires TwoWay (either request-reply or duplex), but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingDoesnTSupportTwoWayButContractRequires1 {
            get {
                return ResourceManager.GetString("BindingDoesnTSupportTwoWayButContractRequires1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fail to load binding {0} from config. Error:{1}..
        /// </summary>
        internal static string BindingLoadFromConfigFailedWith {
            get {
                return ResourceManager.GetString("BindingLoadFromConfigFailedWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding type {0} instance {1} not found in config..
        /// </summary>
        internal static string BindingNotFoundInConfig {
            get {
                return ResourceManager.GetString("BindingNotFoundInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required binding keyword was not specified or is not valid..
        /// </summary>
        internal static string BindingNotSpecified {
            get {
                return ResourceManager.GetString("BindingNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding for scheme &apos;{0}&apos; specified in the protocol mapping does not exist and must be created..
        /// </summary>
        internal static string BindingProtocolMappingNotDefined {
            get {
                return ResourceManager.GetString("BindingProtocolMappingNotDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeliveryRequirementsAttribute disallows QueuedDelivery, but binding for the endpoint with contract &apos;{0}&apos; supports it..
        /// </summary>
        internal static string BindingRequirementsAttributeDisallowsQueuedDelivery1 {
            get {
                return ResourceManager.GetString("BindingRequirementsAttributeDisallowsQueuedDelivery1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeliveryRequirementsAttribute requires QueuedDelivery, but binding for the endpoint with contract &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string BindingRequirementsAttributeRequiresQueuedDelivery1 {
            get {
                return ResourceManager.GetString("BindingRequirementsAttributeRequiresQueuedDelivery1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path variable &apos;{0}&apos; in the UriTemplate must be bound to a non-empty string value..
        /// </summary>
        internal static string BindUriTemplateToNullOrEmptyPathParam {
            get {
                return ResourceManager.GetString("BindUriTemplateToNullOrEmptyPathParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body writer does not support writing more than once because it is not buffered..
        /// </summary>
        internal static string BodyWriterCanOnlyBeWrittenOnce {
            get {
                return ResourceManager.GetString("BodyWriterCanOnlyBeWrittenOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body writer returned from OnCreateBufferedCopy was not buffered..
        /// </summary>
        internal static string BodyWriterReturnedIsNotBuffered {
            get {
                return ResourceManager.GetString("BodyWriterReturnedIsNotBuffered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security binding element for bootstrap security was not specified on &apos;{0}&apos;..
        /// </summary>
        internal static string BootstrapSecurityBindingElementNotSet {
            get {
                return ResourceManager.GetString("BootstrapSecurityBindingElementNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to finish reading Base64 data as the given buffer quota has been exceeded. Buffer quota: {0}. Consider increasing the MaxReceivedMessageSize quota on the TransportBindingElement. Please note that a very high value for MaxReceivedMessageSize will result in buffering a large message and might open the system to DOS attacks..
        /// </summary>
        internal static string BufferQuotaExceededReadingBase64 {
            get {
                return ResourceManager.GetString("BufferQuotaExceededReadingBase64", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context cached at the channel layer cannot be changed after the channel is opened..
        /// </summary>
        internal static string CachedContextIsImmutable {
            get {
                return ResourceManager.GetString("CachedContextIsImmutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service cannot cache the negotiation state as the capacity &apos;{0}&apos; has been reached. Retry the request..
        /// </summary>
        internal static string CachedNegotiationStateQuotaReached {
            get {
                return ResourceManager.GetString("CachedNegotiationStateQuotaReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item cannot be added. The maximum cache size is ({0} items)..
        /// </summary>
        internal static string CacheQuotaReached {
            get {
                return ResourceManager.GetString("CacheQuotaReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message with action &apos;{0}&apos; contains a callback context header with name &apos;{1}&apos; and namespace &apos;{2}&apos;. Callback context headers are not expected in incoming messages at the client..
        /// </summary>
        internal static string CallbackContextNotExpectedOnIncomingMessageAtClient {
            get {
                return ResourceManager.GetString("CallbackContextNotExpectedOnIncomingMessageAtClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The outgoing message with action &apos;{0}&apos; contains a callback context message property. Callback context cannot be transmitted in outgoing messages at the server..
        /// </summary>
        internal static string CallbackContextNotExpectedOnOutgoingMessageAtServer {
            get {
                return ResourceManager.GetString("CallbackContextNotExpectedOnOutgoingMessageAtServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message contains a callback context message property. Callback context can be transmitted only when the ContextBindingElement is configured with ContextExchangeMechanism of ContextSoapHeader..
        /// </summary>
        internal static string CallbackContextOnlySupportedInSoap {
            get {
                return ResourceManager.GetString("CallbackContextOnlySupportedInSoap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message contains a callback context header with an endpoint reference for AddressingVersion &apos;{0}&apos;. Callback context can only be transmitted when the AddressingVersion is configured with &apos;WSAddressing10&apos;..
        /// </summary>
        internal static string CallbackContextOnlySupportedInWSAddressing10 {
            get {
                return ResourceManager.GetString("CallbackContextOnlySupportedInWSAddressing10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot access directory {0}..
        /// </summary>
        internal static string CannotAccessDirectory {
            get {
                return ResourceManager.GetString("CannotAccessDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add two items with the same key to SynchronizedKeyedCollection..
        /// </summary>
        internal static string CannotAddTwoItemsWithTheSameKeyToSynchronizedKeyedCollection0 {
            get {
                return ResourceManager.GetString("CannotAddTwoItemsWithTheSameKeyToSynchronizedKeyedCollection0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot authenticate the other party..
        /// </summary>
        internal static string CannotAuthenticateServer {
            get {
                return ResourceManager.GetString("CannotAuthenticateServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channeloption intrinsic object cannot be created because the channel builder is not initialized..
        /// </summary>
        internal static string CannotCreateChannelOption {
            get {
                return ResourceManager.GetString("CannotCreateChannelOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create a bi-directional (request-reply or duplex) channel for security negotiation. Please ensure that the binding is capable of creating a bi-directional channel..
        /// </summary>
        internal static string CannotCreateTwoWayListenerForNegotiation {
            get {
                return ResourceManager.GetString("CannotCreateTwoWayListenerForNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot detect WS-Addressing version. EndpointReference does not start with an Element..
        /// </summary>
        internal static string CannotDetectAddressingVersion {
            get {
                return ResourceManager.GetString("CannotDetectAddressingVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client cannot determine the Service Principal Name based on the identity in the target address &apos;{0}&apos; for the purpose of SspiNegotiation/Kerberos. The target address identity must be a UPN identity (like acmedomain\alice) or SPN identity (like host/bobs-machine)..
        /// </summary>
        internal static string CannotDetermineSPNBasedOnAddress {
            get {
                return ResourceManager.GetString("CannotDetermineSPNBasedOnAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the X.509 certificate using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos;..
        /// </summary>
        internal static string CannotFindCert {
            get {
                return ResourceManager.GetString("CannotFindCert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find The X.509 certificate using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos; for target &apos;{4}&apos;..
        /// </summary>
        internal static string CannotFindCertForTarget {
            get {
                return ResourceManager.GetString("CannotFindCertForTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find CLSID {0} in COM+ application {1}..
        /// </summary>
        internal static string CannotFindClsidInApplication {
            get {
                return ResourceManager.GetString("CannotFindClsidInApplication", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the correlation state for applying security to reply at the responder..
        /// </summary>
        internal static string CannotFindCorrelationStateForApplyingSecurity {
            get {
                return ResourceManager.GetString("CannotFindCorrelationStateForApplyingSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token&apos;s crypto collection does not support algorithm &apos;{0}&apos;..
        /// </summary>
        internal static string CannotFindMatchingCrypto {
            get {
                return ResourceManager.GetString("CannotFindMatchingCrypto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the negotiation state for the context &apos;{0}&apos;..
        /// </summary>
        internal static string CannotFindNegotiationState {
            get {
                return ResourceManager.GetString("CannotFindNegotiationState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the security session with the ID &apos;{0}&apos;..
        /// </summary>
        internal static string CannotFindSecuritySession {
            get {
                return ResourceManager.GetString("CannotFindSecuritySession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface {0} has a null namespace or name..
        /// </summary>
        internal static string CannotHaveNullOrEmptyNameOrNamespaceForIID {
            get {
                return ResourceManager.GetString("CannotHaveNullOrEmptyNameOrNamespaceForIID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}.{1} operation references a message element [{2}] that has already been exported from the {3}.{4} operation. You can change the name of one of the operations by changing the method name or using the Name property of OperationContractAttribute. Alternatively, you can control the element name in greater detail using the MessageContract programming model..
        /// </summary>
        internal static string CannotHaveTwoOperationsWithTheSameElement5 {
            get {
                return ResourceManager.GetString("CannotHaveTwoOperationsWithTheSameElement5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot have two operations in the same contract with the same name, methods {0} and {1} in type {2} violate this rule. You can change the name of one of the operations by changing the method name or by using the Name property of OperationContractAttribute..
        /// </summary>
        internal static string CannotHaveTwoOperationsWithTheSameName3 {
            get {
                return ResourceManager.GetString("CannotHaveTwoOperationsWithTheSameName3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PrivacyNotice element must have a Version attribute..
        /// </summary>
        internal static string CannotImportPrivacyNoticeElementWithoutVersionAttribute {
            get {
                return ResourceManager.GetString("CannotImportPrivacyNoticeElementWithoutVersionAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy to import a process cannot import a binding for contract ({0},{1}). The protection requirements for the binding are not compatible with a binding already imported for the contract. You must reconfigure the binding..
        /// </summary>
        internal static string CannotImportProtectionLevelForContract {
            get {
                return ResourceManager.GetString("CannotImportProtectionLevelForContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security policy import failed. The security policy contains supporting token requirements at the operation scope. The contract description does not specify the action for the request message associated with this operation..
        /// </summary>
        internal static string CannotImportSupportingTokensForOperationWithoutRequestAction {
            get {
                return ResourceManager.GetString("CannotImportSupportingTokensForOperationWithoutRequestAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot inherit two different operations with the same name, operation &apos;{0}&apos; from contracts &apos;{1}&apos; and &apos;{2}&apos; violate this rule. You can change the name of one of the operations by changing the method name or by using the Name property of OperationContractAttribute..
        /// </summary>
        internal static string CannotInheritTwoOperationsWithTheSameName3 {
            get {
                return ResourceManager.GetString("CannotInheritTwoOperationsWithTheSameName3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot issue the token type &apos;{0}&apos;..
        /// </summary>
        internal static string CannotIssueRstTokenType {
            get {
                return ResourceManager.GetString("CannotIssueRstTokenType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cound not load type &apos;{0}&apos; from the assemblies in current AppDomain..
        /// </summary>
        internal static string CanNotLoadTypeGotFromConfig {
            get {
                return ResourceManager.GetString("CanNotLoadTypeGotFromConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot determine the key size of the issued token..
        /// </summary>
        internal static string CannotObtainIssuedTokenKeySize {
            get {
                return ResourceManager.GetString("CannotObtainIssuedTokenKeySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service was unable to verify the cipher strengths negotiated as part of the SSL handshake..
        /// </summary>
        internal static string CannotObtainSslConnectionInfo {
            get {
                return ResourceManager.GetString("CannotObtainSslConnectionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Impersonation using the client token is not possible. The binding (&apos;{0}&apos;, &apos;{1}&apos;) for contract (&apos;{2}&apos;, &apos;{3}&apos;) uses the Username Security Token for client authentication with a Membership Provider registered. Use a different type of security token for the client..
        /// </summary>
        internal static string CannotPerformImpersonationOnUsernameToken {
            get {
                return ResourceManager.GetString("CannotPerformImpersonationOnUsernameToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;,&apos;{1}&apos;) for contract (&apos;{2}&apos;,&apos;{3}&apos;) supports impersonation only on Windows 2003 Server and newer version of Windows. Use SspiNegotiated authentication and a binding with Secure Conversation with cancellation enabled..
        /// </summary>
        internal static string CannotPerformS4UImpersonationOnPlatform {
            get {
                return ResourceManager.GetString("CannotPerformS4UImpersonationOnPlatform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read the token from the &apos;{0}&apos; element with the &apos;{1}&apos; namespace for BinarySecretSecurityToken, with a &apos;{2}&apos; ValueType. If this element is expected to be valid, ensure that security is configured to consume tokens with the name, namespace and value type specified..
        /// </summary>
        internal static string CannotReadToken {
            get {
                return ResourceManager.GetString("CannotReadToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result cannot be represented as a nodeset. Only results of type XPathResultType.NodeSet can be represented as nodesets..
        /// </summary>
        internal static string CannotRepresentResultAsNodeset {
            get {
                return ResourceManager.GetString("CannotRepresentResultAsNodeset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type for the &apos;{0}&apos; parameter in &apos;{1}&apos; within the namespace &apos;{2}&apos; cannot not be resolved..
        /// </summary>
        internal static string CannotResolveTypeForParamInMessageDescription {
            get {
                return ResourceManager.GetString("CannotResolveTypeForParamInMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;Name&apos; property cannot be set on an invalid InstanceKey..
        /// </summary>
        internal static string CannotSetNameOnTheInvalidKey {
            get {
                return ResourceManager.GetString("CannotSetNameOnTheInvalidKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create channel for a contract that requires request/reply and a binding that requires manual addressing but only supports duplex communication..
        /// </summary>
        internal static string CantCreateChannelWithManualAddressing {
            get {
                return ResourceManager.GetString("CantCreateChannelWithManualAddressing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t infer an external reference for &apos;{0}&apos; token type..
        /// </summary>
        internal static string CantInferReferenceForToken {
            get {
                return ResourceManager.GetString("CantInferReferenceForToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate-based client authentication is not supported in TransportCredentialOnly security mode. Select the Transport security mode..
        /// </summary>
        internal static string CertificateUnsupportedForHttpTransportCredentialOnly {
            get {
                return ResourceManager.GetString("CertificateUnsupportedForHttpTransportCredentialOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding does not contain a ChannelDemuxerBindingElement..
        /// </summary>
        internal static string ChannelDemuxerBindingElementNotFound {
            get {
                return ResourceManager.GetString("ChannelDemuxerBindingElementNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current channel does not support closing the output session as this channel does not implement ISessionChannel&lt;IDuplexSession&gt;..
        /// </summary>
        internal static string channelDoesNotHaveADuplexSession0 {
            get {
                return ResourceManager.GetString("channelDoesNotHaveADuplexSession0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call to IChannelFactory.CreateChannel made on an object of type {0} failed because Open has not been called on this object..
        /// </summary>
        internal static string ChannelFactoryCannotBeUsedToCreateChannels {
            get {
                return ResourceManager.GetString("ChannelFactoryCannotBeUsedToCreateChannels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one operation on the &apos;{0}&apos; contract is configured with the TransactionFlowAttribute attribute set to Mandatory but the channel&apos;s binding &apos;{1}&apos; is not configured with a TransactionFlowBindingElement. The TransactionFlowAttribute attribute set to Mandatory cannot be used without a TransactionFlowBindingElement..
        /// </summary>
        internal static string ChannelHasAtLeastOneOperationWithTransactionFlowEnabled {
            get {
                return ResourceManager.GetString("ChannelHasAtLeastOneOperationWithTransactionFlowEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A newly accepted connection did not receive initialization data from the sender within the configured ChannelInitializationTimeout ({0}).  As a result, the connection will be aborted.  If you are on a highly congested network, or your sending machine is heavily loaded, consider increasing this value or load-balancing your server..
        /// </summary>
        internal static string ChannelInitializationTimeout {
            get {
                return ResourceManager.GetString("ChannelInitializationTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: The InnerChannel property is null..
        /// </summary>
        internal static string channelIsNotAvailable0 {
            get {
                return ResourceManager.GetString("channelIsNotAvailable0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channel context management cannot be enabled or disabled after the channel is opened..
        /// </summary>
        internal static string ChannelIsOpen {
            get {
                return ResourceManager.GetString("ChannelIsOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session channel must be opened before the session ID can be accessed..
        /// </summary>
        internal static string ChannelMustBeOpenedToGetSessionId {
            get {
                return ResourceManager.GetString("ChannelMustBeOpenedToGetSessionId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel is not open..
        /// </summary>
        internal static string ChannelNotOpen {
            get {
                return ResourceManager.GetString("ChannelNotOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot modify channel parameters because the {0} is in the {1} state.  This operation is only supported in the Created state..
        /// </summary>
        internal static string ChannelParametersCannotBeModified {
            get {
                return ResourceManager.GetString("ChannelParametersCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot propagate channel parameters because the {0} is in the {1} state.  This operation is only supported in the Opening or Opened state when the collection is locked..
        /// </summary>
        internal static string ChannelParametersCannotBePropagated {
            get {
                return ResourceManager.GetString("ChannelParametersCannotBePropagated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified channel type {0} is not supported by this channel manager..
        /// </summary>
        internal static string ChannelTypeNotSupported {
            get {
                return ResourceManager.GetString("ChannelTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML element {0} does not have a child of type {1}..
        /// </summary>
        internal static string ChildNodeTypeMissing {
            get {
                return ResourceManager.GetString("ChildNodeTypeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The claimType cannot be an empty string..
        /// </summary>
        internal static string ClaimTypeCannotBeEmpty {
            get {
                return ResourceManager.GetString("ClaimTypeCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid CleanupInterval value of {0}; it must be greater than zero.
        /// </summary>
        internal static string CleanupIntervalMustBeGreaterThanZero {
            get {
                return ResourceManager.GetString("CleanupIntervalMustBeGreaterThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate for the client has not been provided.  The certificate can be set on the ClientCredentials or ServiceCredentials..
        /// </summary>
        internal static string ClientCertificateNotProvided {
            get {
                return ResourceManager.GetString("ClientCertificateNotProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client certificate is not provided. Specify a client certificate in ClientCredentials. .
        /// </summary>
        internal static string ClientCertificateNotProvidedOnClientCredentials {
            get {
                return ResourceManager.GetString("ClientCertificateNotProvidedOnClientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client certificate is not provided. Specify a client certificate in ServiceCredentials. .
        /// </summary>
        internal static string ClientCertificateNotProvidedOnServiceCredentials {
            get {
                return ResourceManager.GetString("ClientCertificateNotProvidedOnServiceCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClientCredentials cannot create a local token provider for token requirement {0}..
        /// </summary>
        internal static string ClientCredentialsUnableToCreateLocalTokenProvider {
            get {
                return ResourceManager.GetString("ClientCredentialsUnableToCreateLocalTokenProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClientCredentialType.None is not valid for the TransportWithMessageCredential security mode. Specify a message credential type or use a different security mode..
        /// </summary>
        internal static string ClientCredentialTypeMustBeSpecifiedForMixedMode {
            get {
                return ResourceManager.GetString("ClientCredentialTypeMustBeSpecifiedForMixedMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ClientOperation &apos;{0}&apos; requires Formatter, since SerializeRequest and DeserializeReply are not both false..
        /// </summary>
        internal static string ClientRuntimeRequiresFormatter0 {
            get {
                return ResourceManager.GetString("ClientRuntimeRequiresFormatter0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client&apos;s security session did not receive a &apos;close response&apos; message from the service within the configured timeout ({0})..
        /// </summary>
        internal static string ClientSecurityCloseTimeout {
            get {
                return ResourceManager.GetString("ClientSecurityCloseTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client is unable to finish the security negotiation within the configured timeout ({0}).  The current negotiation leg is {1} ({2}).  .
        /// </summary>
        internal static string ClientSecurityNegotiationTimeout {
            get {
                return ResourceManager.GetString("ClientSecurityNegotiationTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client&apos;s security session was not able to close its output session within the configured timeout ({0})..
        /// </summary>
        internal static string ClientSecurityOutputSessionCloseTimeout {
            get {
                return ResourceManager.GetString("ClientSecurityOutputSessionCloseTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client is unable to request the security session within the configured timeout ({0})..
        /// </summary>
        internal static string ClientSecuritySessionRequestTimeout {
            get {
                return ResourceManager.GetString("ClientSecuritySessionRequestTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when creating the WebSocket with the factory of type &apos;{0}&apos;. See the inner exception for details..
        /// </summary>
        internal static string ClientWebSocketFactory_CreateWebSocketFailed {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_CreateWebSocketFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured when getting the WebSocketVersion from the WebSocket factory of type &apos;{0}&apos;. See the inner exception for details..
        /// </summary>
        internal static string ClientWebSocketFactory_GetWebSocketVersionFailed {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_GetWebSocketVersionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WebSocket returned by the factory of type &apos;{0}&apos; has the SubProtocol &apos;{1}&apos; that doesn&apos;t match the requested SubProtocol value &apos;{2}&apos;..
        /// </summary>
        internal static string ClientWebSocketFactory_InvalidSubProtocol {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_InvalidSubProtocol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket creation failed. The &apos;{0}&apos; returned a WebSocket that is either null or not opened..
        /// </summary>
        internal static string ClientWebSocketFactory_InvalidWebSocket {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_InvalidWebSocket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WebSocketVersion returned by the WebSocket factory of type &apos;{0}&apos; is either null, empty or invalid..
        /// </summary>
        internal static string ClientWebSocketFactory_InvalidWebSocketVersion {
            get {
                return ResourceManager.GetString("ClientWebSocketFactory_InvalidWebSocketVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clone() was not implemented properly by &apos;{0}&apos;. The cloned object was &apos;{1}&apos;..
        /// </summary>
        internal static string CloneNotImplementedCorrectly {
            get {
                return ResourceManager.GetString("CloneNotImplementedCorrectly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred while attempting to close the output half of the duplex reliable session..
        /// </summary>
        internal static string CloseOutputSessionErrorReason {
            get {
                return ResourceManager.GetString("CloseOutputSessionErrorReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close timed out after {0}.  Increase the timeout value passed to the call to Close or increase the CloseTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string CloseTimedOut {
            get {
                return ResourceManager.GetString("CloseTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object with CLSID &apos;{0}&apos; does not support the required IPersistStream interface..
        /// </summary>
        internal static string CLSIDDoesNotSupportIPersistStream {
            get {
                return ResourceManager.GetString("CLSIDDoesNotSupportIPersistStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CLSID specified in the service file is not configured in the specified application. (The CLSID is {0}, the AppID is {1}.).
        /// </summary>
        internal static string ClsidNotInApplication {
            get {
                return ResourceManager.GetString("ClsidNotInApplication", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CLSID specified in the service file does not have a service element in a configuration file. (The CLSID is {0}.).
        /// </summary>
        internal static string ClsidNotInConfiguration {
            get {
                return ResourceManager.GetString("ClsidNotInConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLSID of type {0} does not match the CLSID on PersistStreamTypeWrapper which is {1}..
        /// </summary>
        internal static string CLSIDOfTypeDoesNotMatch {
            get {
                return ResourceManager.GetString("CLSIDOfTypeDoesNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an instance of the specified service: access is denied..
        /// </summary>
        internal static string ComActivationAccessDenied {
            get {
                return ResourceManager.GetString("ComActivationAccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error occurred attempting to create an instance of the specified service..
        /// </summary>
        internal static string ComActivationFailure {
            get {
                return ResourceManager.GetString("ComActivationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No services are configured for the application..
        /// </summary>
        internal static string ComDllHostInitializerFoundNoServices {
            get {
                return ResourceManager.GetString("ComDllHostInitializerFoundNoServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are duplicate operations, which is invalid. Remove the duplicates..
        /// </summary>
        internal static string ComDuplicateOperation {
            get {
                return ResourceManager.GetString("ComDuplicateOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session requirements of the contracts are inconsistent. All COM contracts in a service must have the same session requirement..
        /// </summary>
        internal static string ComInconsistentSessionRequirements {
            get {
                return ResourceManager.GetString("ComInconsistentSessionRequirements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating manifest file {0} failed with {1}..
        /// </summary>
        internal static string ComIntegrationManifestCreationFailed {
            get {
                return ResourceManager.GetString("ComIntegrationManifestCreationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied..
        /// </summary>
        internal static string ComMessageAccessDenied {
            get {
                return ResourceManager.GetString("ComMessageAccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be used for communication because it has been Aborted..
        /// </summary>
        internal static string CommunicationObjectAborted1 {
            get {
                return ResourceManager.GetString("CommunicationObjectAborted1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be used for communication because it has been Aborted: {1}.
        /// </summary>
        internal static string CommunicationObjectAbortedStack2 {
            get {
                return ResourceManager.GetString("CommunicationObjectAbortedStack2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, has overridden the virtual function {1} but it does not call version defined in the base class..
        /// </summary>
        internal static string CommunicationObjectBaseClassMethodNotCalled {
            get {
                return ResourceManager.GetString("CommunicationObjectBaseClassMethodNotCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be modified unless it is in the Created state..
        /// </summary>
        internal static string CommunicationObjectCannotBeModified {
            get {
                return ResourceManager.GetString("CommunicationObjectCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be modified while it is in the {1} state..
        /// </summary>
        internal static string CommunicationObjectCannotBeModifiedInState {
            get {
                return ResourceManager.GetString("CommunicationObjectCannotBeModifiedInState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, is in the {1} state.  Communication objects cannot be used for communication unless they are in the Opened state..
        /// </summary>
        internal static string CommunicationObjectCannotBeUsed {
            get {
                return ResourceManager.GetString("CommunicationObjectCannotBeUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be used due to an error that occurred during close..
        /// </summary>
        internal static string CommunicationObjectCloseInterrupted1 {
            get {
                return ResourceManager.GetString("CommunicationObjectCloseInterrupted1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be used for communication because it is in the Faulted state..
        /// </summary>
        internal static string CommunicationObjectFaulted1 {
            get {
                return ResourceManager.GetString("CommunicationObjectFaulted1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, cannot be used for communication because it is in the Faulted state: {1}.
        /// </summary>
        internal static string CommunicationObjectFaultedStack2 {
            get {
                return ResourceManager.GetString("CommunicationObjectFaultedStack2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication object, {0}, is not part of WCF and is in an unsupported state &apos;{1}&apos;.  This indicates an internal error in the implementation of that communication object..
        /// </summary>
        internal static string CommunicationObjectInInvalidState {
            get {
                return ResourceManager.GetString("CommunicationObjectInInvalidState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one operation is asynchronous. Asynchronous operations are not allowed..
        /// </summary>
        internal static string ComNoAsyncOperationsAllowed {
            get {
                return ResourceManager.GetString("ComNoAsyncOperationsAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} operation on the service {1} could not be found in the catalog..
        /// </summary>
        internal static string ComOperationNotFound {
            get {
                return ResourceManager.GetString("ComOperationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to From: {0}
        ///AppId: {1}
        ///ClsId: {2}
        ///Incoming TransactionId: {3}
        ///Requesting Identity: {4}.
        /// </summary>
        internal static string ComPlusInstanceCreationRequestSchema {
            get {
                return ResourceManager.GetString("ComPlusInstanceCreationRequestSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This InstanceContext requires a valid Message to obtain the instance..
        /// </summary>
        internal static string ComPlusInstanceProviderRequiresMessage0 {
            get {
                return ResourceManager.GetString("ComPlusInstanceProviderRequiresMessage0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to From: {0}
        ///AppId: {1}
        ///ClsId: {2}
        ///Iid: {3}
        ///Action: {4}
        ///Instance Id: {5}
        ///Managed Thread Id: {6}
        ///Unmanaged Thread Id: {7}
        ///Requesting Identity: {8}.
        /// </summary>
        internal static string ComPlusMethodCallSchema {
            get {
                return ResourceManager.GetString("ComPlusMethodCallSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Windows hotfix or later service pack is required on Windows XP and Windows Server 2003 to use WS-AtomicTransaction and COM+ Integration Web service transaction functionality. See the Microsoft .NET Framework release notes for instructions on installing the required hotfix..
        /// </summary>
        internal static string ComPlusServiceHostStartingServiceErrorNoQFE {
            get {
                return ResourceManager.GetString("ComPlusServiceHostStartingServiceErrorNoQFE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AppId: {0}
        ///ClsId: {1}
        ///.
        /// </summary>
        internal static string ComPlusServiceSchema {
            get {
                return ResourceManager.GetString("ComPlusServiceSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AppId: {0}.
        /// </summary>
        internal static string ComPlusServiceSchemaDllHost {
            get {
                return ResourceManager.GetString("ComPlusServiceSchemaDllHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Iid: {0}
        ///Type Library ID: {1}.
        /// </summary>
        internal static string ComPlusTLBImportSchema {
            get {
                return ResourceManager.GetString("ComPlusTLBImportSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied. The message was not authenticated with a valid windows identity..
        /// </summary>
        internal static string ComRequiresWindowsSecurity {
            get {
                return ResourceManager.GetString("ComRequiresWindowsSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding on the service endpoint cannot be configured..
        /// </summary>
        internal static string ConfigBindingCannotBeConfigured {
            get {
                return ResourceManager.GetString("ConfigBindingCannotBeConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration binding extension &apos;{0}&apos; could not be found. Verify that this binding extension is properly registered in system.serviceModel/extensions/bindingExtensions and that it is spelled correctly..
        /// </summary>
        internal static string ConfigBindingExtensionNotFound {
            get {
                return ResourceManager.GetString("ConfigBindingExtensionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A binding reference cycle was detected in your configuration. The following reference cycle must be removed: {0}..
        /// </summary>
        internal static string ConfigBindingReferenceCycleDetected {
            get {
                return ResourceManager.GetString("ConfigBindingReferenceCycleDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding specified cannot be null or an empty string.  Please specify a valid binding.  Valid binding values can be found in the system.serviceModel/extensions/bindingExtensions collection..
        /// </summary>
        internal static string ConfigBindingTypeCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("ConfigBindingTypeCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot parse type &apos;{0}&apos; into a System.ServiceModel.Dispatcher.XPathMessageFilter..
        /// </summary>
        internal static string ConfigCannotParseXPathFilter {
            get {
                return ResourceManager.GetString("ConfigCannotParseXPathFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An extension of name &apos;{0}&apos; already appears in extension collection. Extension names must be unique..
        /// </summary>
        internal static string ConfigDuplicateExtensionName {
            get {
                return ResourceManager.GetString("ConfigDuplicateExtensionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An extension of type &apos;{0}&apos; already appears in extension collection. Extension types must be unique..
        /// </summary>
        internal static string ConfigDuplicateExtensionType {
            get {
                return ResourceManager.GetString("ConfigDuplicateExtensionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An extension named {0} already appears in the {1}. Extension names must be unique..
        /// </summary>
        internal static string ConfigDuplicateItem {
            get {
                return ResourceManager.GetString("ConfigDuplicateItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A child element with the element name &apos;{0}&apos; already exists.  Child elements can only be added once..
        /// </summary>
        internal static string ConfigDuplicateKey {
            get {
                return ResourceManager.GetString("ConfigDuplicateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A child element named &apos;{0}&apos; with same key already exists at the same configuration scope. Collection elements must be unique within the same configuration scope (e.g. the same application.config file). Duplicate key value:  &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigDuplicateKeyAtSameScope {
            get {
                return ResourceManager.GetString("ConfigDuplicateKeyAtSameScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; configuration element key cannot be null..
        /// </summary>
        internal static string ConfigElementKeyNull {
            get {
                return ResourceManager.GetString("ConfigElementKeyNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one of the configuration element keys &apos;{0}&apos; must not be null..
        /// </summary>
        internal static string ConfigElementKeysNull {
            get {
                return ResourceManager.GetString("ConfigElementKeysNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension element &apos;{0}&apos; cannot be added to this element.  Verify that the extension is registered in the extension collection at system.serviceModel/extensions/{1}..
        /// </summary>
        internal static string ConfigElementTypeNotAllowed {
            get {
                return ResourceManager.GetString("ConfigElementTypeNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration endpoint extension &apos;{0}&apos; could not be found. Verify that this endpoint extension is properly registered in system.serviceModel/extensions/endpointExtensions and that it is spelled correctly..
        /// </summary>
        internal static string ConfigEndpointExtensionNotFound {
            get {
                return ResourceManager.GetString("ConfigEndpointExtensionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An endpoint reference cycle was detected in your configuration. The following reference cycle must be removed: {0}..
        /// </summary>
        internal static string ConfigEndpointReferenceCycleDetected {
            get {
                return ResourceManager.GetString("ConfigEndpointReferenceCycleDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint specified cannot be null or an empty string.  Please specify a valid endpoint.  Valid endpoint values can be found in the system.serviceModel/extensions/endpointExtensions collection..
        /// </summary>
        internal static string ConfigEndpointTypeCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("ConfigEndpointTypeCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension collection &apos;{0}&apos; not found..
        /// </summary>
        internal static string ConfigExtensionCollectionNotFound {
            get {
                return ResourceManager.GetString("ConfigExtensionCollectionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extension of type &apos;{0}&apos; is not registered in the extension collection &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigExtensionTypeNotRegisteredInCollection {
            get {
                return ResourceManager.GetString("ConfigExtensionTypeNotRegisteredInCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attribute &apos;{0}&apos; cannot be specified on element &apos;{1}&apos; when attribute &apos;{2}&apos; is not specified..
        /// </summary>
        internal static string ConfigInvalidAttribute {
            get {
                return ResourceManager.GetString("ConfigInvalidAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value in policyType. The policyType &apos;{0}&apos; does not implement from &apos;{1}&apos;. .
        /// </summary>
        internal static string ConfigInvalidAuthorizationPolicyType {
            get {
                return ResourceManager.GetString("ConfigInvalidAuthorizationPolicyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {1} binding does not have a configured binding named &apos;{0}&apos;..
        /// </summary>
        internal static string ConfigInvalidBindingConfigurationName {
            get {
                return ResourceManager.GetString("ConfigInvalidBindingConfigurationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding at {1} does not have a configured binding named &apos;{0}&apos;. This is an invalid value for {2}..
        /// </summary>
        internal static string ConfigInvalidBindingName {
            get {
                return ResourceManager.GetString("ConfigInvalidBindingName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for the certificate validator type. The type &apos;{0}&apos; does not derive from the appropriate base class &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidCertificateValidatorType {
            get {
                return ResourceManager.GetString("ConfigInvalidCertificateValidatorType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; is not a valid instance of type &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidClassFactoryValue {
            get {
                return ResourceManager.GetString("ConfigInvalidClassFactoryValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance is not a valid configurable value of type &apos;{0}&apos;..
        /// </summary>
        internal static string ConfigInvalidClassInstanceValue {
            get {
                return ResourceManager.GetString("ConfigInvalidClassInstanceValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for the client credentials type. The type &apos;{0}&apos; does not derive from the appropriate base class &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidClientCredentialsType {
            get {
                return ResourceManager.GetString("ConfigInvalidClientCredentialsType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add the behavior extension &apos;{0}&apos; to the common endpoint behavior because it does not implement &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidCommonEndpointBehaviorType {
            get {
                return ResourceManager.GetString("ConfigInvalidCommonEndpointBehaviorType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add the behavior extension &apos;{0}&apos; to the common service behavior because it does not implement &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidCommonServiceBehaviorType {
            get {
                return ResourceManager.GetString("ConfigInvalidCommonServiceBehaviorType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid encoding string for System.Text.Encoding.GetEncoding(string)..
        /// </summary>
        internal static string ConfigInvalidEncodingValue {
            get {
                return ResourceManager.GetString("ConfigInvalidEncodingValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no endpoint behavior named &apos;{0}&apos;..
        /// </summary>
        internal static string ConfigInvalidEndpointBehavior {
            get {
                return ResourceManager.GetString("ConfigInvalidEndpointBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add the &apos;{0}&apos; behavior extension to &apos;{1}&apos; endpoint behavior because the underlying behavior type does not implement the IEndpointBehavior interface..
        /// </summary>
        internal static string ConfigInvalidEndpointBehaviorType {
            get {
                return ResourceManager.GetString("ConfigInvalidEndpointBehaviorType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint at {1} does not have a configured endpoint named &apos;{0}&apos;. This is an invalid value for {2}..
        /// </summary>
        internal static string ConfigInvalidEndpointName {
            get {
                return ResourceManager.GetString("ConfigInvalidEndpointName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid element in configuration. The extension &apos;{0}&apos; does not derive from correct extension base type &apos;{1}&apos;. .
        /// </summary>
        internal static string ConfigInvalidExtensionElement {
            get {
                return ResourceManager.GetString("ConfigInvalidExtensionElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid element in configuration. The extension name &apos;{0}&apos; is not registered in the collection at system.serviceModel/extensions/{1}. .
        /// </summary>
        internal static string ConfigInvalidExtensionElementName {
            get {
                return ResourceManager.GetString("ConfigInvalidExtensionElementName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; type must derive from {1} to be used in the {2} collection..
        /// </summary>
        internal static string ConfigInvalidExtensionType {
            get {
                return ResourceManager.GetString("ConfigInvalidExtensionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element {0} requires a key of type &apos;{1}&apos;. Type of the key passed in: &apos;{2}&apos;..
        /// </summary>
        internal static string ConfigInvalidKeyType {
            get {
                return ResourceManager.GetString("ConfigInvalidKeyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid reliable messaging version.  Valid values are &apos;WSReliableMessagingFebruary2005&apos; and &apos;WSReliableMessaging11&apos;..
        /// </summary>
        internal static string ConfigInvalidReliableMessagingVersionValue {
            get {
                return ResourceManager.GetString("ConfigInvalidReliableMessagingVersionValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for the saml serializer type. The type &apos;{0}&apos; does not derive from the appropriate base class: &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidSamlSerializerType {
            get {
                return ResourceManager.GetString("ConfigInvalidSamlSerializerType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid binding path.  There is no binding registered with the configuration path &apos;{0}&apos;..
        /// </summary>
        internal static string ConfigInvalidSection {
            get {
                return ResourceManager.GetString("ConfigInvalidSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for the  security state encoder type. The type &apos;{0}&apos; does not derive from the appropriate base class &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidSecurityStateEncoderType {
            get {
                return ResourceManager.GetString("ConfigInvalidSecurityStateEncoderType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for serviceAuthenticationManagerType. The serviceAuthenticationManagerType &apos;{0}&apos; does not derive from &apos;{1}&apos;. .
        /// </summary>
        internal static string ConfigInvalidServiceAuthenticationManagerType {
            get {
                return ResourceManager.GetString("ConfigInvalidServiceAuthenticationManagerType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for serviceAuthorizationManagerType. The serviceAuthorizationManagerType &apos;{0}&apos; does not derive from &apos;{1}&apos;. .
        /// </summary>
        internal static string ConfigInvalidServiceAuthorizationManagerType {
            get {
                return ResourceManager.GetString("ConfigInvalidServiceAuthorizationManagerType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no service behavior named &apos;{0}&apos;..
        /// </summary>
        internal static string ConfigInvalidServiceBehavior {
            get {
                return ResourceManager.GetString("ConfigInvalidServiceBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add the behavior extension &apos;{0}&apos; to the service behavior named &apos;{1}&apos; because the underlying behavior type does not implement the IServiceBehavior interface..
        /// </summary>
        internal static string ConfigInvalidServiceBehaviorType {
            get {
                return ResourceManager.GetString("ConfigInvalidServiceBehaviorType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for the service credentials type. The type &apos;{0}&apos; does not derive from the appropriate base class &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidServiceCredentialsType {
            get {
                return ResourceManager.GetString("ConfigInvalidServiceCredentialsType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start must be between 0 and {0}. Value passed in is {1}..
        /// </summary>
        internal static string ConfigInvalidStartValue {
            get {
                return ResourceManager.GetString("ConfigInvalidStartValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid transaction protocol.  Valid values are &apos;OleTransactions&apos;, &apos;WSAtomicTransactionOctober2004&apos;, and &apos;WSAtomicTransaction11&apos;..
        /// </summary>
        internal static string ConfigInvalidTransactionFlowProtocolValue {
            get {
                return ResourceManager.GetString("ConfigInvalidTransactionFlowProtocolValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; registered for extension &apos;{1}&apos; could not be loaded..
        /// </summary>
        internal static string ConfigInvalidType {
            get {
                return ResourceManager.GetString("ConfigInvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid binding type for binding extension configuration object.  This binding extension manages configuration of binding type &apos;{0}&apos; and cannot act upon type &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidTypeForBinding {
            get {
                return ResourceManager.GetString("ConfigInvalidTypeForBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid binding element type for binding element extension configuration object.  This binding element extension manages configuration of binding element type &apos;{0}&apos; and cannot act upon type &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidTypeForBindingElement {
            get {
                return ResourceManager.GetString("ConfigInvalidTypeForBindingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid endpoint type for endpoint extension configuration object.  This endpoint extension manages configuration of endpoint type &apos;{0}&apos; and cannot act upon type &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidTypeForEndpoint {
            get {
                return ResourceManager.GetString("ConfigInvalidTypeForEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for the username password validator type. The type &apos;{0}&apos; does not derive from the appropriate base class &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigInvalidUserNamePasswordValidatorType {
            get {
                return ResourceManager.GetString("ConfigInvalidUserNamePasswordValidatorType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No elements matching the key &apos;{0}&apos; were found in the configuration element collection..
        /// </summary>
        internal static string ConfigKeyNotFoundInElementCollection {
            get {
                return ResourceManager.GetString("ConfigKeyNotFoundInElementCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key does not match the indexer key. When setting the value of a specific index, the key of the desired value must match the index at which it is being set. Key on element (expected value): {0}. Key provided to indexer: {1}..
        /// </summary>
        internal static string ConfigKeysDoNotMatch {
            get {
                return ResourceManager.GetString("ConfigKeysDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add the message encoding element &apos;{0}&apos;. Another message encoding element already exists in the binding &apos;{1}&apos;. There can only be one message encoding element for each binding..
        /// </summary>
        internal static string ConfigMessageEncodingAlreadyInBinding {
            get {
                return ResourceManager.GetString("ConfigMessageEncodingAlreadyInBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CreateServiceEndpoint method in type &apos;{0}&apos; returned null instead of an instance of type &apos;{1}&apos;..
        /// </summary>
        internal static string ConfigNoEndpointCreated {
            get {
                return ResourceManager.GetString("ConfigNoEndpointCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the extension collection associated with extension of type &apos;{0}&apos;..
        /// </summary>
        internal static string ConfigNoExtensionCollectionAssociatedWithType {
            get {
                return ResourceManager.GetString("ConfigNoExtensionCollectionAssociatedWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to null.
        /// </summary>
        internal static string ConfigNull {
            get {
                return ResourceManager.GetString("ConfigNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Federated issuer address cannot be null when specifying an issuer binding..
        /// </summary>
        internal static string ConfigNullIssuerAddress {
            get {
                return ResourceManager.GetString("ConfigNullIssuerAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration is read only..
        /// </summary>
        internal static string ConfigReadOnly {
            get {
                return ResourceManager.GetString("ConfigReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; configuration section cannot be created. The machine.config file is missing information. Verify that this configuration section is properly registered and that you have correctly spelled the section name. For Windows Communication Foundation sections, run ServiceModelReg.exe -i to fix this error..
        /// </summary>
        internal static string ConfigSectionNotFound {
            get {
                return ResourceManager.GetString("ConfigSectionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add stream upgrade element &apos;{0}&apos;. Another stream upgrade element already exists in the binding &apos;{1}&apos;. There can only be one stream update element per binding..
        /// </summary>
        internal static string ConfigStreamUpgradeElementAlreadyInBinding {
            get {
                return ResourceManager.GetString("ConfigStreamUpgradeElementAlreadyInBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add the transport element &apos;{0}&apos;. Another transport element already exists in the binding &apos;{1}&apos;. There can only be one transport element for each binding..
        /// </summary>
        internal static string ConfigTransportAlreadyInBinding {
            get {
                return ResourceManager.GetString("ConfigTransportAlreadyInBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl schema that was used to create this configuration file contained a &apos;RequireIssuerSerialReference&apos; assertion for a X509Token.  This can not be represented in configuration, you will need to programatically adjust the appropriate X509SecurityTokenParameters.X509KeyIdentifierClauseType to X509KeyIdentifierClauseType.IssuerSerial.  The default of X509KeyIdentifierClauseType.Thumbprint will be used, which may cause interop issues..
        /// </summary>
        internal static string ConfigurationSchemaContainsX509IssuerSerialReference {
            get {
                return ResourceManager.GetString("ConfigurationSchemaContainsX509IssuerSerialReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration schema is insufficient to describe the non-standard configuration of the following security binding element: .
        /// </summary>
        internal static string ConfigurationSchemaInsuffientForSecurityBindingElementInstance {
            get {
                return ResourceManager.GetString("ConfigurationSchemaInsuffientForSecurityBindingElementInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XmlElement must contain XML content..
        /// </summary>
        internal static string ConfigXmlElementMustBeSet {
            get {
                return ResourceManager.GetString("ConfigXmlElementMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XPathFilter for an XPathFilterElement cannot be null..
        /// </summary>
        internal static string ConfigXPathFilterIsNull {
            get {
                return ResourceManager.GetString("ConfigXPathFilterIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter element body must not be empty..
        /// </summary>
        internal static string ConfigXPathFilterMustNotBeEmpty {
            get {
                return ResourceManager.GetString("ConfigXPathFilterMustNotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace prefix &apos;{0}&apos; referenced in XPath expression was not found..
        /// </summary>
        internal static string ConfigXPathNamespacePrefixNotFound {
            get {
                return ResourceManager.GetString("ConfigXPathNamespacePrefixNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent conflicting requests to create a reliable session. The conflicting requests have inconsistent filter criteria such as address or action. The reliable session has been faulted..
        /// </summary>
        internal static string ConflictingAddress {
            get {
                return ResourceManager.GetString("ConflictingAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent conflicting requests to create a reliable session. The remote endpoint requested both a one way and a two way session. The reliable session has been faulted..
        /// </summary>
        internal static string ConflictingOffer {
            get {
                return ResourceManager.GetString("ConflictingOffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Type {0} was sent to a service expecting {1}.  The client and service bindings may be mismatched..
        /// </summary>
        internal static string ContentTypeMismatch {
            get {
                return ResourceManager.GetString("ContentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context-id={0} (generation-id={1}) is already registered with SecurityContextSecurityTokenAuthenticator..
        /// </summary>
        internal static string ContextAlreadyRegistered {
            get {
                return ResourceManager.GetString("ContextAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context-id={0} (no key generation-id) is already registered with SecurityContextSecurityTokenAuthenticator..
        /// </summary>
        internal static string ContextAlreadyRegisteredNoKeyGeneration {
            get {
                return ResourceManager.GetString("ContextAlreadyRegisteredNoKeyGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElement cannot provide channel factory for the requested channel shape {0}..
        /// </summary>
        internal static string ContextBindingElementCannotProvideChannelFactory {
            get {
                return ResourceManager.GetString("ContextBindingElementCannotProvideChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElement cannot provide channel listener for the requested channel shape {0}..
        /// </summary>
        internal static string ContextBindingElementCannotProvideChannelListener {
            get {
                return ResourceManager.GetString("ContextBindingElementCannotProvideChannelListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EndpointAddress: {0}, Via:{1}.
        /// </summary>
        internal static string ContextChannelFactoryChannelCreatedDetail {
            get {
                return ResourceManager.GetString("ContextChannelFactoryChannelCreatedDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context cached at the channel cannot be set or retrieved when the context management is disabled at the channel layer. Ensure context channel property &apos;IContextManager.Enabled&apos; is set to true..
        /// </summary>
        internal static string ContextManagementNotEnabled {
            get {
                return ResourceManager.GetString("ContextManagementNotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no SecurityContextSecurityToken with context-id={0} (generation-id={1}) registered with SecurityContextSecurityTokenAuthenticator..
        /// </summary>
        internal static string ContextNotPresent {
            get {
                return ResourceManager.GetString("ContextNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no SecurityContextSecurityToken with context-id={0} (no key generation-id) registered with SecurityContextSecurityTokenAuthenticator..
        /// </summary>
        internal static string ContextNotPresentNoKeyGeneration {
            get {
                return ResourceManager.GetString("ContextNotPresentNoKeyGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Address, Binding and Contract keywords are required..
        /// </summary>
        internal static string ContractBindingAddressCannotBeNull {
            get {
                return ResourceManager.GetString("ContractBindingAddressCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract &apos;{0}&apos; is not self-consistent -- it has one or more IsTerminating or non-IsInitiating operations, but it does not have the SessionMode property set to SessionMode.Required.  The IsInitiating and IsTerminating attributes can only be used in the context of a session..
        /// </summary>
        internal static string ContractIsNotSelfConsistentItHasOneOrMore2 {
            get {
                return ResourceManager.GetString("ContractIsNotSelfConsistentItHasOneOrMore2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation contract &apos;{0}&apos; is not self-consistent. When the &apos;{1}&apos; is set to &apos;{2}&apos;, both &apos;{3}&apos; and &apos;{4}&apos; properties must be true, and the operation must not have any input parameters..
        /// </summary>
        internal static string ContractIsNotSelfConsistentWhenIsSessionOpenNotificationEnabled {
            get {
                return ResourceManager.GetString("ContractIsNotSelfConsistentWhenIsSessionOpenNotificationEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract type name in the configuration file was not in the form of an interface identifier. (The string is &quot;{0}&quot;.).
        /// </summary>
        internal static string ContractTypeNotAnIID {
            get {
                return ResourceManager.GetString("ContractTypeNotAnIID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; can only be used with HTTP (or HTTPS) transport..
        /// </summary>
        internal static string CookieContainerBindingElementNeedsHttp {
            get {
                return ResourceManager.GetString("CookieContainerBindingElementNeedsHttp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to copy the HTTP header &apos;{0}&apos; with value &apos;{1}&apos; to &apos;{2}&apos;..
        /// </summary>
        internal static string CopyHttpHeaderFailed {
            get {
                return ResourceManager.GetString("CopyHttpHeaderFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no namespace binding for prefix &apos;{0}&apos; in scope..
        /// </summary>
        internal static string CouldNotFindNamespaceForPrefix {
            get {
                return ResourceManager.GetString("CouldNotFindNamespaceForPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message with action {0} could not be parsed..
        /// </summary>
        internal static string CouldNotParseWithAction {
            get {
                return ResourceManager.GetString("CouldNotParseWithAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channel type &apos;{1}&apos; was requested, but Binding &apos;{0}&apos; doesn&apos;t support it or isn&apos;t configured properly to support it..
        /// </summary>
        internal static string CouldnTCreateChannelForChannelType2 {
            get {
                return ResourceManager.GetString("CouldnTCreateChannelForChannelType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channel requirements cannot be met by the ChannelFactory for Binding &apos;{0}&apos; since the contract requires support for one of these channel types &apos;{1}&apos; but the binding doesn&apos;t support any of them..
        /// </summary>
        internal static string CouldnTCreateChannelForType2 {
            get {
                return ResourceManager.GetString("CouldnTCreateChannelForType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t find required attribute of type {0} on {1}..
        /// </summary>
        internal static string couldnTFindRequiredAttributeOfTypeOn2 {
            get {
                return ResourceManager.GetString("couldnTFindRequiredAttributeOfTypeOn2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creation time must be before expiration time..
        /// </summary>
        internal static string CreationTimeUtcIsAfterExpiryTime {
            get {
                return ResourceManager.GetString("CreationTimeUtcIsAfterExpiryTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NTLM authentication scheme was specified, but the target credential does not allow NTLM..
        /// </summary>
        internal static string CredentialDisallowsNtlm {
            get {
                return ResourceManager.GetString("CredentialDisallowsNtlm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to create a reliable session has been refused by the RM Destination. {0} The channel could not be opened..
        /// </summary>
        internal static string CSRefused {
            get {
                return ResourceManager.GetString("CSRefused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint processing requests to create a reliable session only supports sessions in which the AcksTo Uri and the Endpoint Uri are the same..
        /// </summary>
        internal static string CSRefusedAcksToMustEqualEndpoint {
            get {
                return ResourceManager.GetString("CSRefusedAcksToMustEqualEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint processing requests to create a reliable session only supports sessions in which the AcksTo Uri and the ReplyTo Uri are the same..
        /// </summary>
        internal static string CSRefusedAcksToMustEqualReplyTo {
            get {
                return ResourceManager.GetString("CSRefusedAcksToMustEqualReplyTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint at {0} processes duplex sessions. The create sequence request must contain an offer for a return sequence. This is likely caused by a binding mismatch..
        /// </summary>
        internal static string CSRefusedDuplexNoOffer {
            get {
                return ResourceManager.GetString("CSRefusedDuplexNoOffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint at {0} processes input sessions. The create sequence request must not contain an offer for a return sequence. This is likely caused by a binding mismatch..
        /// </summary>
        internal static string CSRefusedInputOffer {
            get {
                return ResourceManager.GetString("CSRefusedInputOffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to create a reliable session contains an invalid wsrm:IncompleteSequenceBehavior value. This is a WS-ReliableMessaging protocol violation..
        /// </summary>
        internal static string CSRefusedInvalidIncompleteSequenceBehavior {
            get {
                return ResourceManager.GetString("CSRefusedInvalidIncompleteSequenceBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to create a reliable session contains the wsse:SecurityTokenReference but does not carry a wsrm:UsesSequenceSTR header. This is a WS-ReliableMessaging protocol violation. The session could not be created..
        /// </summary>
        internal static string CSRefusedNoSTRWSSecurity {
            get {
                return ResourceManager.GetString("CSRefusedNoSTRWSSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint at {0} processes reply sessions. The create sequence request must contain an offer for a return sequence. This is likely caused by a binding mismatch..
        /// </summary>
        internal static string CSRefusedReplyNoOffer {
            get {
                return ResourceManager.GetString("CSRefusedReplyNoOffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM Destination requires the WS-SecureConversation protocol in the binding. This is likely caused by a binding mismatch..
        /// </summary>
        internal static string CSRefusedRequiredSecurityElementMissing {
            get {
                return ResourceManager.GetString("CSRefusedRequiredSecurityElementMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint processing requests to create a reliable session does not support sessions that use SSL. This is likely caused by a binding mismatch. The session could not be created..
        /// </summary>
        internal static string CSRefusedSSLNotSupported {
            get {
                return ResourceManager.GetString("CSRefusedSSLNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to create a reliable session carries a wsrm:UsesSequenceSTR header, but does not contain the wsse:SecurityTokenReference. This is a WS-ReliableMessaging protocol violation. The session could not be created..
        /// </summary>
        internal static string CSRefusedSTRNoWSSecurity {
            get {
                return ResourceManager.GetString("CSRefusedSTRNoWSSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message is not a valid SOAP message. The body contains more than 1 root element..
        /// </summary>
        internal static string CSRefusedUnexpectedElementAtEndOfCSMessage {
            get {
                return ResourceManager.GetString("CSRefusedUnexpectedElementAtEndOfCSMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint replied to a request for a two way session with an offer for a one way session. This is likely caused by a binding mismatch. The channel could not be opened..
        /// </summary>
        internal static string CSResponseOfferRejected {
            get {
                return ResourceManager.GetString("CSResponseOfferRejected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client requested creation of a two way session. A one way session was created. The session cannot continue without as a one way session. This is likely caused by a binding mismatch..
        /// </summary>
        internal static string CSResponseOfferRejectedReason {
            get {
                return ResourceManager.GetString("CSResponseOfferRejectedReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response to the request to create a reliable session contains an invalid wsrm:IncompleteSequenceBehavior value. This is a WS-ReliableMessaging protocol violation..
        /// </summary>
        internal static string CSResponseWithInvalidIncompleteSequenceBehavior {
            get {
                return ResourceManager.GetString("CSResponseWithInvalidIncompleteSequenceBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint replied to a request for a one way session with an offer for a two way session. This is a WS-ReliableMessaging protocol violation. The channel could not be opened..
        /// </summary>
        internal static string CSResponseWithOffer {
            get {
                return ResourceManager.GetString("CSResponseWithOffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A return sequence was not offered by the create sequence request. The create sequence response cannot accept a return sequence..
        /// </summary>
        internal static string CSResponseWithOfferReason {
            get {
                return ResourceManager.GetString("CSResponseWithOfferReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint replied to a request for a two way session with an offer for a one way session. This is a WS-ReliableMessaging protocol violation. The channel could not be opened..
        /// </summary>
        internal static string CSResponseWithoutOffer {
            get {
                return ResourceManager.GetString("CSResponseWithoutOffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A return sequence was offered by the create sequence request but the create sequence response did not accept this sequence..
        /// </summary>
        internal static string CSResponseWithoutOfferReason {
            get {
                return ResourceManager.GetString("CSResponseWithoutOfferReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supporting token in the renew message has a different generation &apos;{0}&apos; than the current session token&apos;s generation &apos;{1}&apos;..
        /// </summary>
        internal static string CurrentSessionTokenNotRenewed {
            get {
                return ResourceManager.GetString("CurrentSessionTokenNotRenewed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding &apos;{0}&apos; lacks a TransportBindingElement.  Every binding must have a binding element that derives from TransportBindingElement. This binding element must appear last in the BindingElementCollection..
        /// </summary>
        internal static string CustomBindingRequiresTransport {
            get {
                return ResourceManager.GetString("CustomBindingRequiresTransport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The custom crypto algorithm &apos;{0}&apos; obtained using CryptoConfig is not a valid or supported asymmetric signature algorithm..
        /// </summary>
        internal static string CustomCryptoAlgorithmIsNotValidAsymmetricSignature {
            get {
                return ResourceManager.GetString("CustomCryptoAlgorithmIsNotValidAsymmetricSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The custom crypto algorithm &apos;{0}&apos; obtained using CryptoConfig is not a valid or supported hash algorithm..
        /// </summary>
        internal static string CustomCryptoAlgorithmIsNotValidHashAlgorithm {
            get {
                return ResourceManager.GetString("CustomCryptoAlgorithmIsNotValidHashAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to decrypt an encrypted data block. Please verify that the encryption algorithm and keys used by the sender and receiver match..
        /// </summary>
        internal static string DecryptionFailed {
            get {
                return ResourceManager.GetString("DecryptionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Default).
        /// </summary>
        internal static string Default {
            get {
                return ResourceManager.GetString("Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delayed security application has already been completed..
        /// </summary>
        internal static string DelayedSecurityApplicationAlreadyCompleted {
            get {
                return ResourceManager.GetString("DelayedSecurityApplicationAlreadyCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; list created by the Func &apos;{1}&apos; is invalid because it contains one or more null items..
        /// </summary>
        internal static string DelegatingHandlerArrayFromFuncContainsNullItem {
            get {
                return ResourceManager.GetString("DelegatingHandlerArrayFromFuncContainsNullItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; list is invalid because the property &apos;{1}&apos; of &apos;{2}&apos; is not null..
        /// </summary>
        internal static string DelegatingHandlerArrayHasNonNullInnerHandler {
            get {
                return ResourceManager.GetString("DelegatingHandlerArrayHasNonNullInnerHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-RM policy under the namespace {0} requires the wsrmp:ExactlyOnce, wsrmp:AtLeastOnce, or wsrmp:AtMostOnce assertion. The {1} element under the {2} namespace was found..
        /// </summary>
        internal static string DeliveryAssuranceRequired {
            get {
                return ResourceManager.GetString("DeliveryAssuranceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-RM policy under the namespace {0} requires the wsrmp:ExactlyOnce, wsrmp:AtLeastOnce, or wsrmp:AtMostOnce assertion. Nothing was found..
        /// </summary>
        internal static string DeliveryAssuranceRequiredNothingFound {
            get {
                return ResourceManager.GetString("DeliveryAssuranceRequiredNothingFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Derived Key Token cannot derive key from the secret..
        /// </summary>
        internal static string DerivedKeyCannotDeriveFromSecret {
            get {
                return ResourceManager.GetString("DerivedKeyCannotDeriveFromSecret", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received derived key token has a invalid generation value specified. Value: {0}. The value should be greater than or equal to zero..
        /// </summary>
        internal static string DerivedKeyInvalidGenerationSpecified {
            get {
                return ResourceManager.GetString("DerivedKeyInvalidGenerationSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received derived key token has a invalid offset value specified. Value: {0}. The value should be greater than or equal to zero..
        /// </summary>
        internal static string DerivedKeyInvalidOffsetSpecified {
            get {
                return ResourceManager.GetString("DerivedKeyInvalidOffsetSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Implicit derived key clause &apos;{0}&apos; specifies a derivation key length ({1}) which exceeds the allowed maximum length ({2})..
        /// </summary>
        internal static string DerivedKeyLengthSpecifiedInImplicitDerivedKeyClauseTooLong {
            get {
                return ResourceManager.GetString("DerivedKeyLengthSpecifiedInImplicitDerivedKeyClauseTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DerivedKey length ({0}) exceeds the allowed settings ({1})..
        /// </summary>
        internal static string DerivedKeyLengthTooLong {
            get {
                return ResourceManager.GetString("DerivedKeyLengthTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of derived keys in the message has exceeded the maximum allowed number &apos;{0}&apos;..
        /// </summary>
        internal static string DerivedKeyLimitExceeded {
            get {
                return ResourceManager.GetString("DerivedKeyLimitExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The derived key has not been computed for the security token..
        /// </summary>
        internal static string DerivedKeyNotInitialized {
            get {
                return ResourceManager.GetString("DerivedKeyNotInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both offset and generation cannot be specified for Derived Key Token..
        /// </summary>
        internal static string DerivedKeyPosAndGenBothSpecified {
            get {
                return ResourceManager.GetString("DerivedKeyPosAndGenBothSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either offset or generation must be specified for Derived Key Token..
        /// </summary>
        internal static string DerivedKeyPosAndGenNotSpecified {
            get {
                return ResourceManager.GetString("DerivedKeyPosAndGenNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The derived key&apos;s generation (&apos;{0}&apos;) and length (&apos;{1}&apos; bytes) result in a key derivation offset that is greater than the maximum offset (&apos;{2}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenGenerationAndLengthTooHigh {
            get {
                return ResourceManager.GetString("DerivedKeyTokenGenerationAndLengthTooHigh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length (&apos;{0}&apos; bytes) of the derived key&apos;s Label exceeds the maximum length (&apos;{1}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenLabelTooLong {
            get {
                return ResourceManager.GetString("DerivedKeyTokenLabelTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length (&apos;{0}&apos; bytes) of the derived key&apos;s Nonce exceeds the maximum length (&apos;{1}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenNonceTooLong {
            get {
                return ResourceManager.GetString("DerivedKeyTokenNonceTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The derived key&apos;s Offset (&apos;{0}&apos; bytes) exceeds the maximum offset (&apos;{1}&apos; bytes) allowed..
        /// </summary>
        internal static string DerivedKeyTokenOffsetTooHigh {
            get {
                return ResourceManager.GetString("DerivedKeyTokenOffsetTooHigh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DerivedKeyToken requires a reference to a token..
        /// </summary>
        internal static string DerivedKeyTokenRequiresTokenReference {
            get {
                return ResourceManager.GetString("DerivedKeyTokenRequiresTokenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The impersonation level &apos;{0}&apos; was specified, yet HTTP Digest authentication can only support &apos;Impersonation&apos; level when used with an explicit credential..
        /// </summary>
        internal static string DigestExplicitCredsImpersonationLevel {
            get {
                return ResourceManager.GetString("DigestExplicitCredsImpersonationLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DispatchOperation &apos;{0}&apos; requires Formatter, since DeserializeRequest and SerializeReply are not both false..
        /// </summary>
        internal static string DispatchRuntimeRequiresFormatter0 {
            get {
                return ResourceManager.GetString("DispatchRuntimeRequiresFormatter0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity check failed for incoming message. The expected DNS identity of the remote endpoint was &apos;{0}&apos; but the remote endpoint provided DNS claim &apos;{1}&apos;. If this is a legitimate remote endpoint, you can fix the problem by explicitly specifying DNS identity &apos;{1}&apos; as the Identity property of EndpointAddress when creating channel proxy. .
        /// </summary>
        internal static string DnsIdentityCheckFailedForIncomingMessage {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForIncomingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Identity check failed for the incoming message. The remote endpoint did not provide a domain name system (DNS) claim and therefore did not satisfied DNS identity &apos;{0}&apos;. This may be caused by lack of DNS or CN name in the remote endpoint X.509 certificate&apos;s distinguished name..
        /// </summary>
        internal static string DnsIdentityCheckFailedForIncomingMessageLackOfDnsClaim {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForIncomingMessageLackOfDnsClaim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity check failed for outgoing message. The expected DNS identity of the remote endpoint was &apos;{0}&apos; but the remote endpoint provided DNS claim &apos;{1}&apos;. If this is a legitimate remote endpoint, you can fix the problem by explicitly specifying DNS identity &apos;{1}&apos; as the Identity property of EndpointAddress when creating channel proxy. .
        /// </summary>
        internal static string DnsIdentityCheckFailedForOutgoingMessage {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForOutgoingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Identity check failed for the outgoing message. The remote endpoint did not provide a domain name system (DNS) claim and therefore did not satisfied DNS identity &apos;{0}&apos;. This may be caused by lack of DNS or CN name in the remote endpoint X.509 certificate&apos;s distinguished name..
        /// </summary>
        internal static string DnsIdentityCheckFailedForOutgoingMessageLackOfDnsClaim {
            get {
                return ResourceManager.GetString("DnsIdentityCheckFailedForOutgoingMessageLackOfDnsClaim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No DNS entries exist for host {0}..
        /// </summary>
        internal static string DnsResolveFailed {
            get {
                return ResourceManager.GetString("DnsResolveFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The document formatter must be configured with a document..
        /// </summary>
        internal static string DocumentFormatterDoesNotHaveDocument {
            get {
                return ResourceManager.GetString("DocumentFormatterDoesNotHaveDocument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot map Windows user &apos;{0}&apos; to a UserPrincipalName that can be used for S4U impersonation..
        /// </summary>
        internal static string DownlevelNameCannotMapToUpn {
            get {
                return ResourceManager.GetString("DownlevelNameCannotMapToUpn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplex channel to {0} was aborted during the open process..
        /// </summary>
        internal static string DuplexChannelAbortedDuringOpen {
            get {
                return ResourceManager.GetString("DuplexChannelAbortedDuringOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No duplex session listener was listening at {0}. This could be due to an incorrect via set on the client or a binding mismatch..
        /// </summary>
        internal static string DuplexSessionListenerNotFound {
            get {
                return ResourceManager.GetString("DuplexSessionListenerNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value could not be added to the collection, as the collection already contains an item of the same type: &apos;{0}&apos;. This collection only supports one instance of each type..
        /// </summary>
        internal static string DuplicateBehavior1 {
            get {
                return ResourceManager.GetString("DuplicateBehavior1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate contract XmlQualifiedNames are not supported.
        ///Another ContractDescription with the Name: {0} and Namespace: {1} has already been exported..
        /// </summary>
        internal static string DuplicateContractQNameNameOnExport {
            get {
                return ResourceManager.GetString("DuplicateContractQNameNameOnExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuedSecurityTokenProvider cannot support the FederatedClientCredentialsParameters. The FederatedClientCredentialsParameters has already provided the &apos;{0}&apos; parameter..
        /// </summary>
        internal static string DuplicateFederatedClientCredentialsParameters {
            get {
                return ResourceManager.GetString("DuplicateFederatedClientCredentialsParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; id occurred twice in the message that is supplied for verification..
        /// </summary>
        internal static string DuplicateIdInMessageToBeVerified {
            get {
                return ResourceManager.GetString("DuplicateIdInMessageToBeVerified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property with the name &apos;{0}&apos; already exists..
        /// </summary>
        internal static string DuplicateMessageProperty {
            get {
                return ResourceManager.GetString("DuplicateMessageProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A peer registration with the service address {0} already exists..
        /// </summary>
        internal static string DuplicatePeerRegistration {
            get {
                return ResourceManager.GetString("DuplicatePeerRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy document was ignored because a policy expression with that ID has already been imported.
        ///Policy ID:{0}.
        /// </summary>
        internal static string DuplicatePolicyDocumentSkipped {
            get {
                return ResourceManager.GetString("DuplicatePolicyDocumentSkipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy expression was ignored because another policy expression with that ID has already been read in this document.
        ///XPath:{0}.
        /// </summary>
        internal static string DuplicatePolicyInWsdlSkipped {
            get {
                return ResourceManager.GetString("DuplicatePolicyInWsdlSkipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A registration already exists for URI &apos;{0}&apos;..
        /// </summary>
        internal static string DuplicateRegistration {
            get {
                return ResourceManager.GetString("DuplicateRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one Timestamp element was present in security header..
        /// </summary>
        internal static string DuplicateTimestampInSecurityHeader {
            get {
                return ResourceManager.GetString("DuplicateTimestampInSecurityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not duplicate the token (error=0x{0:X})..
        /// </summary>
        internal static string DuplicateTokenExFailed {
            get {
                return ResourceManager.GetString("DuplicateTokenExFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent a TerminateSequence protocol message before fully acknowledging all messages in the reply sequence. This is a violation of the reliable request reply protocol. The reliable session was faulted..
        /// </summary>
        internal static string EarlyRequestTerminateSequence {
            get {
                return ResourceManager.GetString("EarlyRequestTerminateSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint has closed the underlying secure session before the reliable session fully completed. The reliable session was faulted..
        /// </summary>
        internal static string EarlySecurityClose {
            get {
                return ResourceManager.GetString("EarlySecurityClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying secure session has faulted before the reliable session fully completed. The reliable session was faulted..
        /// </summary>
        internal static string EarlySecurityFaulted {
            get {
                return ResourceManager.GetString("EarlySecurityFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint has errantly sent a TerminateSequence protocol message before the sequence finished..
        /// </summary>
        internal static string EarlyTerminateSequence {
            get {
                return ResourceManager.GetString("EarlyTerminateSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The valid from time is greater than the valid to time..
        /// </summary>
        internal static string EffectiveGreaterThanExpiration {
            get {
                return ResourceManager.GetString("EffectiveGreaterThanExpiration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}:{1} element requires a {2}:{3} child element but has the {4} child element under the {5} namespace..
        /// </summary>
        internal static string ElementFound {
            get {
                return ResourceManager.GetString("ElementFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}:{1} element requires a {2}:{3} child element but has no child elements..
        /// </summary>
        internal static string ElementRequired {
            get {
                return ResourceManager.GetString("ElementRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element to sign must have id..
        /// </summary>
        internal static string ElementToSignMustHaveId {
            get {
                return ResourceManager.GetString("ElementToSignMustHaveId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty value was found for the required base-64 attribute name &apos;{0}&apos;, namespace &apos;{1}&apos;..
        /// </summary>
        internal static string EmptyBase64Attribute {
            get {
                return ResourceManager.GetString("EmptyBase64Attribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element {0} cannot be empty..
        /// </summary>
        internal static string EmptyXmlElementError {
            get {
                return ResourceManager.GetString("EmptyXmlElementError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process contentType..
        /// </summary>
        internal static string EncoderBadContentType {
            get {
                return ResourceManager.GetString("EncoderBadContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The envelope version of the incoming message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the expected messages..
        /// </summary>
        internal static string EncoderEnvelopeVersionMismatch {
            get {
                return ResourceManager.GetString("EncoderEnvelopeVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message version of the outgoing message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the message..
        /// </summary>
        internal static string EncoderMessageVersionMismatch {
            get {
                return ResourceManager.GetString("EncoderMessageVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized charSet &apos;{0}&apos; in contentType..
        /// </summary>
        internal static string EncoderUnrecognizedCharSet {
            get {
                return ResourceManager.GetString("EncoderUnrecognizedCharSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized contentType ({0}). Expected: {1}..
        /// </summary>
        internal static string EncoderUnrecognizedContentType {
            get {
                return ResourceManager.GetString("EncoderUnrecognizedContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to obtain XmlDictionaryReaderQuotas from the Binding. If you have specified a custom EncodingBindingElement, verify that the EncodingBindingElement can handle XmlDictionaryReaderQuotas in its GetProperty&lt;T&gt;() method..
        /// </summary>
        internal static string EncodingBindingElementDoesNotHandleReaderQuotas {
            get {
                return ResourceManager.GetString("EncodingBindingElementDoesNotHandleReaderQuotas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Encrypted Header and the Security Header &apos;{0}&apos; attribute did not match. Encrypted Header: {1}. Security Header: {2}..
        /// </summary>
        internal static string EncryptedHeaderAttributeMismatch {
            get {
                return ResourceManager.GetString("EncryptedHeaderAttributeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Header (&apos;{0}&apos;, &apos;{1}&apos;) was encrypted but not signed. All encrypted headers outside the security header should be signed..
        /// </summary>
        internal static string EncryptedHeaderNotSigned {
            get {
                return ResourceManager.GetString("EncryptedHeaderNotSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An encrypted header must have an id..
        /// </summary>
        internal static string EncryptedHeaderXmlMustHaveId {
            get {
                return ResourceManager.GetString("EncryptedHeaderXmlMustHaveId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EncryptedKey clause was not wrapped with the required encryption token &apos;{0}&apos;..
        /// </summary>
        internal static string EncryptedKeyWasNotEncryptedWithTheRequiredEncryptingToken {
            get {
                return ResourceManager.GetString("EncryptedKeyWasNotEncryptedWithTheRequiredEncryptingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EncryptedKey with ReferenceList is not allowed according to the current settings..
        /// </summary>
        internal static string EncryptedKeyWithReferenceListNotAllowed {
            get {
                return ResourceManager.GetString("EncryptedKeyWithReferenceListNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encryption method is missing in encrypted data..
        /// </summary>
        internal static string EncryptionMethodMissingInEncryptedData {
            get {
                return ResourceManager.GetString("EncryptionMethodMissingInEncryptedData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encryption not expected for this message..
        /// </summary>
        internal static string EncryptionNotExpected {
            get {
                return ResourceManager.GetString("EncryptionNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using the IAsyncResult design pattern, the End method cannot be decorated with OperationContractAttribute. Only the corresponding Begin method can be decorated with OperationContractAttribute; that attribute will apply to the Begin-End pair of methods. Method &apos;{0}&apos; in type &apos;{1}&apos; violates this..
        /// </summary>
        internal static string EndMethodsCannotBeDecoratedWithOperationContractAttribute {
            get {
                return ResourceManager.GetString("EndMethodsCannotBeDecoratedWithOperationContractAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChannelDispatcher requirements cannot be met by the IChannelListener for Binding &apos;{0}&apos; since the contract requires support for one of these channel types &apos;{1}&apos; but the binding only supports these channel types &apos;{2}&apos;..
        /// </summary>
        internal static string EndpointListenerRequirementsCannotBeMetBy3 {
            get {
                return ResourceManager.GetString("EndpointListenerRequirementsCannotBeMetBy3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An endpoint configured for the COM+ CLSID {0} is not a configured interface on the class. (The contract type is {1}.).
        /// </summary>
        internal static string EndpointNotAnIID {
            get {
                return ResourceManager.GetString("EndpointNotAnIID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no endpoint listening at {0} that could accept the message. This is often caused by an incorrect address or SOAP action. See InnerException, if present, for more details..
        /// </summary>
        internal static string EndpointNotFound {
            get {
                return ResourceManager.GetString("EndpointNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceEndpoint with name &apos;{0}&apos; could not be exported to WSDL because the Binding property is null. To fix this, set the Binding property to a valid Binding instance..
        /// </summary>
        internal static string EndpointsMustHaveAValidBinding1 {
            get {
                return ResourceManager.GetString("EndpointsMustHaveAValidBinding1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performance counter instance names may not be unique. See &quot;http://go.microsoft.com/fwlink/?LinkId=524462&quot; for details..
        /// </summary>
        internal static string EnsureCategoriesExistFailedPermission {
            get {
                return ResourceManager.GetString("EnsureCategoriesExistFailedPermission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer cannot provide a computed key in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeCannotHaveComputedKey {
            get {
                return ResourceManager.GetString("EntropyModeCannotHaveComputedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer cannot provide key entropy or a proof token in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeCannotHaveProofTokenOrIssuerEntropy {
            get {
                return ResourceManager.GetString("EntropyModeCannotHaveProofTokenOrIssuerEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client cannot provide key entropy in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeCannotHaveRequestorEntropy {
            get {
                return ResourceManager.GetString("EntropyModeCannotHaveRequestorEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer must provide a computed key in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresComputedKey {
            get {
                return ResourceManager.GetString("EntropyModeRequiresComputedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer must provide key entropy in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresIssuerEntropy {
            get {
                return ResourceManager.GetString("EntropyModeRequiresIssuerEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issuer must provide a proof token in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresProofToken {
            get {
                return ResourceManager.GetString("EntropyModeRequiresProofToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client must provide key entropy in key entropy mode &apos;{0}&apos;..
        /// </summary>
        internal static string EntropyModeRequiresRequestorEntropy {
            get {
                return ResourceManager.GetString("EntropyModeRequiresRequestorEntropy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EnvelopeNone ({0}).
        /// </summary>
        internal static string EnvelopeNoneToStringFormat {
            get {
                return ResourceManager.GetString("EnvelopeNoneToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Envelope Version &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string EnvelopeVersionNotSupported {
            get {
                return ResourceManager.GetString("EnvelopeVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized envelope version: {0}..
        /// </summary>
        internal static string EnvelopeVersionUnknown {
            get {
                return ResourceManager.GetString("EnvelopeVersionUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error creating the security key identifier clause from the security token XML. Please see the inner exception for more details..
        /// </summary>
        internal static string ErrorDeserializingKeyIdentifierClauseFromTokenXml {
            get {
                return ResourceManager.GetString("ErrorDeserializingKeyIdentifierClauseFromTokenXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error deserializing the security token XML. Please see the inner exception for more details..
        /// </summary>
        internal static string ErrorDeserializingTokenXml {
            get {
                return ResourceManager.GetString("ErrorDeserializingTokenXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing metadata from issuer &apos;{0}&apos; failed with error &apos;{1}&apos;..
        /// </summary>
        internal static string ErrorImportingIssuerMetadata {
            get {
                return ResourceManager.GetString("ErrorImportingIssuerMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in line {0} position {1}..
        /// </summary>
        internal static string ErrorInLine {
            get {
                return ResourceManager.GetString("ErrorInLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was encountered when parsing a DateTime value in the XML..
        /// </summary>
        internal static string ErrorParsingDateTime {
            get {
                return ResourceManager.GetString("ErrorParsingDateTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was encountered when parsing the document&apos;s XML. Refer to the inner exception for more details..
        /// </summary>
        internal static string ErrorParsingDocument {
            get {
                return ResourceManager.GetString("ErrorParsingDocument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was encountered when parsing the feed&apos;s XML. Refer to the inner exception for more details..
        /// </summary>
        internal static string ErrorParsingFeed {
            get {
                return ResourceManager.GetString("ErrorParsingFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was encountered when parsing the item&apos;s XML. Refer to the inner exception for more details..
        /// </summary>
        internal static string ErrorParsingItem {
            get {
                return ResourceManager.GetString("ErrorParsingItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error serializing the security token. Please see the inner exception for more details..
        /// </summary>
        internal static string ErrorSerializingSecurityToken {
            get {
                return ResourceManager.GetString("ErrorSerializingSecurityToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy expression was not fully imported because it exceeded the maximum allowable complexity. The import stopped at element &apos;{0}&apos; &apos;{1}&apos;..
        /// </summary>
        internal static string ExceededMaxPolicyComplexity {
            get {
                return ResourceManager.GetString("ExceededMaxPolicyComplexity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy expression was not fully imported because its normalized form was too large..
        /// </summary>
        internal static string ExceededMaxPolicySize {
            get {
                return ResourceManager.GetString("ExceededMaxPolicySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element &apos;{0}&apos; with namespace &apos;{1}&apos; not found..
        /// </summary>
        internal static string ExpectedElementMissing {
            get {
                return ResourceManager.GetString("ExpectedElementMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected element &apos;{0}&apos; or element &apos;{1}&apos; (from namespace &apos;{2}&apos;)..
        /// </summary>
        internal static string ExpectedOneOfTwoElementsFromNamespace {
            get {
                return ResourceManager.GetString("ExpectedOneOfTwoElementsFromNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Infocard token created during channel intialization has expired. Please create a new channel to reacquire token. .
        /// </summary>
        internal static string ExpiredTokenInChannelParameters {
            get {
                return ResourceManager.GetString("ExpiredTokenInChannelParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security policy export failed. The binding contains a TransportSecurityBindingElement but no transport binding element that implements ITransportTokenAssertionProvider. Policy export for such a binding is not supported. Make sure the transport binding element in the binding implements the ITransportTokenAssertionProvider interface..
        /// </summary>
        internal static string ExportOfBindingWithTransportSecurityBindingElementAndNoTransportSecurityNotSupported {
            get {
                return ResourceManager.GetString("ExportOfBindingWithTransportSecurityBindingElementAndNoTransportSecurityNotSuppor" +
                        "ted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extended protection is not supported on this platform.  Please install the appropriate patch or change the ExtendedProtectionPolicy on the Binding or BindingElement to a value with a PolicyEnforcement value of &quot;Never&quot; or &quot;WhenSupported&quot;..
        /// </summary>
        internal static string ExtendedProtectionNotSupported {
            get {
                return ResourceManager.GetString("ExtendedProtectionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Authentication Scheme &quot;Basic&quot; does not support Extended Protection.  Please use a different authentication scheme or disable the ExtendedProtectionPolicy on the Binding or BindingElement by creating a new ExtendedProtectionPolicy with a PolicyEnforcement value of &quot;Never&quot;..
        /// </summary>
        internal static string ExtendedProtectionPolicyBasicAuthNotSupported {
            get {
                return ResourceManager.GetString("ExtendedProtectionPolicyBasicAuthNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CustomChannelBindings are not supported.  Please remove the CustomChannelBinding from the ExtendedProtectionPolicy&quot;..
        /// </summary>
        internal static string ExtendedProtectionPolicyCustomChannelBindingNotSupported {
            get {
                return ResourceManager.GetString("ExtendedProtectionPolicyCustomChannelBindingNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the extension element must be specified..
        /// </summary>
        internal static string ExtensionNameNotSpecified {
            get {
                return ResourceManager.GetString("ExtensionNameNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional XML content is present in the fault detail element. Only a single element is allowed..
        /// </summary>
        internal static string ExtraContentIsPresentInFaultDetail {
            get {
                return ResourceManager.GetString("ExtraContentIsPresentInFaultDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one security token in the message could not be validated..
        /// </summary>
        internal static string FailedAuthenticationFaultReason {
            get {
                return ResourceManager.GetString("FailedAuthenticationFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request for security token could not be satisfied because authentication failed..
        /// </summary>
        internal static string FailedAuthenticationTrustFaultCode {
            get {
                return ResourceManager.GetString("FailedAuthenticationTrustFaultCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The processing of the WSDL parameter failed. Error: {0}.
        /// </summary>
        internal static string FailedImportOfWsdl {
            get {
                return ResourceManager.GetString("FailedImportOfWsdl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required outer proxy could not be created. Ensure that the service moniker is correctly installed and registered..
        /// </summary>
        internal static string FailedProxyProviderCreation {
            get {
                return ResourceManager.GetString("FailedProxyProviderCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signature verification failed. Please see inner exception for fault details..
        /// </summary>
        internal static string FailedSignatureVerification {
            get {
                return ResourceManager.GetString("FailedSignatureVerification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secure channel cannot be opened because security negotiation with the remote endpoint has failed. This may be due to absent or incorrectly specified EndpointIdentity in the EndpointAddress used to create the channel. Please verify the EndpointIdentity specified or implied by the EndpointAddress correctly identifies the remote endpoint. .
        /// </summary>
        internal static string FailedSspiNegotiation {
            get {
                return ResourceManager.GetString("FailedSspiNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to convert type library to assembly.
        /// </summary>
        internal static string FailedToConvertTypelibraryToAssembly {
            get {
                return ResourceManager.GetString("FailedToConvertTypelibraryToAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issued token accompanying the WS-AtomicTransaction coordination context was invalid or corrupt..
        /// </summary>
        internal static string FailedToDeserializeIssuedToken {
            get {
                return ResourceManager.GetString("FailedToDeserializeIssuedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load type library.
        /// </summary>
        internal static string FailedToLoadTypeLibrary {
            get {
                return ResourceManager.GetString("FailedToLoadTypeLibrary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security negotiation failed because the remote party did not send back a reply in a timely manner. This may be because the underlying transport connection was aborted..
        /// </summary>
        internal static string FailToRecieveReplyFromNegotiation {
            get {
                return ResourceManager.GetString("FailToRecieveReplyFromNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned false from OnTryCreateException, but returned a non-null Exception (See InnerException for details)..
        /// </summary>
        internal static string FaultConverterCreatedException {
            get {
                return ResourceManager.GetString("FaultConverterCreatedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned false from OnTryCreateFaultMessage, but returned a non-null fault message..
        /// </summary>
        internal static string FaultConverterCreatedFaultMessage {
            get {
                return ResourceManager.GetString("FaultConverterCreatedFaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned true from OnTryCreateException, but did not return an Exception..
        /// </summary>
        internal static string FaultConverterDidNotCreateException {
            get {
                return ResourceManager.GetString("FaultConverterDidNotCreateException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} returned true from OnTryCreateFaultMessage, but did not return a fault message..
        /// </summary>
        internal static string FaultConverterDidNotCreateFaultMessage {
            get {
                return ResourceManager.GetString("FaultConverterDidNotCreateFaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fault does not have detail information..
        /// </summary>
        internal static string FaultDoesNotHaveAnyDetail {
            get {
                return ResourceManager.GetString("FaultDoesNotHaveAnyDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed&apos;s authors were not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string FeedAuthorsIgnoredOnWrite {
            get {
                return ResourceManager.GetString("FeedAuthorsIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed&apos;s contributors were not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string FeedContributorsIgnoredOnWrite {
            get {
                return ResourceManager.GetString("FeedContributorsIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed created a null category..
        /// </summary>
        internal static string FeedCreatedNullCategory {
            get {
                return ResourceManager.GetString("FeedCreatedNullCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to =The feed created a null item..
        /// </summary>
        internal static string FeedCreatedNullItem {
            get {
                return ResourceManager.GetString("FeedCreatedNullItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed created a null person..
        /// </summary>
        internal static string FeedCreatedNullPerson {
            get {
                return ResourceManager.GetString("FeedCreatedNullPerson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The syndication feed formatter must be configured with a syndication feed..
        /// </summary>
        internal static string FeedFormatterDoesNotHaveFeed {
            get {
                return ResourceManager.GetString("FeedFormatterDoesNotHaveFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed being deserialized has non-contiguous sets of items in it. This is not supported by &apos;{0}&apos;..
        /// </summary>
        internal static string FeedHasNonContiguousItems {
            get {
                return ResourceManager.GetString("FeedHasNonContiguousItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed&apos;s id was not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string FeedIdIgnoredOnWrite {
            get {
                return ResourceManager.GetString("FeedIdIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed&apos;s links were not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string FeedLinksIgnoredOnWrite {
            get {
                return ResourceManager.GetString("FeedLinksIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IMessageFilterTable created for a Filter cannot be a MessageFilterTable or a subclass of MessageFilterTable..
        /// </summary>
        internal static string FilterBadTableType {
            get {
                return ResourceManager.GetString("FilterBadTableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value cannot be negative..
        /// </summary>
        internal static string FilterCapacityNegative {
            get {
                return ResourceManager.GetString("FilterCapacityNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not compile the XPath expression &apos;{0}&apos; with the given XsltContext..
        /// </summary>
        internal static string FilterCouldNotCompile {
            get {
                return ResourceManager.GetString("FilterCouldNotCompile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter value cannot be an empty string..
        /// </summary>
        internal static string FilterEmptyString {
            get {
                return ResourceManager.GetString("FilterEmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter already exists in the filter table..
        /// </summary>
        internal static string FilterExists {
            get {
                return ResourceManager.GetString("FilterExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid attribute on the XPath..
        /// </summary>
        internal static string FilterInvalidAttribute {
            get {
                return ResourceManager.GetString("FilterInvalidAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When present, the dialect attribute must have the value &apos;{0}&apos;..
        /// </summary>
        internal static string FilterInvalidDialect {
            get {
                return ResourceManager.GetString("FilterInvalidDialect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required inner element &apos;{0}&apos; was not found..
        /// </summary>
        internal static string FilterInvalidInner {
            get {
                return ResourceManager.GetString("FilterInvalidInner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple filters matched..
        /// </summary>
        internal static string FilterMultipleMatches {
            get {
                return ResourceManager.GetString("FilterMultipleMatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of XML infoset nodes inspected by the navigator has exceeded the quota ({0})..
        /// </summary>
        internal static string FilterNodeQuotaExceeded {
            get {
                return ResourceManager.GetString("FilterNodeQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NodeQuota must be greater than 0..
        /// </summary>
        internal static string FilterQuotaRange {
            get {
                return ResourceManager.GetString("FilterQuotaRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlReader not positioned at a start element..
        /// </summary>
        internal static string FilterReaderNotStartElem {
            get {
                return ResourceManager.GetString("FilterReaderNotStartElem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session filter&apos;s isStrictMode differs from filter table&apos;s isStrictMode..
        /// </summary>
        internal static string FilterStrictModeDifferent {
            get {
                return ResourceManager.GetString("FilterStrictModeDifferent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MessageFilterTable state is corrupt. The requested lookup cannot be performed..
        /// </summary>
        internal static string FilterTableInvalidForLookup {
            get {
                return ResourceManager.GetString("FilterTableInvalidForLookup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of IMessageFilterTable created for a particular Filter type must always be the same..
        /// </summary>
        internal static string FilterTableTypeMismatch {
            get {
                return ResourceManager.GetString("FilterTableTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The prefix &apos;{0}&apos; is not defined..
        /// </summary>
        internal static string FilterUndefinedPrefix {
            get {
                return ResourceManager.GetString("FilterUndefinedPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred. Unexpected error modifying filter table..
        /// </summary>
        internal static string FilterUnexpectedError {
            get {
                return ResourceManager.GetString("FilterUnexpectedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object type must be an enum with the flag attribute. &apos;{0}&apos; is not an enum - or the flag attribute is not set. Please use an enum type with the flag attribute instead..
        /// </summary>
        internal static string FlagEnumTypeExpected {
            get {
                return ResourceManager.GetString("FlagEnumTypeExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot write to a buffer which is currently being flushed. .
        /// </summary>
        internal static string FlushBufferAlreadyInUse {
            get {
                return ResourceManager.GetString("FlushBufferAlreadyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For replay detection to be done ProtectionLevel must be Sign or EncryptAndSign..
        /// </summary>
        internal static string ForReplayDetectionToBeDoneRequireIntegrityMustBeSet {
            get {
                return ResourceManager.GetString("ForReplayDetectionToBeDoneRequireIntegrityMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found multiple X.509 certificates using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos;. Provide a more specific find value..
        /// </summary>
        internal static string FoundMultipleCerts {
            get {
                return ResourceManager.GetString("FoundMultipleCerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found multiple X.509 certificates using the following search criteria: StoreName &apos;{0}&apos;, StoreLocation &apos;{1}&apos;, FindType &apos;{2}&apos;, FindValue &apos;{3}&apos; for target &apos;{4}&apos;. Provide a more specific find value..
        /// </summary>
        internal static string FoundMultipleCertsForTarget {
            get {
                return ResourceManager.GetString("FoundMultipleCertsForTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request did not have any signatures but the reply has signature confirmations..
        /// </summary>
        internal static string FoundUnexpectedSignatureConfirmations {
            get {
                return ResourceManager.GetString("FoundUnexpectedSignatureConfirmations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to decode a value after the framing stream was ended..
        /// </summary>
        internal static string FramingAtEnd {
            get {
                return ResourceManager.GetString("FramingAtEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Type {0} was not supported by service {1}.  The client and service bindings may be mismatched..
        /// </summary>
        internal static string FramingContentTypeMismatch {
            get {
                return ResourceManager.GetString("FramingContentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing content type size ({0}) exceeds the quota..
        /// </summary>
        internal static string FramingContentTypeTooLong {
            get {
                return ResourceManager.GetString("FramingContentTypeTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content type &apos;{0}&apos; is too long to be processed by the remote host. See the server logs for more details..
        /// </summary>
        internal static string FramingContentTypeTooLongFault {
            get {
                return ResourceManager.GetString("FramingContentTypeTooLongFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while reading message framing format at position {0} of stream (state: {1}).
        /// </summary>
        internal static string FramingError {
            get {
                return ResourceManager.GetString("FramingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing fault size ({0}) exceeds the quota..
        /// </summary>
        internal static string FramingFaultTooLong {
            get {
                return ResourceManager.GetString("FramingFaultTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server faulted with code &apos;{0}&apos;..
        /// </summary>
        internal static string FramingFaultUnrecognized {
            get {
                return ResourceManager.GetString("FramingFaultUnrecognized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message size quota for incoming messages has been exceeded for the remote channel. See the server logs for more details..
        /// </summary>
        internal static string FramingMaxMessageSizeExceeded {
            get {
                return ResourceManager.GetString("FramingMaxMessageSizeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Framing mode {0} is not supported..
        /// </summary>
        internal static string FramingModeNotSupported {
            get {
                return ResourceManager.GetString("FramingModeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .Net Framing mode being used is not supported by &apos;{0}&apos;. See the server logs for more details..
        /// </summary>
        internal static string FramingModeNotSupportedFault {
            get {
                return ResourceManager.GetString("FramingModeNotSupportedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More data was expected, but EOF was reached..
        /// </summary>
        internal static string FramingPrematureEOF {
            get {
                return ResourceManager.GetString("FramingPrematureEOF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected record type &apos;{0}&apos;, found &apos;{1}&apos;..
        /// </summary>
        internal static string FramingRecordTypeMismatch {
            get {
                return ResourceManager.GetString("FramingRecordTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified size is too large for this implementation..
        /// </summary>
        internal static string FramingSizeTooLarge {
            get {
                return ResourceManager.GetString("FramingSizeTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested upgrade is not supported by &apos;{0}&apos;. This could be due to mismatched bindings (for example security enabled on the client and not on the server)..
        /// </summary>
        internal static string FramingUpgradeInvalid {
            get {
                return ResourceManager.GetString("FramingUpgradeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value cannot be accessed because it has not yet been fully decoded..
        /// </summary>
        internal static string FramingValueNotAvailable {
            get {
                return ResourceManager.GetString("FramingValueNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Framing major version {0} is not supported..
        /// </summary>
        internal static string FramingVersionNotSupported {
            get {
                return ResourceManager.GetString("FramingVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The .Net Framing version being used is not supported by &apos;{0}&apos;. See the server logs for more details..
        /// </summary>
        internal static string FramingVersionNotSupportedFault {
            get {
                return ResourceManager.GetString("FramingVersionNotSupportedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing via ({0}) is not a valid URI..
        /// </summary>
        internal static string FramingViaNotUri {
            get {
                return ResourceManager.GetString("FramingViaNotUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The framing via size ({0}) exceeds the quota..
        /// </summary>
        internal static string FramingViaTooLong {
            get {
                return ResourceManager.GetString("FramingViaTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Via &apos;{0}&apos; is too long to be processed by the remote host. See the server logs for more details..
        /// </summary>
        internal static string FramingViaTooLongFault {
            get {
                return ResourceManager.GetString("FramingViaTooLongFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Binding with name {0} failed validation because it contains a BindingElement with type {1} which is not supported in partial trust. Consider using BasicHttpBinding or WSHttpBinding, or hosting your application in a full-trust environment..
        /// </summary>
        internal static string FullTrustOnlyBindingElementSecurityCheck1 {
            get {
                return ResourceManager.GetString("FullTrustOnlyBindingElementSecurityCheck1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WSHttpBinding with name {0} failed validation because it contains a BindingElement with type {1} which is not supported in partial trust. Consider disabling the message security and reliable session options, using BasicHttpBinding, or hosting your application in a full-trust environment..
        /// </summary>
        internal static string FullTrustOnlyBindingElementSecurityCheckWSHttpBinding1 {
            get {
                return ResourceManager.GetString("FullTrustOnlyBindingElementSecurityCheckWSHttpBinding1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Binding with name {0} failed validation because the Binding type {1} is not supported in partial trust. Consider using BasicHttpBinding or WSHttpBinding, or hosting your application in a full-trust environment..
        /// </summary>
        internal static string FullTrustOnlyBindingSecurityCheck1 {
            get {
                return ResourceManager.GetString("FullTrustOnlyBindingSecurityCheck1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error verifying some XML Schemas generated during export:
        ///{0}.
        /// </summary>
        internal static string GeneralSchemaValidationError {
            get {
                return ResourceManager.GetString("GeneralSchemaValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not get token information (error=0x{0:X})..
        /// </summary>
        internal static string GetTokenInfoFailed {
            get {
                return ResourceManager.GetString("GetTokenInfoFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message header with name &apos;{0}&apos; and namespace &apos;{1}&apos; is not present in the set of understood headers..
        /// </summary>
        internal static string HeaderAlreadyNotUnderstood {
            get {
                return ResourceManager.GetString("HeaderAlreadyNotUnderstood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message header with name &apos;{0}&apos; and namespace &apos;{1}&apos; is already present in the set of understood headers..
        /// </summary>
        internal static string HeaderAlreadyUnderstood {
            get {
                return ResourceManager.GetString("HeaderAlreadyUnderstood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityVersion.WSSecurityJan2004 does not support header decryption. Use SecurityVersion.WsSecurity11 and above or use transport security to encrypt the full message..
        /// </summary>
        internal static string HeaderDecryptionNotSupportedInWsSecurityJan2004 {
            get {
                return ResourceManager.GetString("HeaderDecryptionNotSupportedInWsSecurityJan2004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityVersion.WSSecurityJan2004 does not support header encryption. Header with name &apos;{0}&apos; and namespace &apos;{1}&apos; is configured for encryption. Consider using SecurityVersion.WsSecurity11 and above or use transport security to encrypt the full message..
        /// </summary>
        internal static string HeaderEncryptionNotSupportedInWsSecurityJan2004 {
            get {
                return ResourceManager.GetString("HeaderEncryptionNotSupportedInWsSecurityJan2004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is not a header with name {0} and namespace {1} in the message..
        /// </summary>
        internal static string HeaderNotFound {
            get {
                return ResourceManager.GetString("HeaderNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Envelope Version &apos;{0}&apos; does not support adding Message Headers..
        /// </summary>
        internal static string HeadersCannotBeAddedToEnvelopeVersion {
            get {
                return ResourceManager.GetString("HeadersCannotBeAddedToEnvelopeVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BaseUriWithWildcard object has invalid fields after deserialization..
        /// </summary>
        internal static string Hosting_BaseUriDeserializedNotValid {
            get {
                return ResourceManager.GetString("Hosting_BaseUriDeserializedNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This service requires ASP.NET compatibility and must be hosted in IIS.  Either host the service in IIS with ASP.NET compatibility turned on in web.config or set the AspNetCompatibilityRequirementsAttribute.AspNetCompatibilityRequirementsMode property to a value other than Required..
        /// </summary>
        internal static string Hosting_CompatibilityServiceNotHosted {
            get {
                return ResourceManager.GetString("Hosting_CompatibilityServiceNotHosted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting minFreeMemoryPercentageToActivateService requires full trust privilege. Please change the application&apos;s trust level or remove this setting from the configuration file..
        /// </summary>
        internal static string Hosting_MemoryGatesCheckFailedUnderPartialTrust {
            get {
                return ResourceManager.GetString("Hosting_MemoryGatesCheckFailedUnderPartialTrust", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol binding &apos;{0}&apos; does not conform to the syntax for &apos;{1}&apos;. The following is an example of valid &apos;{1}&apos; protocol bindings: &apos;{2}&apos;..
        /// </summary>
        internal static string Hosting_MisformattedBinding {
            get {
                return ResourceManager.GetString("Hosting_MisformattedBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol binding &apos;{0}&apos; is not valid for &apos;{1}&apos;.  This might be because the port number is out of range..
        /// </summary>
        internal static string Hosting_MisformattedBindingData {
            get {
                return ResourceManager.GetString("Hosting_MisformattedBindingData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; protocol binding &apos;{1}&apos; specifies an invalid port number &apos;{2}&apos;..
        /// </summary>
        internal static string Hosting_MisformattedPort {
            get {
                return ResourceManager.GetString("Hosting_MisformattedPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is an absolute address. The supported relativeAddress formats are &quot;[subfolder/]filename&quot; or &quot;~/[subfolder/]filename&quot;.  .
        /// </summary>
        internal static string Hosting_NoAbsoluteRelativeAddress {
            get {
                return ResourceManager.GetString("Hosting_NoAbsoluteRelativeAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no compatible TransportManager found for URI &apos;{0}&apos;. This may be because you have used an absolute address that points outside of the virtual application. Please use a relative address instead..
        /// </summary>
        internal static string Hosting_NoHttpTransportManagerForUri {
            get {
                return ResourceManager.GetString("Hosting_NoHttpTransportManagerForUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no compatible TransportManager found for URI &apos;{0}&apos;. This may be because you have used an absolute address that points outside of the virtual application, or the binding settings of the endpoint do not match those that have been set by other services or endpoints. Note that all bindings for the same protocol should have the same settings in the same application..
        /// </summary>
        internal static string Hosting_NoTcpPipeTransportManagerForUri {
            get {
                return ResourceManager.GetString("Hosting_NoTcpPipeTransportManagerForUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string Hosting_NotSupportedProtocol {
            get {
                return ResourceManager.GetString("Hosting_NotSupportedProtocol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be invoked within the current hosting environment. This API requires that the calling application be hosted in IIS or WAS..
        /// </summary>
        internal static string Hosting_ProcessNotExecutingUnderHostedContext {
            get {
                return ResourceManager.GetString("Hosting_ProcessNotExecutingUnderHostedContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registered relativeAddress &apos;{0}&apos; in configuration file is not a valid one. Possible causes could be : You specified an empty addreess or an absolute address (i.e., starting with &apos;/&apos; or &apos;\&apos;), or the address contains invalid character[s]. The supported relativeAddress formats are &quot;[folder/]filename&quot; or &quot;~/[folder/]filename&quot;.  .
        /// </summary>
        internal static string Hosting_RelativeAddressFormatError {
            get {
                return ResourceManager.GetString("Hosting_RelativeAddressFormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested service, &apos;{0}&apos; could not be activated. See the server&apos;s diagnostic trace logs for more information..
        /// </summary>
        internal static string Hosting_ServiceActivationFailed {
            get {
                return ResourceManager.GetString("Hosting_ServiceActivationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for the Service attribute was not provided in the ServiceHost directive..
        /// </summary>
        internal static string Hosting_ServiceTypeNotProvided {
            get {
                return ResourceManager.GetString("Hosting_ServiceTypeNotProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VirtualPathExtension is not allowed to be removed..
        /// </summary>
        internal static string Hosting_VirtualPathExtenstionCanNotBeDetached {
            get {
                return ResourceManager.GetString("Hosting_VirtualPathExtenstionCanNotBeDetached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message contains a SOAP header representing the WS-Addressing &apos;{0}&apos;, yet the HTTP transport is configured with AddressingVersion.None.  As a result, the message is being dropped.  If this is not desired, then update your HTTP binding to support a different AddressingVersion..
        /// </summary>
        internal static string HttpAddressingNoneHeaderOnWire {
            get {
                return ResourceManager.GetString("HttpAddressingNoneHeaderOnWire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP request streaming cannot be used in conjunction with HTTP authentication.  Either disable request streaming or specify anonymous HTTP authentication..
        /// </summary>
        internal static string HttpAuthDoesNotSupportRequestStreaming {
            get {
                return ResourceManager.GetString("HttpAuthDoesNotSupportRequestStreaming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request with client authentication scheme &apos;{0}&apos; failed with &apos;{1}&apos; status..
        /// </summary>
        internal static string HttpAuthenticationFailed {
            get {
                return ResourceManager.GetString("HttpAuthenticationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request is unauthorized with client authentication scheme &apos;{0}&apos;. The authentication header received from the server was &apos;{1}&apos;..
        /// </summary>
        internal static string HttpAuthorizationFailed {
            get {
                return ResourceManager.GetString("HttpAuthorizationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request was forbidden with client authentication scheme &apos;{0}&apos;..
        /// </summary>
        internal static string HttpAuthorizationForbidden {
            get {
                return ResourceManager.GetString("HttpAuthorizationForbidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTPS listener factory was configured to require a client certificate and the &apos;{0}&apos; authentication scheme. However, only one form of client authentication can be required at once..
        /// </summary>
        internal static string HttpAuthSchemeAndClientCert {
            get {
                return ResourceManager.GetString("HttpAuthSchemeAndClientCert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value specified for the AuthenticationScheme property on the HttpTransportBindingElement (&apos;{0}&apos;) is not allowed when building a ChannelFactory. If you used a standard binding, ensure the ClientCredentialType is not set to HttpClientCredentialType.InheritedFromHost, a value which is invalid on a client. If you set the value to &apos;{0}&apos; directly on the HttpTransportBindingElement, please set it to Digest, Negotiate, NTLM, Basic, or Anonymous..
        /// </summary>
        internal static string HttpAuthSchemeCannotBeNone {
            get {
                return ResourceManager.GetString("HttpAuthSchemeCannotBeNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClientCredentialType &apos;{0}&apos; can only be used on the server side, not the client side. Please use one of the following values instead &apos;None, Basic, Client, Digest, Ntlm, Windows&apos;..
        /// </summary>
        internal static string HttpClientCredentialTypeInvalid {
            get {
                return ResourceManager.GetString("HttpClientCredentialTypeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of bytes available is inconsistent with the HTTP Content-Length header.  There may have been a network error or the client may be sending invalid requests..
        /// </summary>
        internal static string HttpContentLengthIncorrect {
            get {
                return ResourceManager.GetString("HttpContentLengthIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error ({0}) occurred while parsing the content type of the HTTP request. The content type was: {1}..
        /// </summary>
        internal static string HttpContentTypeFormatException {
            get {
                return ResourceManager.GetString("HttpContentTypeFormatException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An HTTP Content-Type header is required for SOAP messaging and none was found..
        /// </summary>
        internal static string HttpContentTypeHeaderRequired {
            get {
                return ResourceManager.GetString("HttpContentTypeHeaderRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElement of binding {0}:{1} is configured with ContextExchangeMode.HttpCookie but the configuration of this binding&apos;s HttpTransportBindingElement prevents upper channel layers from managing cookies. Please set the HttpTransportBindingElement.AllowCookies property to false or change the ContextExchangeMechanism of ContextBindingElement to SoapHeader..
        /// </summary>
        internal static string HttpCookieContextExchangeMechanismNotCompatibleWithTransportCookieSetting {
            get {
                return ResourceManager.GetString("HttpCookieContextExchangeMechanismNotCompatibleWithTransportCookieSetting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding {1}:{2} is configured with ContextExchangeMechanism.HttpCookie which is not compatible with the transport type {0}. Please modify the ContextExchangeMechanism or use HTTP or HTTPS transport..
        /// </summary>
        internal static string HttpCookieContextExchangeMechanismNotCompatibleWithTransportType {
            get {
                return ResourceManager.GetString("HttpCookieContextExchangeMechanismNotCompatibleWithTransportType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value specified, &apos;{0}&apos;, for the If-Modified-Since header does not parse into a valid date. Check the property value and ensure that it is of the proper format..
        /// </summary>
        internal static string HttpIfModifiedSinceParseError {
            get {
                return ResourceManager.GetString("HttpIfModifiedSinceParseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to start the HTTP listener. The URI provided, &apos;{0}&apos;, is invalid for listening. Check the base address of your service and verify that it is a valid URI..
        /// </summary>
        internal static string HttpInvalidListenURI {
            get {
                return ResourceManager.GetString("HttpInvalidListenURI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of MaxPendingAccepts should not be larger than {0}..
        /// </summary>
        internal static string HttpMaxPendingAcceptsTooLargeError {
            get {
                return ResourceManager.GetString("HttpMaxPendingAcceptsTooLargeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot return a null &apos;{1}&apos; instance. Please ensure that &apos;{0}&apos; returns a valid &apos;{1}&apos; instance..
        /// </summary>
        internal static string HttpMessageHandlerChannelFactoryNullPipeline {
            get {
                return ResourceManager.GetString("HttpMessageHandlerChannelFactoryNullPipeline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The config element &apos;{0}&apos; is invalid because the attribute &apos;{1}&apos; and the sub element &apos;{2}&apos; were both specified. These are mutually exclusive items and cannot be used simultaneouly..
        /// </summary>
        internal static string HttpMessageHandlerFactoryConfigInvalid_WithBothTypeAndHandlerList {
            get {
                return ResourceManager.GetString("HttpMessageHandlerFactoryConfigInvalid_WithBothTypeAndHandlerList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This &apos;{0}&apos; object cannot be used to generate configuration because it was created with the constructor that takes a &apos;{1}&apos; as the paramter.  This functionality is not supported through configuration files.  Please use a different constructor if you wish to generate a configuration file..
        /// </summary>
        internal static string HttpMessageHandlerFactoryWithFuncCannotGenerateConfig {
            get {
                return ResourceManager.GetString("HttpMessageHandlerFactoryWithFuncCannotGenerateConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid type: &apos;{0}&apos;. It must inherit from base type &apos;{1}&apos;, cannot be abstract, and must expose a public default constructor..
        /// </summary>
        internal static string HttpMessageHandlerTypeNotSupported {
            get {
                return ResourceManager.GetString("HttpMessageHandlerTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote HTTP server did not satisfy the mutual authentication requirement..
        /// </summary>
        internal static string HttpMutualAuthNotSatisfied {
            get {
                return ResourceManager.GetString("HttpMutualAuthNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}. This often indicates that the HTTP client has prematurely closed the underlying TCP connection..
        /// </summary>
        internal static string HttpNetnameDeleted {
            get {
                return ResourceManager.GetString("HttpNetnameDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}. This often indicates that a service that HTTP.SYS depends upon (such as httpfilter) is not started..
        /// </summary>
        internal static string HttpNoTrackingService {
            get {
                return ResourceManager.GetString("HttpNoTrackingService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message property &apos;{0}&apos; is missing in the HttpRequestMessage. Please make sure this property not removed or changed from the properties of the HttpRequestMessage. If you are creating a new HttpRequestMessage, please copy this property from the old message to the new one..
        /// </summary>
        internal static string HttpPipelineMessagePropertyMissingError {
            get {
                return ResourceManager.GetString("HttpPipelineMessagePropertyMissingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message property &apos;{0}&apos; inside the HttpRequestMessage is not with expected type &apos;{1}&apos;. Please make sure this property not removed or changed from the properties of the HttpRequestMessage. If you are creating a new HttpRequestMessage, please copy this property from the old message to the new one..
        /// </summary>
        internal static string HttpPipelineMessagePropertyTypeError {
            get {
                return ResourceManager.GetString("HttpPipelineMessagePropertyTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{0}&apos; is not supported when building a ChannelFactory. The property value must be null when calling BuildChannelFactory..
        /// </summary>
        internal static string HttpPipelineNotSupportedOnClientSide {
            get {
                return ResourceManager.GetString("HttpPipelineNotSupportedOnClientSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP response message should not be null. Please ensure your &apos;{0}&apos; instance returns a non-null &apos;{1}&apos; object..
        /// </summary>
        internal static string HttpPipelineNotSupportNullResponseMessage {
            get {
                return ResourceManager.GetString("HttpPipelineNotSupportNullResponseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP pipeline operation cancelled..
        /// </summary>
        internal static string HttpPipelineOperationCanceledError {
            get {
                return ResourceManager.GetString("HttpPipelineOperationCanceledError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; authentication scheme has been specified for the proxy on the HTTP factory. However, the factory only supports specification of exactly one authentication scheme. Valid authentication schemes are Digest, Negotiate, NTLM, Basic, or Anonymous..
        /// </summary>
        internal static string HttpProxyRequiresSingleAuthScheme {
            get {
                return ResourceManager.GetString("HttpProxyRequiresSingleAuthScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while receiving the HTTP response to {0}. This could be due to the service endpoint binding not using the HTTP protocol. This could also be due to an HTTP request context being aborted by the server (possibly due to the service shutting down). See server logs for more details..
        /// </summary>
        internal static string HttpReceiveFailure {
            get {
                return ResourceManager.GetString("HttpReceiveFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP could not register URL {0}. Your process does not have access rights to this namespace (see http://go.microsoft.com/fwlink/?LinkId=70353 for details)..
        /// </summary>
        internal static string HttpRegistrationAccessDenied {
            get {
                return ResourceManager.GetString("HttpRegistrationAccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP could not register URL {0}. Another application has already registered this URL with HTTP.SYS..
        /// </summary>
        internal static string HttpRegistrationAlreadyExists {
            get {
                return ResourceManager.GetString("HttpRegistrationAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP could not register URL {0} because the MaxEndpoints quota has been exceeded. To correct this, either close other HTTP-based services, or increase your MaxEndpoints registry key setting (see http://go.microsoft.com/fwlink/?LinkId=70352 for details)..
        /// </summary>
        internal static string HttpRegistrationLimitExceeded {
            get {
                return ResourceManager.GetString("HttpRegistrationLimitExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP could not register URL {0} because TCP port {1} is being used by another application..
        /// </summary>
        internal static string HttpRegistrationPortInUse {
            get {
                return ResourceManager.GetString("HttpRegistrationPortInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request to &apos;{0}&apos; was aborted.  This may be due to the local channel being closed while the request was still in progress.  If this behavior is not desired, then update your code so that it does not close the channel while request operations are still in progress..
        /// </summary>
        internal static string HttpRequestAborted {
            get {
                return ResourceManager.GetString("HttpRequestAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request to &apos;{0}&apos; has exceeded the allotted timeout of {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string HttpRequestTimedOut {
            get {
                return ResourceManager.GetString("HttpRequestTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; authentication scheme has been specified on the HTTP factory. However, the factory only supports specification of exactly one authentication scheme. Valid authentication schemes are Digest, Negotiate, NTLM, Basic, or Anonymous..
        /// </summary>
        internal static string HttpRequiresSingleAuthScheme {
            get {
                return ResourceManager.GetString("HttpRequiresSingleAuthScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request context was aborted while writing the response.  As a result, the response may not have been completely written to the network.  This can be remedied by gracefully closing the request context rather than aborting it..
        /// </summary>
        internal static string HttpResponseAborted {
            get {
                return ResourceManager.GetString("HttpResponseAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request to &apos;{0}&apos; has exceeded the allotted timeout of {1} while reading the response. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string HttpResponseTimedOut {
            get {
                return ResourceManager.GetString("HttpResponseTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while making the HTTP request to {0}. This could be due to the fact that the server certificate is not configured properly with HTTP.SYS in the HTTPS case. This could also be caused by a mismatch of the security binding between the client and the server..
        /// </summary>
        internal static string HttpSendFailure {
            get {
                return ResourceManager.GetString("HttpSendFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP service located at {0} is unavailable.  This could be because the service is too busy or because no endpoint was found listening at the specified address. Please ensure that the address is correct and try accessing the service again later..
        /// </summary>
        internal static string HttpServerTooBusy {
            get {
                return ResourceManager.GetString("HttpServerTooBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTPS channel factory does not support explicit specification of an identity in the EndpointAddress unless the authentication scheme is NTLM or Negotiate..
        /// </summary>
        internal static string HttpsExplicitIdentity {
            get {
                return ResourceManager.GetString("HttpsExplicitIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint identity specified when creating the HTTPS channel to &apos;{0}&apos; contains multiple server certificates.  However, the HTTPS transport only supports the specification of a single server certificate.  In order to create an HTTPS channel, please specify no more than one server certificate in the endpoint identity..
        /// </summary>
        internal static string HttpsIdentityMultipleCerts {
            get {
                return ResourceManager.GetString("HttpsIdentityMultipleCerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SOAP action specified on the message, &apos;{0}&apos;, does not match the action specified on the HttpRequestMessageProperty, &apos;{1}&apos;..
        /// </summary>
        internal static string HttpSoapActionMismatch {
            get {
                return ResourceManager.GetString("HttpSoapActionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SOAP action specified on the message, &apos;{0}&apos;, does not match the action specified in the content-type of the HttpRequestMessageProperty, &apos;{1}&apos;..
        /// </summary>
        internal static string HttpSoapActionMismatchContentType {
            get {
                return ResourceManager.GetString("HttpSoapActionMismatchContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SOAP action specified on the message, &apos;{0}&apos;, does not match the HTTP SOAP Action, &apos;{1}&apos;. .
        /// </summary>
        internal static string HttpSoapActionMismatchFault {
            get {
                return ResourceManager.GetString("HttpSoapActionMismatchFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SPN for the responding server at URI &apos;{0}&apos; could not be determined..
        /// </summary>
        internal static string HttpSpnNotFound {
            get {
                return ResourceManager.GetString("HttpSpnNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server certificate with name &apos;{0}&apos; failed identity verification because its thumbprint (&apos;{1}&apos;) does not match the one specified in the endpoint identity (&apos;{2}&apos;).  As a result, the current HTTPS request has failed.  Please update the endpoint identity used on the client or the certificate used by the server..
        /// </summary>
        internal static string HttpsServerCertThumbprintMismatch {
            get {
                return ResourceManager.GetString("HttpsServerCertThumbprintMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry found in AuthenticationManager&apos;s CustomTargetNameDictionary for {0} does not match the requested identity of {1}..
        /// </summary>
        internal static string HttpTargetNameDictionaryConflict {
            get {
                return ResourceManager.GetString("HttpTargetNameDictionaryConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding specified requires that the to and via URIs must match because the Addressing Version is set to None. The to URI specified was &apos;{0}&apos;. The via URI specified was &apos;{1}&apos;..
        /// </summary>
        internal static string HttpToMustEqualVia {
            get {
                return ResourceManager.GetString("HttpToMustEqualVia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error ({0}) occurred while transmitting data over the HTTP channel..
        /// </summary>
        internal static string HttpTransferError {
            get {
                return ResourceManager.GetString("HttpTransferError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy being imported for contract &apos;{0}:{1}&apos; contains multiple HTTP authentication scheme assertions.  Since at most one such assertion is allowed, policy import has failed.  This may be resolved by updating the policy to contain no more than one HTTP authentication scheme assertion..
        /// </summary>
        internal static string HttpTransportCannotHaveMultipleAuthenticationSchemes {
            get {
                return ResourceManager.GetString("HttpTransportCannotHaveMultipleAuthenticationSchemes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID0020: The collection is empty..
        /// </summary>
        internal static string ID0020 {
            get {
                return ResourceManager.GetString("ID0020", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID2004: IAsyncResult must be the AsyncResult instance returned from the Begin call. The runtime is expecting &apos;{0}&apos;, and the actual type is &apos;{1}&apos;..
        /// </summary>
        internal static string ID2004 {
            get {
                return ResourceManager.GetString("ID2004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3002: WSTrustServiceContract could not create a SecurityTokenService instance from WSTrustServiceContract.SecurityTokenServiceConfiguration..
        /// </summary>
        internal static string ID3002 {
            get {
                return ResourceManager.GetString("ID3002", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3004: Cannot obtain the schema for namespace: &apos;{0}&apos;..
        /// </summary>
        internal static string ID3004 {
            get {
                return ResourceManager.GetString("ID3004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3022: The WSTrustServiceContract only supports receiving RequestSecurityToken messages. If you need to support more message types, override the WSTrustServiceContract.DispatchRequest method..
        /// </summary>
        internal static string ID3022 {
            get {
                return ResourceManager.GetString("ID3022", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3023: The WSTrustServiceContract only supports receiving RequestSecurityToken messages asynchronously. If you need to support more message types, override the WSTrustServiceContract.BeginDispatchRequest and EndDispatchRequest..
        /// </summary>
        internal static string ID3023 {
            get {
                return ResourceManager.GetString("ID3023", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3097: ServiceHost does not contain any valid Endpoints. Add at least one valid endpoint in the SecurityTokenServiceConfiguration.TrustEndpoints collection..
        /// </summary>
        internal static string ID3097 {
            get {
                return ResourceManager.GetString("ID3097", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3112: Unrecognized RequestType &apos;{0}&apos; specified in the incoming request..
        /// </summary>
        internal static string ID3112 {
            get {
                return ResourceManager.GetString("ID3112", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3113: The WSTrustServiceContract does not support receiving &apos;{0}&apos; messages with the &apos;{1}&apos; SOAP action. If you need to support this, override the ValidateDispatchContext method..
        /// </summary>
        internal static string ID3113 {
            get {
                return ResourceManager.GetString("ID3113", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3114: The WSTrustServiceContract cannot deserialize the WS-Trust request..
        /// </summary>
        internal static string ID3114 {
            get {
                return ResourceManager.GetString("ID3114", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3137: The TrustVersion &apos;{0}&apos;, is not supported, only &apos;TrustVersion.WSTrust13&apos; and &apos;TrustVersion.WSTrustFeb2005&apos; is supported..
        /// </summary>
        internal static string ID3137 {
            get {
                return ResourceManager.GetString("ID3137", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3138: The RequestSecurityTokenResponse that was received did not contain a SecurityToken..
        /// </summary>
        internal static string ID3138 {
            get {
                return ResourceManager.GetString("ID3138", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3139: The WSTrustChannel cannot compute a proof key. The KeyType &apos;{0}&apos; is not supported. Valid proof key types supported by the WSTrustChannel are WSTrust13 and WSTrustFeb2005..
        /// </summary>
        internal static string ID3139 {
            get {
                return ResourceManager.GetString("ID3139", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3140: Specify one or more BaseAddresses to enable metadata or set DisableWsdl to true in the SecurityTokenServiceConfiguration..
        /// </summary>
        internal static string ID3140 {
            get {
                return ResourceManager.GetString("ID3140", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3141: The RequestType &apos;{0}&apos;, is not supported. If you need to support this RequestType, override the corresponding virtual method in your SecurityTokenService derived class..
        /// </summary>
        internal static string ID3141 {
            get {
                return ResourceManager.GetString("ID3141", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3144: The PortType &apos;{0}&apos; Operation &apos;{1}&apos; has Message &apos;{2}&apos; is expected to have only one part but contains &apos;{3}&apos;..
        /// </summary>
        internal static string ID3144 {
            get {
                return ResourceManager.GetString("ID3144", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3146: WsdlEndpointConversionContext.WsdlPort cannot be null..
        /// </summary>
        internal static string ID3146 {
            get {
                return ResourceManager.GetString("ID3146", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3147: WsdlEndpointConversionContext.WsdlPort.Service cannot be null..
        /// </summary>
        internal static string ID3147 {
            get {
                return ResourceManager.GetString("ID3147", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3148: WsdlEndpointConversionContext.WsdlPort.Service.ServiceDescription cannot be null..
        /// </summary>
        internal static string ID3148 {
            get {
                return ResourceManager.GetString("ID3148", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3149: Cannot find an input message type for PortType &apos;({0}, {1})&apos; for operation &apos;{2}&apos; in the given ServiceDescription..
        /// </summary>
        internal static string ID3149 {
            get {
                return ResourceManager.GetString("ID3149", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3150: Cannot find an output message type for PortType &apos;({0}, {1})&apos; for operation &apos;{2}&apos; in the given ServiceDescription..
        /// </summary>
        internal static string ID3150 {
            get {
                return ResourceManager.GetString("ID3150", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3190: The WSTrustChannel cannot compute a proof key without a valid SecurityToken set as the RequestSecurityToken.UseKey when the RequestSecurityToken.KeyType is &apos;{0}&apos;..
        /// </summary>
        internal static string ID3190 {
            get {
                return ResourceManager.GetString("ID3190", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3191: The WSTrustChannel received a RequestedSecurityTokenResponse message containing an Entropy without a ComputedKeyAlgorithm..
        /// </summary>
        internal static string ID3191 {
            get {
                return ResourceManager.GetString("ID3191", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3192: The WSTrustChannel cannot compute a proof key. The received RequestedSecurityTokenResponse does not contain a RequestedProofToken and the ComputedKeyAlgorithm specified in the response is not supported: &apos;{0}&apos;..
        /// </summary>
        internal static string ID3192 {
            get {
                return ResourceManager.GetString("ID3192", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3193: The WSTrustChannel cannot compute a proof key. The received RequestedSecurityTokenResponse indicates that the proof key is computed using combined entropy. However, the response does not include an entropy..
        /// </summary>
        internal static string ID3193 {
            get {
                return ResourceManager.GetString("ID3193", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3194: The WSTrustChannel cannot compute a proof key. The received RequestedSecurityTokenResponse indicates that the proof key is computed using combined entropy. However, the request does not include an entropy..
        /// </summary>
        internal static string ID3194 {
            get {
                return ResourceManager.GetString("ID3194", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3269: Cannot determine the TrustVersion. It must either be specified explicitly, or a SecurityBindingElement must be present in the binding..
        /// </summary>
        internal static string ID3269 {
            get {
                return ResourceManager.GetString("ID3269", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3270: The WSTrustChannel does not support multi-leg issuance protocols. The RSTR received from the STS must be enclosed in a RequestSecurityTokenResponseCollection element..
        /// </summary>
        internal static string ID3270 {
            get {
                return ResourceManager.GetString("ID3270", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3285: The WS-Trust operation &apos;{0}&apos; is not valid or unsupported..
        /// </summary>
        internal static string ID3285 {
            get {
                return ResourceManager.GetString("ID3285", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3286: The &apos;inner&apos; parameter must implement the &apos;System.ServiceModel.Channels.IChannel&apos; interface..
        /// </summary>
        internal static string ID3286 {
            get {
                return ResourceManager.GetString("ID3286", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID3287: WSTrustChannelFactory does not support changing the value of this property after a channel is created..
        /// </summary>
        internal static string ID3287 {
            get {
                return ResourceManager.GetString("ID3287", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4008: &apos;{0}&apos; does not provide an implementation for &apos;{1}&apos;..
        /// </summary>
        internal static string ID4008 {
            get {
                return ResourceManager.GetString("ID4008", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4039: A custom ServiceAuthorizationManager has been configured. Any custom ServiceAuthorizationManager must be derived from IdentityModelServiceAuthorizationManager..
        /// </summary>
        internal static string ID4039 {
            get {
                return ResourceManager.GetString("ID4039", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4041: Cannot configure the ServiceHost &apos;{0}&apos;. The ServiceHost is in a bad state and cannot be configured..
        /// </summary>
        internal static string ID4041 {
            get {
                return ResourceManager.GetString("ID4041", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4053: The token has WS-SecureConversation version &apos;{0}&apos;.  Version &apos;{1}&apos; was expected..
        /// </summary>
        internal static string ID4053 {
            get {
                return ResourceManager.GetString("ID4053", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4072: The SecurityTokenHandler &apos;{0}&apos; registered for TokenType &apos;{1}&apos; must derive from &apos;{2}&apos;..
        /// </summary>
        internal static string ID4072 {
            get {
                return ResourceManager.GetString("ID4072", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4101: The token cannot be validated because it is not a SamlSecurityToken or a Saml2SecurityToken. Token type: &apos;{0}&apos;.
        /// </summary>
        internal static string ID4101 {
            get {
                return ResourceManager.GetString("ID4101", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4192: The reader is not positioned on a KeyInfo element that can be read..
        /// </summary>
        internal static string ID4192 {
            get {
                return ResourceManager.GetString("ID4192", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4240: The tokenRequirement must derived from &apos;RecipientServiceModelSecurityTokenRequirement&apos; for SecureConversationSecurityTokens. The tokenRequirement is of type &apos;{0}&apos;..
        /// </summary>
        internal static string ID4240 {
            get {
                return ResourceManager.GetString("ID4240", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4244: Internal error: sessionAuthenticator must support IIssuanceSecurityTokenAuthenticator..
        /// </summary>
        internal static string ID4244 {
            get {
                return ResourceManager.GetString("ID4244", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4245: Internal error: sessionAuthenticator must support ICommunicationObject..
        /// </summary>
        internal static string ID4245 {
            get {
                return ResourceManager.GetString("ID4245", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4268: MergeClaims must have at least one identity that is not null..
        /// </summary>
        internal static string ID4268 {
            get {
                return ResourceManager.GetString("ID4268", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4271: No IAuthorizationPolicy was found for the Transport security token &apos;{0}&apos;..
        /// </summary>
        internal static string ID4271 {
            get {
                return ResourceManager.GetString("ID4271", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4274: The Configuration property of this SecurityTokenHandler is set to null. Tokens cannot be read or validated in this state. Set this property or add this SecurityTokenHandler to a SecurityTokenHandlerCollection with a valid Configuration property..
        /// </summary>
        internal static string ID4274 {
            get {
                return ResourceManager.GetString("ID4274", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4285: Cannot replace SecurityToken with Id &apos;{0}&apos; in cache with new one. Token must exist in cache to be replaced..
        /// </summary>
        internal static string ID4285 {
            get {
                return ResourceManager.GetString("ID4285", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID4287: The SecurityTokenRequirement &apos;{0}&apos; doesn&apos;t contain a ListenUri..
        /// </summary>
        internal static string ID4287 {
            get {
                return ResourceManager.GetString("ID4287", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID5004: Unrecognized namespace: &apos;{0}&apos;..
        /// </summary>
        internal static string ID5004 {
            get {
                return ResourceManager.GetString("ID5004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identity check failed for the incoming message. The expected identity is &apos;{0}&apos; for the &apos;{1}&apos; target endpoint..
        /// </summary>
        internal static string IdentityCheckFailedForIncomingMessage {
            get {
                return ResourceManager.GetString("IdentityCheckFailedForIncomingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identity check failed for the outgoing message. The expected identity is &apos;{0}&apos; for the &apos;{1}&apos; target endpoint..
        /// </summary>
        internal static string IdentityCheckFailedForOutgoingMessage {
            get {
                return ResourceManager.GetString("IdentityCheckFailedForOutgoingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring invalid part in wsdl:message name=&apos;{0}&apos; from targetNamespace=&apos;{1}&apos;. Reason: {2}.
        /// </summary>
        internal static string IgnoreMessagePart3 {
            get {
                return ResourceManager.GetString("IgnoreMessagePart3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring invalid SOAP fault extension in wsdl:operation name=&apos;{0}&apos; from targetNamespace=&apos;{1}&apos;. Reason: {2}.
        /// </summary>
        internal static string IgnoreSoapFaultBinding3 {
            get {
                return ResourceManager.GetString("IgnoreSoapFaultBinding3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring invalid SOAP header extension in wsdl:operation name=&apos;{0}&apos; from targetNamespace=&apos;{1}&apos;. Reason: {2}.
        /// </summary>
        internal static string IgnoreSoapHeaderBinding3 {
            get {
                return ResourceManager.GetString("IgnoreSoapHeaderBinding3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not impersonate the anonymous user (error=0x{0:X})..
        /// </summary>
        internal static string ImpersonateAnonymousTokenFailed {
            get {
                return ResourceManager.GetString("ImpersonateAnonymousTokenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because base ServiceContract &apos;{0}&apos; has a CallbackContract &apos;{1}&apos;, derived ServiceContract &apos;{2}&apos; must also specify either &apos;{1}&apos; or a derived type as its CallbackContract..
        /// </summary>
        internal static string InAContractInheritanceHierarchyIfParentHasCallbackChildMustToo {
            get {
                return ResourceManager.GetString("InAContractInheritanceHierarchyIfParentHasCallbackChildMustToo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In a contract inheritance hierarchy, the ServiceContract&apos;s CallbackContract must be a subtype of the CallbackContracts of all of the CallbackContracts of the ServiceContracts inherited by the original ServiceContract, Types {0} and {1} violate this rule..
        /// </summary>
        internal static string InAContractInheritanceHierarchyTheServiceContract3_2 {
            get {
                return ResourceManager.GetString("InAContractInheritanceHierarchyTheServiceContract3_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSDTC transaction manager has disabled incoming transactions..
        /// </summary>
        internal static string InboundTransactionsDisabled {
            get {
                return ResourceManager.GetString("InboundTransactionsDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For this security protocol, the incoming signing token must be an EncryptedKey..
        /// </summary>
        internal static string IncomingSigningTokenMustBeAnEncryptedKey {
            get {
                return ResourceManager.GetString("IncomingSigningTokenMustBeAnEncryptedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TransactedBatchingBehavior cannot be used when ReceiveContext is being used..
        /// </summary>
        internal static string IncompatibleBehaviors {
            get {
                return ResourceManager.GetString("IncompatibleBehaviors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint specified two different last message numbers. The reliable session is in an inconsistent state since it cannot determine the actual last message. The reliable session was faulted..
        /// </summary>
        internal static string InconsistentLastMsgNumberExceptionString {
            get {
                return ResourceManager.GetString("InconsistentLastMsgNumberExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incoming binary negotiation has invalid ValueType {0}..
        /// </summary>
        internal static string IncorrectBinaryNegotiationValueType {
            get {
                return ResourceManager.GetString("IncorrectBinaryNegotiationValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Support Provider Interface (SSPI) authentication failed. The server may not be running in an account with identity &apos;{0}&apos;. If the server is running in a service account (Network Service for example), specify the account&apos;s ServicePrincipalName as the identity in the EndpointAddress for the server. If the server is running in a user account, specify the account&apos;s UserPrincipalName as the identity in the EndpointAddress for the server..
        /// </summary>
        internal static string IncorrectSpnOrUpnSpecified {
            get {
                return ResourceManager.GetString("IncorrectSpnOrUpnSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Policy chain contains self issued URI or a managed issuer in the wrong position..
        /// </summary>
        internal static string InfoCardInvalidChain {
            get {
                return ResourceManager.GetString("InfoCardInvalidChain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open ChannelFactory as the inner channel factory was not set during the initialization process..
        /// </summary>
        internal static string InnerChannelFactoryWasNotSet {
            get {
                return ResourceManager.GetString("InnerChannelFactoryWasNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Inner listener factory of {0} must be set before this operation..
        /// </summary>
        internal static string InnerListenerFactoryNotSet {
            get {
                return ResourceManager.GetString("InnerListenerFactoryNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input {0} must be a &apos;{1}&apos; object..
        /// </summary>
        internal static string InputMustBeDelegatingHandlerElementError {
            get {
                return ResourceManager.GetString("InputMustBeDelegatingHandlerElementError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input handler list cannot be empty..
        /// </summary>
        internal static string InputTypeListEmptyError {
            get {
                return ResourceManager.GetString("InputTypeListEmptyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceHost must be configured with either a serviceType or a serviceInstance.  Both of these values are currently null..
        /// </summary>
        internal static string InstanceSettingsMustHaveTypeOrWellKnownObject0 {
            get {
                return ResourceManager.GetString("InstanceSettingsMustHaveTypeOrWellKnownObject0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient memory avaliable to complete the operation..
        /// </summary>
        internal static string InsufficentMemory {
            get {
                return ResourceManager.GetString("InsufficentMemory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credentials specified are not sufficient to carry requested operation. Please specify a valid value for {0}. .
        /// </summary>
        internal static string InsufficientCredentials {
            get {
                return ResourceManager.GetString("InsufficientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding&apos;s PeerTransportSecuritySettings can not be supported under the current system security configuration..
        /// </summary>
        internal static string InsufficientCryptoSupport {
            get {
                return ResourceManager.GetString("InsufficientCryptoSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provided information is Insufficient to create a valid connection to the resolver service..
        /// </summary>
        internal static string InsufficientResolverSettings {
            get {
                return ResourceManager.GetString("InsufficientResolverSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find interface in the Assembly.
        /// </summary>
        internal static string InterfaceNotFoundInAssembly {
            get {
                return ResourceManager.GetString("InterfaceNotFoundInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface {0} not found in configuration..
        /// </summary>
        internal static string InterfaceNotFoundInConfig {
            get {
                return ResourceManager.GetString("InterfaceNotFoundInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface Not Registered.
        /// </summary>
        internal static string InterfaceNotRegistered {
            get {
                return ResourceManager.GetString("InterfaceNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error has occurred..
        /// </summary>
        internal static string InternalError {
            get {
                return ResourceManager.GetString("InternalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SequenceAcknowledgement violates the cumulative acknowledgement invariant..
        /// </summary>
        internal static string InvalidAcknowledgementFaultReason {
            get {
                return ResourceManager.GetString("InvalidAcknowledgementFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A violation of acknowledgement protocol has been detected. An InvalidAcknowledgement fault was sent to the remote endpoint and the reliable session was faulted..
        /// </summary>
        internal static string InvalidAcknowledgementReceived {
            get {
                return ResourceManager.GetString("InvalidAcknowledgementReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security negotiation message has incorrect action &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidActionForNegotiationMessage {
            get {
                return ResourceManager.GetString("InvalidActionForNegotiationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid async Begin method signature for method {0} in ServiceContract type {1}. Your begin method must take an AsyncCallback and an object as the last two arguments and return an IAsyncResult..
        /// </summary>
        internal static string InvalidAsyncBeginMethodSignatureForMethod2 {
            get {
                return ResourceManager.GetString("InvalidAsyncBeginMethodSignatureForMethod2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid async End method signature for method {0} in ServiceContract type {1}. Your end method must take an IAsyncResult as the last argument..
        /// </summary>
        internal static string InvalidAsyncEndMethodSignatureForMethod2 {
            get {
                return ResourceManager.GetString("InvalidAsyncEndMethodSignatureForMethod2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The asynchronous result object used to end this operation was not the object that was returned when the operation was initiated..
        /// </summary>
        internal static string InvalidAsyncResult {
            get {
                return ResourceManager.GetString("InvalidAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expecting all chars - c - of id to be in set [Char.IsLetter(c), Char.IsNumber(c), &apos;.&apos;, &apos;_&apos;, &apos;-&apos;], found &apos;{0}&apos;..
        /// </summary>
        internal static string InValidateId {
            get {
                return ResourceManager.GetString("InValidateId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expecting first char - c - to be in set [Char.IsLetter(c) &amp;&amp; c == &apos;_&apos;, found &apos;{0}&apos;..
        /// </summary>
        internal static string InValidateIdPrefix {
            get {
                return ResourceManager.GetString("InValidateIdPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The (&apos;{0}&apos;, &apos;{1}&apos;) signed header contains the (&apos;{2}&apos;, &apos;{3}&apos;) attribute. The expected attribute is (&apos;{4}&apos;, &apos;{5}&apos;)..
        /// </summary>
        internal static string InvalidAttributeInSignedHeader {
            get {
                return ResourceManager.GetString("InvalidAttributeInSignedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;, &apos;{1}&apos;) uses an Issued Token with Bearer Key Type in a invalid context. The Issued Token with a Bearer Key Type can only be used as a Signed Supporting token or a Signed Encrypted Supporting token. See the SecurityBindingElement.EndpointSupportingTokenParameters property..
        /// </summary>
        internal static string InvalidBearerKeyUsage {
            get {
                return ResourceManager.GetString("InvalidBearerKeyUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransportBindingElement of type &apos;{0}&apos; in this CustomBinding returned a null or empty string for the Scheme. TransportBindingElement&apos;s Scheme must be a non-empty string..
        /// </summary>
        internal static string InvalidBindingScheme {
            get {
                return ResourceManager.GetString("InvalidBindingScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An acknowledgement was received indicating the remaining buffer space on the remote endpoint is {0}. This number cannot be less than zero. The reliable session was faulted..
        /// </summary>
        internal static string InvalidBufferRemaining {
            get {
                return ResourceManager.GetString("InvalidBufferRemaining", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client credential entered was invalid..
        /// </summary>
        internal static string InvalidClientCredentials {
            get {
                return ResourceManager.GetString("InvalidClientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security session close response was received with an invalid action &apos;{0}&apos;,.
        /// </summary>
        internal static string InvalidCloseResponseAction {
            get {
                return ResourceManager.GetString("InvalidCloseResponseAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; is not a valid content type..
        /// </summary>
        internal static string InvalidContentTypeError {
            get {
                return ResourceManager.GetString("InvalidContentTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context channel received a message with context which does not match the current context cached at the channel. Ensure service does not change context after it was originally set or disable context management by setting channel property &apos;IContextManager.Enabled&apos; to false..
        /// </summary>
        internal static string InvalidContextReceived {
            get {
                return ResourceManager.GetString("InvalidContextReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value &apos;{0}&apos; specified for &apos;name&apos; attribute of ContextMessageProperty is either null or has invalid character(s). Please ensure value of &apos;name&apos; is within the allowed value space..
        /// </summary>
        internal static string InvalidCookieContent {
            get {
                return ResourceManager.GetString("InvalidCookieContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction identifier element in the coordination context is invalid..
        /// </summary>
        internal static string InvalidCoordinationContextTransactionId {
            get {
                return ResourceManager.GetString("InvalidCoordinationContextTransactionId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid decoder state machine..
        /// </summary>
        internal static string InvalidDecoderStateMachine {
            get {
                return ResourceManager.GetString("InvalidDecoderStateMachine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected internal enum value: {0}..
        /// </summary>
        internal static string InvalidEnumValue {
            get {
                return ResourceManager.GetString("InvalidEnumValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object type must be an enum with the flag attribute and may only contain powers of two for the flags enum values or a combination of such values. Please use an enum type according to these rules..
        /// </summary>
        internal static string InvalidFlagEnumType {
            get {
                return ResourceManager.GetString("InvalidFlagEnumType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read the Identity element. The Identity type is not supported or the Identity element is empty..
        /// </summary>
        internal static string InvalidIdentityElement {
            get {
                return ResourceManager.GetString("InvalidIdentityElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The isolation level for component {0} is invalid. (The value was {1}.).
        /// </summary>
        internal static string InvalidIsolationLevelValue {
            get {
                return ResourceManager.GetString("InvalidIsolationLevelValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issued token has an invalid key size &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidIssuedTokenKeySize {
            get {
                return ResourceManager.GetString("InvalidIssuedTokenKeySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key length &apos;{0}&apos; requested is invalid..
        /// </summary>
        internal static string InvalidKeyLengthRequested {
            get {
                return ResourceManager.GetString("InvalidKeyLengthRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified key size {0} is invalid. The key size must be between {1} and {2}..
        /// </summary>
        internal static string InvalidKeySizeSpecifiedInNegotiation {
            get {
                return ResourceManager.GetString("InvalidKeySizeSpecifiedInNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The username/password Membership provider {0} specified in the configuration is invalid. No such provider was found registered under system.web/membership/providers..
        /// </summary>
        internal static string InvalidMembershipProviderSpecifiedInConfig {
            get {
                return ResourceManager.GetString("InvalidMembershipProviderSpecifiedInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify &apos;ContextMessageProperty&apos; in message when using context channel with context management enabled. Ensure the message does not have &apos;ContextMessageProperty&apos; or disable context management by setting channel property &apos;IContextManager.Enabled&apos; to false..
        /// </summary>
        internal static string InvalidMessageContext {
            get {
                return ResourceManager.GetString("InvalidMessageContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred. Invalid MessageState..
        /// </summary>
        internal static string InvalidMessageState {
            get {
                return ResourceManager.GetString("InvalidMessageState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Type of object passed as parameter &apos;{0}&apos; is not derived from {1}. Ensure that the type of object passed is either of type {1} or derived from {1}..
        /// </summary>
        internal static string InvalidObjectTypePassed {
            get {
                return ResourceManager.GetString("InvalidObjectTypePassed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The nonce is invalid or replayed..
        /// </summary>
        internal static string InvalidOrReplayedNonce {
            get {
                return ResourceManager.GetString("InvalidOrReplayedNonce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be processed because the action &apos;{0}&apos; is invalid or unrecognized..
        /// </summary>
        internal static string InvalidOrUnrecognizedAction {
            get {
                return ResourceManager.GetString("InvalidOrUnrecognizedAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} registered as a policy extension does not implement IPolicyImportExtension.
        /// </summary>
        internal static string InvalidPolicyExtensionTypeInConfig {
            get {
                return ResourceManager.GetString("InvalidPolicyExtensionTypeInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OLE Transactions propagation token received in the message could not be used to unmarshal a transaction. It may be invalid or corrupt..
        /// </summary>
        internal static string InvalidPropagationToken {
            get {
                return ResourceManager.GetString("InvalidPropagationToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The QName is invalid..
        /// </summary>
        internal static string InvalidQName {
            get {
                return ResourceManager.GetString("InvalidQName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XmlReader used for the body of the message must be positioned on an element..
        /// </summary>
        internal static string InvalidReaderPositionOnCreateMessage {
            get {
                return ResourceManager.GetString("InvalidReaderPositionOnCreateMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context identifier element in the registration header is invalid..
        /// </summary>
        internal static string InvalidRegistrationHeaderIdentifier {
            get {
                return ResourceManager.GetString("InvalidRegistrationHeaderIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token identifier element in the registration header is invalid..
        /// </summary>
        internal static string InvalidRegistrationHeaderTokenId {
            get {
                return ResourceManager.GetString("InvalidRegistrationHeaderTokenId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction identifier element in the registration header is invalid.
        /// </summary>
        internal static string InvalidRegistrationHeaderTransactionId {
            get {
                return ResourceManager.GetString("InvalidRegistrationHeaderTransactionId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security session renew response was received with an invalid action &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidRenewResponseAction {
            get {
                return ResourceManager.GetString("InvalidRenewResponseAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request for security token has invalid or malformed elements..
        /// </summary>
        internal static string InvalidRequestTrustFaultCode {
            get {
                return ResourceManager.GetString("InvalidRequestTrustFaultCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified PeerResolverMode value {0} is invalid. Please specify either PeerResolveMode.Auto, Default, or Pnrp..
        /// </summary>
        internal static string InvalidResolverMode {
            get {
                return ResourceManager.GetString("InvalidResolverMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RoleProvider {0} specified in the configuration is invalid. No such provider was found registered under system.web/roleManager/providers..
        /// </summary>
        internal static string InvalidRoleProviderSpecifiedInConfig {
            get {
                return ResourceManager.GetString("InvalidRoleProviderSpecifiedInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityToken has an invalid or unspecified RequestType &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidRstRequestType {
            get {
                return ResourceManager.GetString("InvalidRstRequestType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken has an invalid Cookie. The following error occurred when processing the Cookie: &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidSecurityContextCookie {
            get {
                return ResourceManager.GetString("InvalidSecurityContextCookie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when verifying security for the message..
        /// </summary>
        internal static string InvalidSecurityFaultReason {
            get {
                return ResourceManager.GetString("InvalidSecurityFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when processing the security tokens in the message..
        /// </summary>
        internal static string InvalidSecurityTokenFaultReason {
            get {
                return ResourceManager.GetString("InvalidSecurityTokenFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was received with a sequence number of {0}. Sequence numbers cannot be less than 1. The reliable session was faulted..
        /// </summary>
        internal static string InvalidSequenceNumber {
            get {
                return ResourceManager.GetString("InvalidSequenceNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An acknowledgement range starting at {0} and ending at {1} was received. This is an invalid acknowledgement range. The reliable session was faulted..
        /// </summary>
        internal static string InvalidSequenceRange {
            get {
                return ResourceManager.GetString("InvalidSequenceRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hour can&apos;t be lower than 0 or greater than 23..
        /// </summary>
        internal static string InvalidSkipHours {
            get {
                return ResourceManager.GetString("InvalidSkipHours", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Security Support Provider Interface (SSPI) negotiation failed..
        /// </summary>
        internal static string InvalidSspiNegotiation {
            get {
                return ResourceManager.GetString("InvalidSspiNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token provider of type &apos;{0}&apos; did not return a token of type &apos;{1}&apos;. Check the credential configuration..
        /// </summary>
        internal static string InvalidTokenProvided {
            get {
                return ResourceManager.GetString("InvalidTokenProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided URI scheme &apos;{0}&apos; is invalid; expected &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidUriScheme {
            get {
                return ResourceManager.GetString("InvalidUriScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value &apos;{0}&apos; provided for &apos;{1}&apos; from namespace &apos;{2}&apos; is an invalid absolute URI..
        /// </summary>
        internal static string InvalidUriValue {
            get {
                return ResourceManager.GetString("InvalidUriValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface with IID {0} cannot be exposed as a web service.
        /// </summary>
        internal static string InvalidWebServiceInterface {
            get {
                return ResourceManager.GetString("InvalidWebServiceInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter named {0} of type {1} on method {2} of interface {3} cannot be serialized..
        /// </summary>
        internal static string InvalidWebServiceParameter {
            get {
                return ResourceManager.GetString("InvalidWebServiceParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return value of type {0} on method {1} of interface {2} cannot be serialized..
        /// </summary>
        internal static string InvalidWebServiceReturnValue {
            get {
                return ResourceManager.GetString("InvalidWebServiceReturnValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-AtomicTransaction extended information included in the OLE Transactions propagation token was invalid or corrupt..
        /// </summary>
        internal static string InvalidWsatExtendedInfo {
            get {
                return ResourceManager.GetString("InvalidWsatExtendedInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified WSAT protocol version is invalid..
        /// </summary>
        internal static string InvalidWsatProtocolVersion {
            get {
                return ResourceManager.GetString("InvalidWsatProtocolVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} registered as a WSDL extension does not implement IWsdlImportExtension..
        /// </summary>
        internal static string InvalidWsdlExtensionTypeInConfig {
            get {
                return ResourceManager.GetString("InvalidWsdlExtensionTypeInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint responded to the {0} request with a response with action {1}. The response must be a {0}Response with action {2}. The channel could not be opened..
        /// </summary>
        internal static string InvalidWsrmResponseChannelNotOpened {
            get {
                return ResourceManager.GetString("InvalidWsrmResponseChannelNotOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint responded to the {0} request with a response with action {1}. The response must be a {0}Response with action {2}. The channel was faulted..
        /// </summary>
        internal static string InvalidWsrmResponseSessionFaultedExceptionString {
            get {
                return ResourceManager.GetString("InvalidWsrmResponseSessionFaultedExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} request&apos;s response was a message with action {1}. The response must be a {0}Response with action {2}. The reliable session cannot continue..
        /// </summary>
        internal static string InvalidWsrmResponseSessionFaultedFaultString {
            get {
                return ResourceManager.GetString("InvalidWsrmResponseSessionFaultedFaultString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid binary representation of an X.509 certificate..
        /// </summary>
        internal static string InvalidX509RawData {
            get {
                return ResourceManager.GetString("InvalidX509RawData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected XML qualified name, found &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidXmlQualifiedName {
            get {
                return ResourceManager.GetString("InvalidXmlQualifiedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received transaction has an isolation level of &apos;{0}&apos; but the service is configured with a TransactionIsolationLevel of &apos;{1}&apos;. The isolation level for received transactions and the service must be the same..
        /// </summary>
        internal static string IsolationLevelMismatch2 {
            get {
                return ResourceManager.GetString("IsolationLevelMismatch2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;, &apos;{1}&apos;) has been configured with a security algorithm suite &apos;{2}&apos; that is incompatible with the issued token key size &apos;{3}&apos; specified on the binding..
        /// </summary>
        internal static string IssuedKeySizeNotCompatibleWithAlgorithmSuite {
            get {
                return ResourceManager.GetString("IssuedKeySizeNotCompatibleWithAlgorithmSuite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token parameters to use for the issued token are not set on &apos;{0}&apos;..
        /// </summary>
        internal static string IssuedSecurityTokenParametersNotSet {
            get {
                return ResourceManager.GetString("IssuedSecurityTokenParametersNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuedToken security authentication mode requires the issued token to contain a symmetric key..
        /// </summary>
        internal static string IssuedTokenAuthenticationModeRequiresSymmetricIssuedKey {
            get {
                return ResourceManager.GetString("IssuedTokenAuthenticationModeRequiresSymmetricIssuedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The issued token cache was not specified on &apos;{0}&apos;..
        /// </summary>
        internal static string IssuedTokenCacheNotSet {
            get {
                return ResourceManager.GetString("IssuedTokenCacheNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service does not accept issued tokens..
        /// </summary>
        internal static string IssuedTokenFlowNotAllowed {
            get {
                return ResourceManager.GetString("IssuedTokenFlowNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key length &apos;{0}&apos; is not a multiple of 8 for symmetric keys..
        /// </summary>
        internal static string IssuerBindingNotPresentInTokenRequirement {
            get {
                return ResourceManager.GetString("IssuerBindingNotPresentInTokenRequirement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context for building the issuer channel was  not specified on &apos;{0}&apos;..
        /// </summary>
        internal static string IssuerBuildContextNotSet {
            get {
                return ResourceManager.GetString("IssuerBuildContextNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel behaviors configured for the issuer address &apos;{0}&apos; cannot contain a behavior of type &apos;{1}&apos;..
        /// </summary>
        internal static string IssuerChannelBehaviorsCannotContainSecurityCredentialsManager {
            get {
                return ResourceManager.GetString("IssuerChannelBehaviorsCannotContainSecurityCredentialsManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no handler registered for session token issuance event..
        /// </summary>
        internal static string IssueSessionTokenHandlerNotSet {
            get {
                return ResourceManager.GetString("IssueSessionTokenHandlerNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item&apos;s authors were not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string ItemAuthorsIgnoredOnWrite {
            get {
                return ResourceManager.GetString("ItemAuthorsIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is only available in a deserialized RequestSecurityToken..
        /// </summary>
        internal static string ItemAvailableInDeserializedRSTOnly {
            get {
                return ResourceManager.GetString("ItemAvailableInDeserializedRSTOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is only available in a deserialized RequestSecurityTokenResponse..
        /// </summary>
        internal static string ItemAvailableInDeserializedRSTROnly {
            get {
                return ResourceManager.GetString("ItemAvailableInDeserializedRSTROnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item&apos;s content was not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string ItemContentIgnoredOnWrite {
            get {
                return ResourceManager.GetString("ItemContentIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item&apos;s contributors were not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string ItemContributorsIgnoredOnWrite {
            get {
                return ResourceManager.GetString("ItemContributorsIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item&apos;s copyrights were not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string ItemCopyrightIgnoredOnWrite {
            get {
                return ResourceManager.GetString("ItemCopyrightIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item created a null category..
        /// </summary>
        internal static string ItemCreatedNullCategory {
            get {
                return ResourceManager.GetString("ItemCreatedNullCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item created a null person..
        /// </summary>
        internal static string ItemCreatedNullPerson {
            get {
                return ResourceManager.GetString("ItemCreatedNullPerson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item does not exist in SynchronizedKeyedCollection..
        /// </summary>
        internal static string ItemDoesNotExistInSynchronizedKeyedCollection0 {
            get {
                return ResourceManager.GetString("ItemDoesNotExistInSynchronizedKeyedCollection0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The syndication item formatter must be configured with a syndication item..
        /// </summary>
        internal static string ItemFormatterDoesNotHaveItem {
            get {
                return ResourceManager.GetString("ItemFormatterDoesNotHaveItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item&apos;s last updated time was not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string ItemLastUpdatedTimeIgnoredOnWrite {
            get {
                return ResourceManager.GetString("ItemLastUpdatedTimeIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item&apos;s links were not serialized as part of serializing the feed in RSS 2.0 format..
        /// </summary>
        internal static string ItemLinksIgnoredOnWrite {
            get {
                return ResourceManager.GetString("ItemLinksIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not available in deserialized RequestSecurityToken..
        /// </summary>
        internal static string ItemNotAvailableInDeserializedRST {
            get {
                return ResourceManager.GetString("ItemNotAvailableInDeserializedRST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not available in deserialized RequestSecurityTokenResponse..
        /// </summary>
        internal static string ItemNotAvailableInDeserializedRSTR {
            get {
                return ResourceManager.GetString("ItemNotAvailableInDeserializedRSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No value found for a keyword..
        /// </summary>
        internal static string KewordMissingValue {
            get {
                return ResourceManager.GetString("KewordMissingValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key length &apos;{0}&apos; is not a multiple of 8 for symmetric keys..
        /// </summary>
        internal static string KeyLengthMustBeMultipleOfEight {
            get {
                return ResourceManager.GetString("KeyLengthMustBeMultipleOfEight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key effective and expiration times must be bounded by the token effective and expiration times..
        /// </summary>
        internal static string KeyLifetimeNotWithinTokenLifetime {
            get {
                return ResourceManager.GetString("KeyLifetimeNotWithinTokenLifetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key rollover interval cannot be greater than the key renewal interval..
        /// </summary>
        internal static string KeyRolloverGreaterThanKeyRenewal {
            get {
                return ResourceManager.GetString("KeyRolloverGreaterThanKeyRenewal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was received with a sequence number higher than the sequence number of the last message in this sequence. This is a violation of the sequence number protocol. The reliable session was faulted..
        /// </summary>
        internal static string LastMessageNumberExceeded {
            get {
                return ResourceManager.GetString("LastMessageNumberExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for wsrm:MessageNumber exceeds the value of the MessageNumber accompanying a LastMessage element in this Sequence..
        /// </summary>
        internal static string LastMessageNumberExceededFaultReason {
            get {
                return ResourceManager.GetString("LastMessageNumberExceededFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback address already has a context header in it..
        /// </summary>
        internal static string ListenAddressAlreadyContainsContext {
            get {
                return ResourceManager.GetString("ListenAddressAlreadyContainsContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified channel listener at &apos;{0}&apos; is not registered with this transport manager..
        /// </summary>
        internal static string ListenerFactoryNotRegistered {
            get {
                return ResourceManager.GetString("ListenerFactoryNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A listen URI must be specified in order to open this {0}..
        /// </summary>
        internal static string ListenUriNotSet {
            get {
                return ResourceManager.GetString("ListenUriNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal SSL error (refer to Win32 status code for details). Check the server certificate to determine if it is capable of key exchange..
        /// </summary>
        internal static string LsaAuthorityNotContacted {
            get {
                return ResourceManager.GetString("LsaAuthorityNotContacted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the TransportBindingElement&apos;s ManualAddressing property was set to true on a binding that is configured to create reliable sessions. This combination is not supported and the channel factory or service host was not opened..
        /// </summary>
        internal static string ManualAddressingNotSupported {
            get {
                return ResourceManager.GetString("ManualAddressingNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manual addressing is enabled on this factory, so all messages sent must be pre-addressed..
        /// </summary>
        internal static string ManualAddressingRequiresAddressedMessages {
            get {
                return ResourceManager.GetString("ManualAddressingRequiresAddressedMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For TransferMode.Buffered, MaxReceivedMessageSize and MaxBufferSize must be the same value..
        /// </summary>
        internal static string MaxBufferSizeMustMatchMaxReceivedMessageSize {
            get {
                return ResourceManager.GetString("MaxBufferSizeMustMatchMaxReceivedMessageSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MaxBufferSize must not exceed MaxReceivedMessageSize..
        /// </summary>
        internal static string MaxBufferSizeMustNotExceedMaxReceivedMessageSize {
            get {
                return ResourceManager.GetString("MaxBufferSizeMustNotExceedMaxReceivedMessageSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recursive policy fetching limit has been reached. Check to determine if there is a loop in the federation service chain..
        /// </summary>
        internal static string MaximumPolicyRedirectionsExceeded {
            get {
                return ResourceManager.GetString("MaximumPolicyRedirectionsExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum retry count has been exceeded with no response from the remote endpoint. The reliable session was faulted. This is often an indication that the remote endpoint is no longer available..
        /// </summary>
        internal static string MaximumRetryCountExceeded {
            get {
                return ResourceManager.GetString("MaximumRetryCountExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message size quota for incoming messages ({0}) has been exceeded. To increase the quota, use the MaxReceivedMessageSize property on the appropriate binding element..
        /// </summary>
        internal static string MaxReceivedMessageSizeExceeded {
            get {
                return ResourceManager.GetString("MaxReceivedMessageSizeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This factory buffers messages, so the message sizes must be in the range of an integer value..
        /// </summary>
        internal static string MaxReceivedMessageSizeMustBeInIntegerRange {
            get {
                return ResourceManager.GetString("MaxReceivedMessageSizeMustBeInIntegerRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message size quota for outgoing messages ({0}) has been exceeded..
        /// </summary>
        internal static string MaxSentMessageSizeExceeded {
            get {
                return ResourceManager.GetString("MaxSentMessageSizeExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ... stream ....
        /// </summary>
        internal static string MessageBodyIsStream {
            get {
                return ResourceManager.GetString("MessageBodyIsStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ....
        /// </summary>
        internal static string MessageBodyIsUnknown {
            get {
                return ResourceManager.GetString("MessageBodyIsUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A body element was not found inside the message envelope..
        /// </summary>
        internal static string MessageBodyMissing {
            get {
                return ResourceManager.GetString("MessageBodyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; is not valid in message body state &apos;{1}&apos;..
        /// </summary>
        internal static string MessageBodyOperationNotValidInBodyState {
            get {
                return ResourceManager.GetString("MessageBodyOperationNotValidInBodyState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body reader is in ReadState &apos;{0}&apos; and cannot be consumed..
        /// </summary>
        internal static string MessageBodyReaderInvalidReadState {
            get {
                return ResourceManager.GetString("MessageBodyReaderInvalidReadState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ... Error reading body: {0}: {1} ....
        /// </summary>
        internal static string MessageBodyToStringError {
            get {
                return ResourceManager.GetString("MessageBodyToStringError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageBuffer is closed..
        /// </summary>
        internal static string MessageBufferIsClosed {
            get {
                return ResourceManager.GetString("MessageBufferIsClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message is closed..
        /// </summary>
        internal static string MessageClosed {
            get {
                return ResourceManager.GetString("MessageClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem occurred while reading a message. See inner exception for details..
        /// </summary>
        internal static string MessageExceptionOccurred {
            get {
                return ResourceManager.GetString("MessageExceptionOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This message cannot support the operation because it has been copied..
        /// </summary>
        internal static string MessageHasBeenCopied {
            get {
                return ResourceManager.GetString("MessageHasBeenCopied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This message cannot support the operation because it has been read..
        /// </summary>
        internal static string MessageHasBeenRead {
            get {
                return ResourceManager.GetString("MessageHasBeenRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This message cannot support the operation because it has been written..
        /// </summary>
        internal static string MessageHasBeenWritten {
            get {
                return ResourceManager.GetString("MessageHasBeenWritten", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the addressHeaders argument is invalid because the collection contains null values. Null is not a valid value for the AddressHeaderCollection..
        /// </summary>
        internal static string MessageHeaderIsNull0 {
            get {
                return ResourceManager.GetString("MessageHeaderIsNull0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the header(s) ({0}) differs from the version of the message ({1})..
        /// </summary>
        internal static string MessageHeaderVersionMismatch {
            get {
                return ResourceManager.GetString("MessageHeaderVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; header cannot be added because it does not support the specified message version &apos;{1}&apos;..
        /// </summary>
        internal static string MessageHeaderVersionNotSupported {
            get {
                return ResourceManager.GetString("MessageHeaderVersionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of the message cannot be read because it is empty..
        /// </summary>
        internal static string MessageIsEmpty {
            get {
                return ResourceManager.GetString("MessageIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For sending a message on server side composite duplex channels, the message must have either the &apos;Via&apos; property or the &apos;To&apos; header set..
        /// </summary>
        internal static string MessageMustHaveViaOrToSetForSendingOnServerSideCompositeDuplexChannels {
            get {
                return ResourceManager.GetString("MessageMustHaveViaOrToSetForSendingOnServerSideCompositeDuplexChannels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message with id {0} was not in a locked state..
        /// </summary>
        internal static string MessageNotInLockedState {
            get {
                return ResourceManager.GetString("MessageNotInLockedState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum message number for this sequence has been exceeded. The reliable session was faulted..
        /// </summary>
        internal static string MessageNumberRollover {
            get {
                return ResourceManager.GetString("MessageNumberRollover", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum value for wsrm:MessageNumber has been exceeded..
        /// </summary>
        internal static string MessageNumberRolloverFaultReason {
            get {
                return ResourceManager.GetString("MessageNumberRolloverFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message part specification must be made constant before being set..
        /// </summary>
        internal static string MessagePartSpecificationMustBeImmutable {
            get {
                return ResourceManager.GetString("MessagePartSpecificationMustBeImmutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MessagePropagationFilter threw an exception. Please refer to InnerException..
        /// </summary>
        internal static string MessagePropagationException {
            get {
                return ResourceManager.GetString("MessagePropagationException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array passed does not have enough space to hold all the properties contained by this collection..
        /// </summary>
        internal static string MessagePropertiesArraySize0 {
            get {
                return ResourceManager.GetString("MessagePropertiesArraySize0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property with the name &apos;{0}&apos; is not present..
        /// </summary>
        internal static string MessagePropertyNotFound {
            get {
                return ResourceManager.GetString("MessagePropertyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IMessageProperty could not be copied. CreateCopy returned null..
        /// </summary>
        internal static string MessagePropertyReturnedNullCopy {
            get {
                return ResourceManager.GetString("MessagePropertyReturnedNullCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The received message does not meet the required message protection order &apos;{0}&apos;..
        /// </summary>
        internal static string MessageProtectionOrderMismatch {
            get {
                return ResourceManager.GetString("MessageProtectionOrderMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manual addressing is not supported with message level security. Configure the binding (&apos;{0}&apos;, &apos;{1}&apos;) to use transport security or to not do manual addressing..
        /// </summary>
        internal static string MessageSecurityDoesNotWorkWithManualAddressing {
            get {
                return ResourceManager.GetString("MessageSecurityDoesNotWorkWithManualAddressing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message security verification failed..
        /// </summary>
        internal static string MessageSecurityVerificationFailed {
            get {
                return ResourceManager.GetString("MessageSecurityVerificationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityVersion must be WsSecurity10 or WsSecurity11..
        /// </summary>
        internal static string MessageSecurityVersionOutOfRange {
            get {
                return ResourceManager.GetString("MessageSecurityVersionOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Factory buffers messages, so the message sizes must be in the range of a int value..
        /// </summary>
        internal static string MessageSizeMustBeInIntegerRange {
            get {
                return ResourceManager.GetString("MessageSizeMustBeInIntegerRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The text encoding &apos;{0}&apos; used in the text message format is not supported..
        /// </summary>
        internal static string MessageTextEncodingNotSupported {
            get {
                return ResourceManager.GetString("MessageTextEncodingNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;To&apos; header on the message is set to Anonymous Uri &apos;{0}&apos;. Please set the &apos;To&apos; header to a non-anonymous address as message cannot be addressed to anonymous Uri on server side composite duplex channels..
        /// </summary>
        internal static string MessageToCannotBeAddressedToAnonymousOnServerSideCompositeDuplexChannels {
            get {
                return ResourceManager.GetString("MessageToCannotBeAddressedToAnonymousOnServerSideCompositeDuplexChannels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validity of message with id {0} has expired..
        /// </summary>
        internal static string MessageValidityExpired {
            get {
                return ResourceManager.GetString("MessageValidityExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the binding elements in binding &apos;{0}&apos; define a message version. At least one binding element must define a message version and return it from the GetProperty&lt;MessageVersion&gt; method..
        /// </summary>
        internal static string MessageVersionMissingFromBinding {
            get {
                return ResourceManager.GetString("MessageVersionMissingFromBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Support for {0} and {1} can not be enabled with {2} when the {3} of the {4} is &apos;{5}&apos;.  Ensure the {4} used with the binding has a {3} of &apos;{6}&apos;. .
        /// </summary>
        internal static string MessageVersionNoneRequiredForHttpMessageSupport {
            get {
                return ResourceManager.GetString("MessageVersionNoneRequiredForHttpMessageSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1}.
        /// </summary>
        internal static string MessageVersionToStringFormat {
            get {
                return ResourceManager.GetString("MessageVersionToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized message version..
        /// </summary>
        internal static string MessageVersionUnknown {
            get {
                return ResourceManager.GetString("MessageVersionUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;Via&apos; property on the message is set to Anonymous Uri &apos;{0}&apos;. Please set the &apos;Via&apos; property to a non-anonymous address as message cannot be addressed to anonymous Uri on server side composite duplex channels..
        /// </summary>
        internal static string MessageViaCannotBeAddressedToAnonymousOnServerSideCompositeDuplexChannels {
            get {
                return ResourceManager.GetString("MessageViaCannotBeAddressedToAnonymousOnServerSideCompositeDuplexChannels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message is not encrypted with a key derived from the encryption token. The binding&apos;s token parameter &apos;{0}&apos; requires key derivation..
        /// </summary>
        internal static string MessageWasNotEncryptedByDerivedEncryptionToken {
            get {
                return ResourceManager.GetString("MessageWasNotEncryptedByDerivedEncryptionToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message is not encrypted with a key derived from the encrypted key. The binding&apos;s token parameter &apos;{0}&apos; requires key derivation..
        /// </summary>
        internal static string MessageWasNotEncryptedByDerivedWrappedKey {
            get {
                return ResourceManager.GetString("MessageWasNotEncryptedByDerivedWrappedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message was not encrypted with the required encryption token..
        /// </summary>
        internal static string MessageWasNotEncryptedWithTheRequiredEncryptingToken {
            get {
                return ResourceManager.GetString("MessageWasNotEncryptedWithTheRequiredEncryptingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a problem with the XML that was received from the network. See inner exception for more details..
        /// </summary>
        internal static string MessageXmlProtocolError {
            get {
                return ResourceManager.GetString("MessageXmlProtocolError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} given in config was not found on interface {1}..
        /// </summary>
        internal static string MethodGivenInConfigNotFoundOnInterface {
            get {
                return ResourceManager.GetString("MethodGivenInConfigNotFoundOnInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding &apos;{0}&apos; was not found in config. The config file must be present and contain a binding matching the one specified in the moniker..
        /// </summary>
        internal static string MexBindingNotFoundInConfig {
            get {
                return ResourceManager.GetString("MexBindingNotFoundInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} assertion&apos;s Milliseconds attribute does not fall within the range this binding uses. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string MillisecondsNotConvertibleToBindingRange {
            get {
                return ResourceManager.GetString("MillisecondsNotConvertibleToBindingRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message was signed with a token which was different from what used to encrypt the body.  This was not expected..
        /// </summary>
        internal static string MismatchInSecurityOperationToken {
            get {
                return ResourceManager.GetString("MismatchInSecurityOperationToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receiver returned an error indicating that the content type was missing on the request to {0}.  See the inner exception for more information..
        /// </summary>
        internal static string MissingContentType {
            get {
                return ResourceManager.GetString("MissingContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to X509CertificateValidationMode.Custom requires a CustomCertificateValidator. Specify the CustomCertificateValidator property..
        /// </summary>
        internal static string MissingCustomCertificateValidator {
            get {
                return ResourceManager.GetString("MissingCustomCertificateValidator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UserNamePasswordValidationMode.Custom requires a CustomUserNamePasswordValidator. Specify the CustomUserNamePasswordValidator property..
        /// </summary>
        internal static string MissingCustomUserNamePasswordValidator {
            get {
                return ResourceManager.GetString("MissingCustomUserNamePasswordValidator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint did not include a final acknowledgement in the reply to the close sequence request message. This is a violation of the WS-ReliableMessaging protocol. The reliable session was faulted..
        /// </summary>
        internal static string MissingFinalAckExceptionString {
            get {
                return ResourceManager.GetString("MissingFinalAckExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Id is missing in encrypted item in security header..
        /// </summary>
        internal static string MissingIdInEncryptedElement {
            get {
                return ResourceManager.GetString("MissingIdInEncryptedElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The KeyInfo clause is missing or empty in EncryptedKey..
        /// </summary>
        internal static string MissingKeyInfoInEncryptedKey {
            get {
                return ResourceManager.GetString("MissingKeyInfoInEncryptedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UserNamePasswordValidationMode.MembershipProvider requires a MembershipProvider. Specify the MembershipProvider property..
        /// </summary>
        internal static string MissingMembershipProvider {
            get {
                return ResourceManager.GetString("MissingMembershipProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Request Message is missing a MessageID header. One is required to correlate a reply..
        /// </summary>
        internal static string MissingMessageID {
            get {
                return ResourceManager.GetString("MissingMessageID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsa:MessageId header must be present on a wsrm:{0} message..
        /// </summary>
        internal static string MissingMessageIdOnWsrmRequest {
            get {
                return ResourceManager.GetString("MissingMessageIdOnWsrmRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing Quote in value {0}..
        /// </summary>
        internal static string MissingQuote {
            get {
                return ResourceManager.GetString("MissingQuote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The returned wsrm:{0}Response message was missing the required wsa:RelatesTo header. This is a violation of the WS-Addressing request reply protocol. The reliable session was faulted..
        /// </summary>
        internal static string MissingRelatesToOnWsrmResponseReason {
            get {
                return ResourceManager.GetString("MissingRelatesToOnWsrmResponseReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsa:ReplyTo header must be present on a wsrm:{0} message..
        /// </summary>
        internal static string MissingReplyToOnWsrmRequest {
            get {
                return ResourceManager.GetString("MissingReplyToOnWsrmRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Address not specified..
        /// </summary>
        internal static string MonikerAddressNotSpecified {
            get {
                return ResourceManager.GetString("MonikerAddressNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding namespace not specified..
        /// </summary>
        internal static string MonikerBindingNamespacetNotSpecified {
            get {
                return ResourceManager.GetString("MonikerBindingNamespacetNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding not specified..
        /// </summary>
        internal static string MonikerBindingNotSpecified {
            get {
                return ResourceManager.GetString("MonikerBindingNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the contract in metadata matched the contract specified..
        /// </summary>
        internal static string MonikerContractNotFoundInRetreivedMex {
            get {
                return ResourceManager.GetString("MonikerContractNotFoundInRetreivedMex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contract not specified..
        /// </summary>
        internal static string MonikerContractNotSpecified {
            get {
                return ResourceManager.GetString("MonikerContractNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to do mex retrieval:{0}..
        /// </summary>
        internal static string MonikerFailedToDoMexRetrieve {
            get {
                return ResourceManager.GetString("MonikerFailedToDoMexRetrieve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid serializer specified. The only valid values are &apos;xml&apos; and &apos;datacontract&apos;..
        /// </summary>
        internal static string MonikerIncorectSerializer {
            get {
                return ResourceManager.GetString("MonikerIncorectSerializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple server identity keywords were specified. Ensure that at most one identity keyword is specified..
        /// </summary>
        internal static string MonikerIncorrectServerIdentity {
            get {
                return ResourceManager.GetString("MonikerIncorrectServerIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one type of server identity can be specified..
        /// </summary>
        internal static string MonikerIncorrectServerIdentityForMex {
            get {
                return ResourceManager.GetString("MonikerIncorrectServerIdentityForMex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mex address not specified..
        /// </summary>
        internal static string MonikerMexAddressNotSpecified {
            get {
                return ResourceManager.GetString("MonikerMexAddressNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mex binding section name attribute not specified..
        /// </summary>
        internal static string MonikerMexBindingSectionNameNotSpecified {
            get {
                return ResourceManager.GetString("MonikerMexBindingSectionNameNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moniker Missing Colon.
        /// </summary>
        internal static string MonikerMissingColon {
            get {
                return ResourceManager.GetString("MonikerMissingColon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract does not have an endpoint supporting the binding specified..
        /// </summary>
        internal static string MonikerNoneOfTheBindingMatchedTheSpecifiedBinding {
            get {
                return ResourceManager.GetString("MonikerNoneOfTheBindingMatchedTheSpecifiedBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; does not properly implement the async pattern, as more than one corresponding method &apos;{2}&apos; was found. When using the async pattern, exactly one end method must be provided. Either remove or rename one or more of the &apos;{2}&apos; methods such that there is just one, or set the AsyncPattern property on method &apos;{0}&apos; to false..
        /// </summary>
        internal static string MoreThanOneEndMethodFoundForAsyncBeginMethod3 {
            get {
                return ResourceManager.GetString("MoreThanOneEndMethodFoundForAsyncBeginMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityTokenResponseCollection received has more than one RequestSecurityTokenResponse element. Only one RequestSecurityTokenResponse element was expected..
        /// </summary>
        internal static string MoreThanOneRSTRInRSTRC {
            get {
                return ResourceManager.GetString("MoreThanOneRSTRInRSTRC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one SecurityBindingElement found in the binding (&apos;{0}&apos;, &apos;{1}) for contract (&apos;{2}&apos;, &apos;{3}&apos;). Only one SecurityBindingElement is allowed. .
        /// </summary>
        internal static string MoreThanOneSecurityBindingElementInTheBinding {
            get {
                return ResourceManager.GetString("MoreThanOneSecurityBindingElementInTheBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one supporting signature was encountered using the same supporting token &apos;{0}&apos;..
        /// </summary>
        internal static string MoreThanOneSupportingSignature {
            get {
                return ResourceManager.GetString("MoreThanOneSupportingSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The client cannot send messages. A conflict in the binding properties caused this failure. The UseActiveDirectory is set to true and QueueTransferProtocol is set to Native. To resolve the conflict, correct one of the properties..
        /// </summary>
        internal static string MsmqActiveDirectoryRequiresNativeTransfer {
            get {
                return ResourceManager.GetString("MsmqActiveDirectoryRequiresNativeTransfer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the binding&apos;s ReceiveErrorHandlig property is set to Move or Reject while the version of MSMQ installed on this system is not 4.0 or higher. The channel listener cannot be opened. Resolve the conflict by setting the ReceiveErrorHandling property to Drop or Fault, or by upgrading to MSMQ v4.0..
        /// </summary>
        internal static string MsmqAdvancedPoisonHandlingRequired {
            get {
                return ResourceManager.GetString("MsmqAdvancedPoisonHandlingRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Ambient transaction used to Complete the ReceiveContext Operation is not in an active state. .
        /// </summary>
        internal static string MsmqAmbientTransactionInactive {
            get {
                return ResourceManager.GetString("MsmqAmbientTransactionInactive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the binding&apos;s MsmqAuthenticationMode property is set to Certificate while the MsmqProtectionLevel property is not set to Sign or EncryptAndSign. The channel factory or service host cannot be opened. Resolve the conflict by correcting one of the properties..
        /// </summary>
        internal static string MsmqAuthCertificateRequiresProtectionSign {
            get {
                return ResourceManager.GetString("MsmqAuthCertificateRequiresProtectionSign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The service or the client cannot be started. A conflict in the binding properties caused this failure. The MsmqAuthenticationMode is set to None and MsmqProtectionLevel is not set to None. To resolve to conflict, correct one of the properties..
        /// </summary>
        internal static string MsmqAuthNoneRequiresProtectionNone {
            get {
                return ResourceManager.GetString("MsmqAuthNoneRequiresProtectionNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the binding&apos;s MsmqAuthenticationMode property is set to WindowsDomain while the MsmqProtectionLevel property is not set to Sign or EncryptAndSign. The channel factory or service host cannot be opened. Resolve the conflict by correcting one of the properties..
        /// </summary>
        internal static string MsmqAuthWindowsRequiresProtectionNotNone {
            get {
                return ResourceManager.GetString("MsmqAuthWindowsRequiresProtectionNotNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creation of a message security context failed because the attached sender certificate was invalid or cannot be validated. The message cannot be received. Ensure that a valid certificate is attached to the message and that the certificate is present in the receiver&apos;s certificate store..
        /// </summary>
        internal static string MsmqBadCertificate {
            get {
                return ResourceManager.GetString("MsmqBadCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content type of an incoming message is unknown or not supported. The message cannot be received. Ensure that the sender was configured to use the same message encoder as the receiver..
        /// </summary>
        internal static string MsmqBadContentType {
            get {
                return ResourceManager.GetString("MsmqBadContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incoming MSMQ message contained invalid or unexpected .NET Message Framing information in its body. The message cannot be received. Ensure that the sender is using a compatible service contract with a matching SessionMode..
        /// </summary>
        internal static string MsmqBadFrame {
            get {
                return ResourceManager.GetString("MsmqBadFrame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An XML error was encountered while reading a WCF message. The message cannot be received. Ensure the message was sent by a WCF client which used an identical message encoder..
        /// </summary>
        internal static string MsmqBadXml {
            get {
                return ResourceManager.GetString("MsmqBadXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TransactedBatchingBehavior validation failed because none of the service operations had the TransactionScopeRequired property set to true on their OperationBehavior attribute. The service host cannot be started. Ensure this requirement is met if you wish to use this behavior..
        /// </summary>
        internal static string MsmqBatchRequiresTransactionScope {
            get {
                return ResourceManager.GetString("MsmqBatchRequiresTransactionScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mismatch was detected between the serialization format specified in the MsmqIntegrationMessageProperty and the body of the MSMQ message. The message cannot be sent. The serialization format ByteArray requires the body of the MSMQ message to be of type byte[]..
        /// </summary>
        internal static string MsmqByteArrayBodyExpected {
            get {
                return ResourceManager.GetString("MsmqByteArrayBodyExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while deserializing an MSMQ message&apos;s ActiveX body. The message cannot be received. The specified variant type for the body does not match the actual MSMQ message body..
        /// </summary>
        internal static string MsmqCannotDeserializeActiveXMessage {
            get {
                return ResourceManager.GetString("MsmqCannotDeserializeActiveXMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while deserializing an MSMQ message&apos;s XML body. The message cannot be received. Ensure that the service contract is decorated with appropriate [ServiceKnownType] attributes or the TargetSerializationTypes property is set on the MsmqIntegrationBindingElement..
        /// </summary>
        internal static string MsmqCannotDeserializeXmlMessage {
            get {
                return ResourceManager.GetString("MsmqCannotDeserializeXmlMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to reacquire lock for message. .
        /// </summary>
        internal static string MsmqCannotReacquireLock {
            get {
                return ResourceManager.GetString("MsmqCannotReacquireLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The properties of the message are mismatched. The message cannot be sent. The BodyType message property cannot be specified if the ActiveX serialization format is used..
        /// </summary>
        internal static string MsmqCannotUseBodyTypeWithActiveXSerialization {
            get {
                return ResourceManager.GetString("MsmqCannotUseBodyTypeWithActiveXSerialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sender&apos;s X.509 certificate was not found. The message cannot be sent. Ensure the certificate is available in the sender&apos;s certificate store..
        /// </summary>
        internal static string MsmqCertificateNotFound {
            get {
                return ResourceManager.GetString("MsmqCertificateNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The client cannot send the message. The DeadLetterQueue is set to Custom, but the CustomDeadLetterQueue is not specified. Specify the URI of the dead letter queue for each application in the CustomDeadLetterQueue property..
        /// </summary>
        internal static string MsmqCustomRequiresPerAppDLQ {
            get {
                return ResourceManager.GetString("MsmqCustomRequiresPerAppDLQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was encountered while deserializing the message. The message cannot be received..
        /// </summary>
        internal static string MsmqDeserializationError {
            get {
                return ResourceManager.GetString("MsmqDeserializationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the endpoint listen URI does not represent an MSMQ direct format name. The service host cannot be opened. Make sure you use a direct format name for the endpoint&apos;s listen URI..
        /// </summary>
        internal static string MsmqDirectFormatNameRequiredForPoison {
            get {
                return ResourceManager.GetString("MsmqDirectFormatNameRequiredForPoison", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host in the CustomDeadLetterQueue URI is not &quot;localhost&quot; or the local machine name. A custom DLQ must reside on the sender&apos;s machine..
        /// </summary>
        internal static string MsmqDLQNotLocal {
            get {
                return ResourceManager.GetString("MsmqDLQNotLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The client cannot send a message. The specified dead letter queue does not exist or cannot be written. Ensure the queue exists with the proper authorization to write to it..
        /// </summary>
        internal static string MsmqDLQNotWriteable {
            get {
                return ResourceManager.GetString("MsmqDLQNotWriteable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the binding&apos;s MsmqProtectionLevel property is set to EncryptAndSign while the UseActiveDirectory is not set to true. The channel factory or the service host cannot be opened. Resolve the conflict by correcting one of the properties..
        /// </summary>
        internal static string MsmqEncryptRequiresUseAD {
            get {
                return ResourceManager.GetString("MsmqEncryptRequiresUseAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The service or the client cannot be started. The ExactlyOnce property is set to false and ReceiveContext is enabled. This is not supported. To resolve the conflict, either set ExactlyOnce to true or disable ReceiveContext..
        /// </summary>
        internal static string MsmqExactlyOnceNeededForReceiveContext {
            get {
                return ResourceManager.GetString("MsmqExactlyOnceNeededForReceiveContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version check failed with the error: &apos;{0}&apos;. The version of MSMQ cannot be detected All operations that are on the queued channel will fail. Ensure that MSMQ is installed and is available..
        /// </summary>
        internal static string MsmqGetPrivateComputerInformationError {
            get {
                return ResourceManager.GetString("MsmqGetPrivateComputerInformationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message ID &apos;{0}&apos; is not in the right format..
        /// </summary>
        internal static string MsmqInvalidMessageId {
            get {
                return ResourceManager.GetString("MsmqInvalidMessageId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified addressing scheme is invalid for this binding. The NetMsmqBinding scheme must be net.msmq. The MsmqIntegrationBinding scheme must be msmq.formatname..
        /// </summary>
        internal static string MsmqInvalidScheme {
            get {
                return ResourceManager.GetString("MsmqInvalidScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MsmqIntegrationBinding validation failed. The service cannot be started. The {0} binding does not support the method signature for the service operation {1} in the {2} contract. Correct the service operation to use the MsmqIntegrationBinding..
        /// </summary>
        internal static string MsmqInvalidServiceOperationForMsmqIntegrationBinding {
            get {
                return ResourceManager.GetString("MsmqInvalidServiceOperationForMsmqIntegrationBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ActiveX serialization failed because the serialization format cannot be recognized. The message cannot be received..
        /// </summary>
        internal static string MsmqInvalidTypeDeserialization {
            get {
                return ResourceManager.GetString("MsmqInvalidTypeDeserialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variant type is not recognized. The ActiveX serialization failed. The message cannot be sent. The specified variant type is not supported..
        /// </summary>
        internal static string MsmqInvalidTypeSerialization {
            get {
                return ResourceManager.GetString("MsmqInvalidTypeSerialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} ({1}, 0x{2}).
        /// </summary>
        internal static string MsmqKnownWin32Error {
            get {
                return ResourceManager.GetString("MsmqKnownWin32Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message cannot be sent because it&apos;s missing an MsmqIntegrationMessageProperty. All messages sent over MSMQ integration channels must carry the MsmqIntegrationMessageProperty..
        /// </summary>
        internal static string MsmqMessageDoesntHaveIntegrationProperty {
            get {
                return ResourceManager.GetString("MsmqMessageDoesntHaveIntegrationProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The service or the client cannot be started. The ExactlyOnce property is set to true and the Durable property is set to false. This is not supported. To resolve the conflict, correct one of these properties..
        /// </summary>
        internal static string MsmqNoAssurancesForVolatile {
            get {
                return ResourceManager.GetString("MsmqNoAssurancesForVolatile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the URI represents a subqueue and the ReceiveErrorHandling parameter is set to Move. The service host or channel listener cannot be opened. Resolve this conflict by setting the ReceiveErrorHandling to Fault, Drop or Reject..
        /// </summary>
        internal static string MsmqNoMoveForSubqueues {
            get {
                return ResourceManager.GetString("MsmqNoMoveForSubqueues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument must be a positive number or zero..
        /// </summary>
        internal static string MsmqNonNegativeArgumentExpected {
            get {
                return ResourceManager.GetString("MsmqNonNegativeArgumentExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mismatch between the binding and MSMQ queue configuration was detected. The service cannot be started. The ExactlyOnce property is set to false and the queue to read messages from is a transactional queue, Correct the error by setting the ExactlyOnce property to true or create a non-transactional binding..
        /// </summary>
        internal static string MsmqNonTransactionalQueueNeeded {
            get {
                return ResourceManager.GetString("MsmqNonTransactionalQueueNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creation of a message security context failed because the sender&apos;s SID was not found in the message. The message cannot be received. The WindowsDomain MsmqAuthenticationMode requires the sender&apos;s SID..
        /// </summary>
        internal static string MsmqNoSid {
            get {
                return ResourceManager.GetString("MsmqNoSid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while opening the queue:{0}. The  message cannot be sent or received from the queue. Ensure that MSMQ is installed and running. Also ensure that the queue is available to open with the required access mode and authorization..
        /// </summary>
        internal static string MsmqOpenError {
            get {
                return ResourceManager.GetString("MsmqOpenError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when converting the &apos;{0}&apos; queue path name to the format name: {1}. All operations on the queued channel failed. Ensure that the queue address is valid. MSMQ must be installed with Active Directory integration enabled and access to it is available..
        /// </summary>
        internal static string MsmqPathLookupError {
            get {
                return ResourceManager.GetString("MsmqPathLookupError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The client cannot send messages. The CustomDeadLetterQueue property is set, but the DeadLetterQueue property is not set to Custom. Set the DeadLetterQueue property to Custom..
        /// </summary>
        internal static string MsmqPerAppDLQRequiresCustom {
            get {
                return ResourceManager.GetString("MsmqPerAppDLQRequiresCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed. The client cannot send messages. A conflict in the binding properties is causing the failure. To use the custom dead letter queue, ExactlyOnce must be set to true to resolve to conflict..
        /// </summary>
        internal static string MsmqPerAppDLQRequiresExactlyOnce {
            get {
                return ResourceManager.GetString("MsmqPerAppDLQRequiresExactlyOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mismatch between the binding and MSMQ configuration was detected. The client cannot send messages. To use the custom dead letter queue, you must have MSMQ version 4.0 or higher. If you do not have MSMQ version 4.0 or higher set the DeadLetterQueue property to System or None. .
        /// </summary>
        internal static string MsmqPerAppDLQRequiresMsmq4 {
            get {
                return ResourceManager.GetString("MsmqPerAppDLQRequiresMsmq4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport channel detected a poison message. This occurred because the message exceeded the maximum number of delivery attempts or because the channel detected a fundamental problem with the message. The inner exception may contain additional information..
        /// </summary>
        internal static string MsmqPoisonMessage {
            get {
                return ResourceManager.GetString("MsmqPoisonMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error opening the queue. Ensure that MSMQ is installed and running, the queue exists and has proper authorization to be read from. The inner exception may contain additional information..
        /// </summary>
        internal static string MsmqQueueNotReadable {
            get {
                return ResourceManager.GetString("MsmqQueueNotReadable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ReceiveContext unlock operation failed because the message with Id &apos;{0}&apos; could not be moved from the lock subqueue to the main queue..
        /// </summary>
        internal static string MsmqReceiveContextMessageNotMoved {
            get {
                return ResourceManager.GetString("MsmqReceiveContextMessageNotMoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ReceiveContext delete operation failed because the message with Id &apos;{0}&apos; could not be received from the lock subqueue. .
        /// </summary>
        internal static string MsmqReceiveContextMessageNotReceived {
            get {
                return ResourceManager.GetString("MsmqReceiveContextMessageNotReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The queue could not be opened because the ReceiveContext feature is not supported on subqueues. Specify a different queue to receive from, or disable ReceiveContext..
        /// </summary>
        internal static string MsmqReceiveContextSubqueuesNotSupported {
            get {
                return ResourceManager.GetString("MsmqReceiveContextSubqueuesNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while receiving a message from the queue: {0}. Ensure that MSMQ is installed and running. Make sure the queue is available to receive from..
        /// </summary>
        internal static string MsmqReceiveError {
            get {
                return ResourceManager.GetString("MsmqReceiveError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A transaction error occurred for this session. The session channel is faulted. Messages in the session cannot be sent or received. A queued session cannot be associated with more than one transaction. Ensure that all messages in the session are sent or received using a single transaction..
        /// </summary>
        internal static string MsmqSameTransactionExpected {
            get {
                return ResourceManager.GetString("MsmqSameTransactionExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while sending to the queue: {0}.Ensure that MSMQ is installed and running. If you are sending to a local queue, ensure the queue exists with the required access mode and authorization..
        /// </summary>
        internal static string MsmqSendError {
            get {
                return ResourceManager.GetString("MsmqSendError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A serialization error occurred. The message cannot be sent or received. The MSMQ integration channel is able to serialize no more than {0} types..
        /// </summary>
        internal static string MsmqSerializationTableFull {
            get {
                return ResourceManager.GetString("MsmqSerializationTableFull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction associated with this session channel has been rolled back because Abort was called on the session channel before the transaction committed. .
        /// </summary>
        internal static string MsmqSessionChannelAbort {
            get {
                return ResourceManager.GetString("MsmqSessionChannelAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session channels must not have pending messages when the transactions associated with these channels are committed. Pending messages are either messages that have not been received from the session channel or messages that have been received but Complete has not been called for them. The channel has faulted and the transaction was rolled back..
        /// </summary>
        internal static string MsmqSessionChannelHasPendingItems {
            get {
                return ResourceManager.GetString("MsmqSessionChannelHasPendingItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session channels must be closed before the transaction is committed. The channel has faulted and the transaction was rolled back..
        /// </summary>
        internal static string MsmqSessionChannelsMustBeClosed {
            get {
                return ResourceManager.GetString("MsmqSessionChannelsMustBeClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The total size of messages sent in this session exceeded the maximum value of Int32. The messages in this session cannot be sent..
        /// </summary>
        internal static string MsmqSessionGramSizeMustBeInIntegerRange {
            get {
                return ResourceManager.GetString("MsmqSessionGramSizeMustBeInIntegerRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt made to close the session channel while there are still messages pending in the session. Current transaction will be rolled back and the session channel will be faulted. Messages in a session must be consumed all at once..
        /// </summary>
        internal static string MsmqSessionMessagesNotConsumed {
            get {
                return ResourceManager.GetString("MsmqSessionMessagesNotConsumed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to close the session channel while there are still messages pending in the session. The sessiongram will be rolled back to the queue and the session channel will be faulted. .
        /// </summary>
        internal static string MsmqSessionPrematureClose {
            get {
                return ResourceManager.GetString("MsmqSessionPrematureClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A serialization error occurred because of a mismatch between the value of the SerializationFormat property and the type of the body. The message cannot be sent. Ensure the type of the body is Stream or use a different SerializationFormat..
        /// </summary>
        internal static string MsmqStreamBodyExpected {
            get {
                return ResourceManager.GetString("MsmqStreamBodyExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message time to live (TTL) is too large. The message cannot be sent. The message TTL cannot exceed the Int32 maximum value..
        /// </summary>
        internal static string MsmqTimeSpanTooLarge {
            get {
                return ResourceManager.GetString("MsmqTimeSpanTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A client X.509 certificate was not specified through the channel factory&apos;s Credentials property, but one is required when the binding&apos;s MsmqAuthenticationMode property is set to Certificate. The message cannot be sent..
        /// </summary>
        internal static string MsmqTokenProviderNeededForCertificates {
            get {
                return ResourceManager.GetString("MsmqTokenProviderNeededForCertificates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mismatch occurred between the binding and the MSMQ configuration. Messages cannot be sent. The custom dead letter queue specified in the binding must be a transactional queue. Ensure that the  custom dead letter queue address is correct and the queue is a transactional queue..
        /// </summary>
        internal static string MsmqTransactedDLQExpected {
            get {
                return ResourceManager.GetString("MsmqTransactedDLQExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the binding&apos;s ExactlyOnce property is set to true while the destination queue is non-transactional. The service host cannot be opened. Resolve this conflict by setting the ExactlyOnce property to false or creating a transactional queue for this binding..
        /// </summary>
        internal static string MsmqTransactionalQueueNeeded {
            get {
                return ResourceManager.GetString("MsmqTransactionalQueueNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A transaction was not found in Transaction.Current but one is required for this operation. The channel cannot be opened. Ensure this operation is being called within a transaction scope..
        /// </summary>
        internal static string MsmqTransactionCurrentRequired {
            get {
                return ResourceManager.GetString("MsmqTransactionCurrentRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current transaction is not active. Messages in this session cannot be sent or received and the session channel will be faulted. All messages in a session must be sent or received using a single transaction..
        /// </summary>
        internal static string MsmqTransactionNotActive {
            get {
                return ResourceManager.GetString("MsmqTransactionNotActive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A transaction is required but is not available. Messages cannot be sent or received. Ensure that the transaction scope is specified to send or receive messages..
        /// </summary>
        internal static string MsmqTransactionRequired {
            get {
                return ResourceManager.GetString("MsmqTransactionRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The net.msmq scheme does not support port numbers. To correct this, remove the port number from the URI..
        /// </summary>
        internal static string MsmqUnexpectedPort {
            get {
                return ResourceManager.GetString("MsmqUnexpectedPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized error {0} (0x{1}).
        /// </summary>
        internal static string MsmqUnknownWin32Error {
            get {
                return ResourceManager.GetString("MsmqUnknownWin32Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The serialization failed because the serialization format &apos;{0}&apos; is not supported. The message cannot be sent or received..
        /// </summary>
        internal static string MsmqUnsupportedSerializationFormat {
            get {
                return ResourceManager.GetString("MsmqUnsupportedSerializationFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the binding&apos;s MsmqAuthenticationMode property is set to WindowsDomain but MSMQ is installed with Active Directory integration disabled. The channel factory or service host cannot be opened..
        /// </summary>
        internal static string MsmqWindowsAuthnRequiresAD {
            get {
                return ResourceManager.GetString("MsmqWindowsAuthnRequiresAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL in invalid. The URL for the queue cannot contain the &apos;$&apos; character. Use the syntax in net.msmq://machine/private/queueName to address a private queue..
        /// </summary>
        internal static string MsmqWrongPrivateQueueSyntax {
            get {
                return ResourceManager.GetString("MsmqWrongPrivateQueueSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URI is invalid because it is missing a host..
        /// </summary>
        internal static string MsmqWrongUri {
            get {
                return ResourceManager.GetString("MsmqWrongUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageVersion &apos;{0}&apos; not supported by MTOM encoder..
        /// </summary>
        internal static string MtomEncoderBadMessageVersion {
            get {
                return ResourceManager.GetString("MtomEncoderBadMessageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AuthenticationManager cannot be added to the binding parameters because the binding parameters already contains a AuthenticationManager &apos;{0}&apos;. If you are configuring a custom AuthenticationManager for the service, please first remove any existing AuthenticationManagers from the behaviors collection before adding the custom AuthenticationManager..
        /// </summary>
        internal static string MultipleAuthenticationManagersInServiceBindingParameters {
            get {
                return ResourceManager.GetString("MultipleAuthenticationManagersInServiceBindingParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AuthenticationSchemes cannot be added to the binding parameters because the binding parameters already contains AuthenticationSchemes &apos;{0}&apos;. If you are configuring custom AuthenticationSchemes for the service, please first remove any existing AuthenticationSchemes from the behaviors collection before adding custom AuthenticationSchemes..
        /// </summary>
        internal static string MultipleAuthenticationSchemesInServiceBindingParameters {
            get {
                return ResourceManager.GetString("MultipleAuthenticationSchemesInServiceBindingParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling IWsdlExportExtension.ExportContract twice with the same ContractDescription is not supported..
        /// </summary>
        internal static string MultipleCallsToExportContractWithSameContract {
            get {
                return ResourceManager.GetString("MultipleCallsToExportContractWithSameContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one &apos;{0}&apos; objects were found in the BindingParameters of the BindingContext.  This is usually caused by having multiple &apos;{0}&apos; objects in a CustomBinding. Remove all but one of these elements..
        /// </summary>
        internal static string MultipleCCbesInParameters {
            get {
                return ResourceManager.GetString("MultipleCCbesInParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; contains multiple &apos;{1}&apos; objects, which is invalid. At most one &apos;{1}&apos; should be specified..
        /// </summary>
        internal static string MultipleClientWebSocketFactoriesSpecified {
            get {
                return ResourceManager.GetString("MultipleClientWebSocketFactoriesSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback address contains multiple context headers. There can be at most one context header in a callback address..
        /// </summary>
        internal static string MultipleContextHeadersFoundInCallbackAddress {
            get {
                return ResourceManager.GetString("MultipleContextHeadersFoundInCallbackAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple correlation tokens were found in the security correlation state..
        /// </summary>
        internal static string MultipleCorrelationTokensFound {
            get {
                return ResourceManager.GetString("MultipleCorrelationTokensFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extensions cannot contain an Identity if one is supplied as a constructor argument..
        /// </summary>
        internal static string MultipleIdentities {
            get {
                return ResourceManager.GetString("MultipleIdentities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Policy for multiple issuer endpoints was retrieved from &apos;{0}&apos; but the relying party&apos;s policy does not specify which issuer endpoint to use. One of the endpoints was selected as the issuer endpoint to use. If you are using svcutil, the other endpoints will be available in commented form in the configuration as &lt;alternativeIssuedTokenParameters&gt;. Check the configuration to ensure that the right issuer endpoint was selected..
        /// </summary>
        internal static string MultipleIssuerEndpointsFound {
            get {
                return ResourceManager.GetString("MultipleIssuerEndpointsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token&apos;s crypto collection has multiple objects of type &apos;{0}&apos;..
        /// </summary>
        internal static string MultipleMatchingCryptosFound {
            get {
                return ResourceManager.GetString("MultipleMatchingCryptosFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one MessageEncodingBindingElement was found in the BindingParameters of the BindingContext.  This usually is caused by having multiple MessageEncodingBindingElements in a CustomBinding. Remove all but one of these elements..
        /// </summary>
        internal static string MultipleMebesInParameters {
            get {
                return ResourceManager.GetString("MultipleMebesInParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple headers with name &apos;{0}&apos; and namespace &apos;{1}&apos; found..
        /// </summary>
        internal static string MultipleMessageHeaders {
            get {
                return ResourceManager.GetString("MultipleMessageHeaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple headers with name &apos;{0}&apos; and namespace &apos;{1}&apos; and role &apos;{2}&apos; found..
        /// </summary>
        internal static string MultipleMessageHeadersWithActor {
            get {
                return ResourceManager.GetString("MultipleMessageHeadersWithActor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one PeerCustomResolverBindingElement was found in the BindingParameters of the BindingContext.  This usually is caused by having multiple PeerCustomResolverBindingElement in a CustomBinding. Remove all but one of these elements..
        /// </summary>
        internal static string MultiplePeerCustomResolverBindingElementsInParameters {
            get {
                return ResourceManager.GetString("MultiplePeerCustomResolverBindingElementsInParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one PeerResolverBindingElement was found in the BindingParameters of the BindingContext.  This usually is caused by having multiple PeerResolverBindingElements in a CustomBinding. Remove all but one of these elements..
        /// </summary>
        internal static string MultiplePeerResolverBindingElementsinParameters {
            get {
                return ResourceManager.GetString("MultiplePeerResolverBindingElementsinParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple RelatesTo headers with relationship &apos;{0}&apos; found.  Only one is allowed per relationship..
        /// </summary>
        internal static string MultipleRelatesToHeaders {
            get {
                return ResourceManager.GetString("MultipleRelatesToHeaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ClientCredentials cannot be added to the binding parameters because the binding parameters already contains a SecurityCredentialsManager &apos;{0}&apos;. If you are configuring custom credentials for the channel, please first remove any existing ClientCredentials from the behaviors collection before adding the custom credential..
        /// </summary>
        internal static string MultipleSecurityCredentialsManagersInChannelBindingParameters {
            get {
                return ResourceManager.GetString("MultipleSecurityCredentialsManagersInChannelBindingParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceCredentials cannot be added to the binding parameters because the binding parameters already contains a SecurityCredentialsManager &apos;{0}&apos;. If you are configuring custom credentials for the service, please first remove any existing ServiceCredentials from the behaviors collection before adding the custom credential..
        /// </summary>
        internal static string MultipleSecurityCredentialsManagersInServiceBindingParameters {
            get {
                return ResourceManager.GetString("MultipleSecurityCredentialsManagersInServiceBindingParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one IStreamUpgradeProviderElement was found in the BindingParameters of the BindingContext.  This usually is caused by having multiple IStreamUpgradeProviderElements in a CustomBinding. Remove all but one of these elements..
        /// </summary>
        internal static string MultipleStreamUpgradeProvidersInParameters {
            get {
                return ResourceManager.GetString("MultipleStreamUpgradeProvidersInParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple supporting token authenticators with the token parameter type equal to &apos;{0}&apos; cannot be specified. If more than one Supporting Token of the same type is expected in the response, then configure the supporting token collection with just one entry for that SecurityTokenParameters. The SecurityTokenAuthenticator that gets created from the SecurityTokenParameters will be used to authenticate multiple tokens. It is not possible to add SecurityTokenParameters of the same type in the SupportingTokenParamet [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultipleSupportingAuthenticatorsOfSameType {
            get {
                return ResourceManager.GetString("MultipleSupportingAuthenticatorsOfSameType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one version of the {0} assertion was found. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string MultipleVersionsFoundInPolicy {
            get {
                return ResourceManager.GetString("MultipleVersionsFoundInPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to concrete PeerResolver implementation must override Initialize to accept metadata about resolver service..
        /// </summary>
        internal static string MustOverrideInitialize {
            get {
                return ResourceManager.GetString("MustOverrideInitialize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registration with zero addresses detected.   Please call Register with more than zero addresses..
        /// </summary>
        internal static string MustRegisterMoreThanZeroAddresses {
            get {
                return ResourceManager.GetString("MustRegisterMoreThanZeroAddresses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cNamedArgs parameter is not supported and must be 0..
        /// </summary>
        internal static string NamedArgsNotSupported {
            get {
                return ResourceManager.GetString("NamedArgsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to load the native type library &apos;{0}&apos; was made. Native type libraries cannot be loaded..
        /// </summary>
        internal static string NativeTypeLibraryNotAllowed {
            get {
                return ResourceManager.GetString("NativeTypeLibraryNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport security negotiation failed due to an underlying IO error: {0}..
        /// </summary>
        internal static string NegotiationFailedIO {
            get {
                return ResourceManager.GetString("NegotiationFailedIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The negotiation has already completed..
        /// </summary>
        internal static string NegotiationIsCompleted {
            get {
                return ResourceManager.GetString("NegotiationIsCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The negotiation has not yet completed..
        /// </summary>
        internal static string NegotiationIsNotCompleted {
            get {
                return ResourceManager.GetString("NegotiationIsNotCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are too many active security negotiations or secure conversations at the service. Please retry later..
        /// </summary>
        internal static string NegotiationQuotasExceededFaultReason {
            get {
                return ResourceManager.GetString("NegotiationQuotasExceededFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Negotiation state already exists for context &apos;{0}&apos;..
        /// </summary>
        internal static string NegotiationStateAlreadyPresent {
            get {
                return ResourceManager.GetString("NegotiationStateAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint only processes messages using the WS-ReliableMessaging protocol. The message sent to the endpoint does not have an action or any headers used by the protocol and cannot be processed..
        /// </summary>
        internal static string NoActionNoSequenceHeaderReason {
            get {
                return ResourceManager.GetString("NoActionNoSequenceHeaderReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No AppliesTo element is present in the deserialized RequestSecurityToken/RequestSecurityTokenResponse..
        /// </summary>
        internal static string NoAppliesToPresent {
            get {
                return ResourceManager.GetString("NoAppliesToPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no pending asynchronous write on this stream. Ensure that there is pending write on the stream or verify that the implementation does not try to complete the same operation multiple times..
        /// </summary>
        internal static string NoAsyncWritePending {
            get {
                return ResourceManager.GetString("NoAsyncWritePending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No binary negotiation was received from the other party..
        /// </summary>
        internal static string NoBinaryNegoToReceive {
            get {
                return ResourceManager.GetString("NoBinaryNegoToReceive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no binary negotiation to send to the other party..
        /// </summary>
        internal static string NoBinaryNegoToSend {
            get {
                return ResourceManager.GetString("NoBinaryNegoToSend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (Name={0}, Namespace={1}) cannot be used to create a ChannelFactory or a ChannelListener because it appears to be missing a TransportBindingElement.  Every binding must have at least one binding element that derives from TransportBindingElement..
        /// </summary>
        internal static string NoChannelBuilderAvailable {
            get {
                return ResourceManager.GetString("NoChannelBuilderAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;, &apos;{1}&apos;) has been configured with a MutualCertificateDuplexBindingElement that requires a client certificate. The client certificate is currently missing..
        /// </summary>
        internal static string NoClientCertificate {
            get {
                return ResourceManager.GetString("NoClientCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityToken must specify a CloseTarget..
        /// </summary>
        internal static string NoCloseTargetSpecified {
            get {
                return ResourceManager.GetString("NoCloseTargetSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a compatible transport manager for URI &apos;{0}&apos;..
        /// </summary>
        internal static string NoCompatibleTransportManagerForUri {
            get {
                return ResourceManager.GetString("NoCompatibleTransportManagerForUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken does not have a cookie..
        /// </summary>
        internal static string NoCookieInSct {
            get {
                return ResourceManager.GetString("NoCookieInSct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No correlation token was found in the security correlation state..
        /// </summary>
        internal static string NoCorrelationTokenFound {
            get {
                return ResourceManager.GetString("NoCorrelationTokenFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No encryption message parts were specified for messages with the &apos;{0}&apos; action..
        /// </summary>
        internal static string NoEncryptionPartsSpecified {
            get {
                return ResourceManager.GetString("NoEncryptionPartsSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; does not properly implement the async pattern, as no corresponding method &apos;{2}&apos; could be found. Either provide a method called &apos;{2}&apos; or set the AsyncPattern property on method &apos;{0}&apos; to false..
        /// </summary>
        internal static string NoEndMethodFoundForAsyncBeginMethod3 {
            get {
                return ResourceManager.GetString("NoEndMethodFoundForAsyncBeginMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The keyword &apos;{0}&apos; has no equal sign following it. Ensure that each keyword is followed by an equal sign and a value. .
        /// </summary>
        internal static string NoEqualSignFound {
            get {
                return ResourceManager.GetString("NoEqualSignFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object does not support the interface &apos;{0}&apos;..
        /// </summary>
        internal static string NoInterface {
            get {
                return ResourceManager.GetString("NoInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No IPEndpoints were found for host {0}..
        /// </summary>
        internal static string NoIPEndpointsFoundForHost {
            get {
                return ResourceManager.GetString("NoIPEndpointsFoundForHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The KeyInfo value was not found in the encrypted item to find the decrypting token..
        /// </summary>
        internal static string NoKeyInfoInEncryptedItemToFindDecryptingToken {
            get {
                return ResourceManager.GetString("NoKeyInfoInEncryptedItemToFindDecryptingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No KeyInfo in signature to find verification token..
        /// </summary>
        internal static string NoKeyInfoInSignatureToFindVerificationToken {
            get {
                return ResourceManager.GetString("NoKeyInfoInSignatureToFindVerificationToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RequestedSecurityToken not specified in RequestSecurityTokenResponse..
        /// </summary>
        internal static string NoLicenseXml {
            get {
                return ResourceManager.GetString("NoLicenseXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fault reason does not contain any text translations..
        /// </summary>
        internal static string NoMatchingTranslationFoundForFaultText {
            get {
                return ResourceManager.GetString("NoMatchingTranslationFoundForFaultText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified nonce is too short. The minimum required nonce length is 4 bytes..
        /// </summary>
        internal static string NonceLengthTooShort {
            get {
                return ResourceManager.GetString("NonceLengthTooShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ReplayWindow and ClockSkew cannot be the maximum possible value when replay detection is enabled..
        /// </summary>
        internal static string NoncesCachedInfinitely {
            get {
                return ResourceManager.GetString("NoncesCachedInfinitely", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no negotiation message to send..
        /// </summary>
        internal static string NoNegotiationMessageToSend {
            get {
                return ResourceManager.GetString("NoNegotiationMessageToSend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message with action {0} is an empty message. This message cannot be processed because the body of this WS-ReliableMessaging protocol message must carry information pertaining to a reliable session..
        /// </summary>
        internal static string NonEmptyWsrmMessageIsEmpty {
            get {
                return ResourceManager.GetString("NonEmptyWsrmMessageIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the methods were found for interface {0}..
        /// </summary>
        internal static string NoneOfTheMethodsForInterfaceFoundInConfig {
            get {
                return ResourceManager.GetString("NoneOfTheMethodsForInterfaceFoundInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The translation set cannot contain nulls..
        /// </summary>
        internal static string NoNullTranslations {
            get {
                return ResourceManager.GetString("NoNullTranslations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action {0} is not supported by this endpoint. Only WS-ReliableMessaging February 2005 messages are processed by this endpoint..
        /// </summary>
        internal static string NonWsrmFeb2005ActionNotSupported {
            get {
                return ResourceManager.GetString("NonWsrmFeb2005ActionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No outgoing EndpointAddress is available to check the identity on a message to be sent..
        /// </summary>
        internal static string NoOutgoingEndpointAddressAvailableForDoingIdentityCheck {
            get {
                return ResourceManager.GetString("NoOutgoingEndpointAddressAvailableForDoingIdentityCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No outgoing EndpointAddress is available to check the identity on a received reply..
        /// </summary>
        internal static string NoOutgoingEndpointAddressAvailableForDoingIdentityCheckOnReply {
            get {
                return ResourceManager.GetString("NoOutgoingEndpointAddressAvailableForDoingIdentityCheckOnReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No signature was created because not part of the message matched the supplied message part specification..
        /// </summary>
        internal static string NoPartsOfMessageMatchedPartsToSign {
            get {
                return ResourceManager.GetString("NoPartsOfMessageMatchedPartsToSign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No primary signature available for supporting token signature verification..
        /// </summary>
        internal static string NoPrimarySignatureAvailableForSupportingTokenSignatureVerification {
            get {
                return ResourceManager.GetString("NoPrimarySignatureAvailableForSupportingTokenSignatureVerification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No custom principal is specified in the authorization context..
        /// </summary>
        internal static string NoPrincipalSpecifiedInAuthorizationContext {
            get {
                return ResourceManager.GetString("NoPrincipalSpecifiedInAuthorizationContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityToken must specify a RenewTarget..
        /// </summary>
        internal static string NoRenewTargetSpecified {
            get {
                return ResourceManager.GetString("NoRenewTargetSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No RequestSecurityTokenResponse elements were found..
        /// </summary>
        internal static string NoRequestSecurityTokenResponseElements {
            get {
                return ResourceManager.GetString("NoRequestSecurityTokenResponseElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find a SecurityBindingElement..
        /// </summary>
        internal static string NoSecurityBindingElementFound {
            get {
                return ResourceManager.GetString("NoSecurityBindingElementFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken does not have a context-id..
        /// </summary>
        internal static string NoSecurityContextIdentifier {
            get {
                return ResourceManager.GetString("NoSecurityContextIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server&apos;s X509SecurityTokenProvider cannot be null..
        /// </summary>
        internal static string NoServerX509TokenProvider {
            get {
                return ResourceManager.GetString("NoServerX509TokenProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Final RSTR from other party does not contain a service token..
        /// </summary>
        internal static string NoServiceTokenReceived {
            get {
                return ResourceManager.GetString("NoServiceTokenReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No session token was present in the message..
        /// </summary>
        internal static string NoSessionTokenPresentInMessage {
            get {
                return ResourceManager.GetString("NoSessionTokenPresentInMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No signature is available in the security header to provide the nonce for replay detection..
        /// </summary>
        internal static string NoSignatureAvailableInSecurityHeaderToDoReplayDetection {
            get {
                return ResourceManager.GetString("NoSignatureAvailableInSecurityHeaderToDoReplayDetection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No signature message parts were specified for messages with the &apos;{0}&apos; action..
        /// </summary>
        internal static string NoSignaturePartsSpecified {
            get {
                return ResourceManager.GetString("NoSignaturePartsSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No signing token is available to do an incoming identity check..
        /// </summary>
        internal static string NoSigningTokenAvailableToDoIncomingIdentityCheck {
            get {
                return ResourceManager.GetString("NoSigningTokenAvailableToDoIncomingIdentityCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;,&apos;{1}&apos;) supports streaming which cannot be configured together with message level security.  Consider choosing a different transfer mode or choosing the transport level security..
        /// </summary>
        internal static string NoStreamingWithSecurity {
            get {
                return ResourceManager.GetString("NoStreamingWithSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument passed to SetObject is not a COM object..
        /// </summary>
        internal static string NotAComObject {
            get {
                return ResourceManager.GetString("NotAComObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some of the binding elements in this binding were not used when building the ChannelFactory / ChannelListener.  This may be have been caused by the binding elements being misordered.  The recommended order for binding elements is: TransactionFlow, ReliableSession, Security, CompositeDuplex, OneWay, StreamSecurity, MessageEncoding, Transport.  Note that the TransportBindingElement must be last.  The following binding elements were not built: {0}..
        /// </summary>
        internal static string NotAllBindingElementsBuilt {
            get {
                return ResourceManager.GetString("NotAllBindingElementsBuilt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLSID {0} is not allowed..
        /// </summary>
        internal static string NotAllowedPersistableCLSID {
            get {
                return ResourceManager.GetString("NotAllowedPersistableCLSID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint closed the session before acknowledging all responses. All replies could not be delivered. The reliable session was faulted..
        /// </summary>
        internal static string NotAllRepliesAcknowledgedExceptionString {
            get {
                return ResourceManager.GetString("NotAllRepliesAcknowledgedExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all the signatures in the request message were confirmed in the reply message..
        /// </summary>
        internal static string NotAllSignaturesConfirmed {
            get {
                return ResourceManager.GetString("NotAllSignaturesConfirmed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An event notification threw an exception. Please refer to InnerException..
        /// </summary>
        internal static string NotificationException {
            get {
                return ResourceManager.GetString("NotificationException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No timestamp is available in the security header to do replay detection..
        /// </summary>
        internal static string NoTimestampAvailableInSecurityHeaderToDoReplayDetection {
            get {
                return ResourceManager.GetString("NoTimestampAvailableInSecurityHeaderToDoReplayDetection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Infocard token was found in the ChannelParameters. Infocard requires that the security token be created during channel intialization..
        /// </summary>
        internal static string NoTokenInChannelParameters {
            get {
                return ResourceManager.GetString("NoTokenInChannelParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no transaction in the context of the operation..
        /// </summary>
        internal static string NoTransactionInContext {
            get {
                return ResourceManager.GetString("NoTransactionInContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find an appropriate transport manager for listen URI &apos;{0}&apos;..
        /// </summary>
        internal static string NoTransportManagerForUri {
            get {
                return ResourceManager.GetString("NoTransportManagerForUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security policy expert failed. The provided transport token assertion of type &apos;{0}&apos; did not create a transport token assertion to include the sp:TransportBinding security policy assertion..
        /// </summary>
        internal static string NoTransportTokenAssertionProvided {
            get {
                return ResourceManager.GetString("NoTransportTokenAssertionProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation: {0} is not valid while the object is in closed state..
        /// </summary>
        internal static string NotValidWhenClosed {
            get {
                return ResourceManager.GetString("NotValidWhenClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation: {0} is not valid while the object is in open state..
        /// </summary>
        internal static string NotValidWhenOpen {
            get {
                return ResourceManager.GetString("NotValidWhenOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No type library available for interface.
        /// </summary>
        internal static string NoTypeLibraryFoundForInterface {
            get {
                return ResourceManager.GetString("NoTypeLibraryFoundForInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find usable policy alternatives..
        /// </summary>
        internal static string NoUsablePolicyAssertions {
            get {
                return ResourceManager.GetString("NoUsablePolicyAssertions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required UserNameSecurityToken was not provided..
        /// </summary>
        internal static string NoUserNameTokenProvided {
            get {
                return ResourceManager.GetString("NoUserNameTokenProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No value..
        /// </summary>
        internal static string NoValue0 {
            get {
                return ResourceManager.GetString("NoValue0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A transaction vote request was completed, but there was no outstanding vote request..
        /// </summary>
        internal static string NoVoteIssued {
            get {
                return ResourceManager.GetString("NoVoteIssued", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server challenged this request and streamed requests cannot be resubmitted. To enable HTTP server challenges, set your TransferMode to Buffered or StreamedResponse..
        /// </summary>
        internal static string NullReferenceOnHttpResponse {
            get {
                return ResourceManager.GetString("NullReferenceOnHttpResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not formulate request message for security session operation &apos;{0}&apos;..
        /// </summary>
        internal static string NullSessionRequestMessage {
            get {
                return ResourceManager.GetString("NullSessionRequestMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} object has been disposed..
        /// </summary>
        internal static string ObjectDisposed {
            get {
                return ResourceManager.GetString("ObjectDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is read-only..
        /// </summary>
        internal static string ObjectIsReadOnly {
            get {
                return ResourceManager.GetString("ObjectIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot dequeue a &apos;{0}&apos; object while in the Created state..
        /// </summary>
        internal static string ObjectMustBeOpenedToDequeue {
            get {
                return ResourceManager.GetString("ObjectMustBeOpenedToDequeue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified offset exceeds the upper bound of the buffer ({0})..
        /// </summary>
        internal static string OffsetExceedsBufferBound {
            get {
                return ResourceManager.GetString("OffsetExceedsBufferBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified offset exceeds the buffer size ({0} bytes)..
        /// </summary>
        internal static string OffsetExceedsBufferSize {
            get {
                return ResourceManager.GetString("OffsetExceedsBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OLE Transactions header was invalid or corrupt..
        /// </summary>
        internal static string OleTxHeaderCorrupt {
            get {
                return ResourceManager.GetString("OleTxHeaderCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{1}&apos; in type &apos;{0}&apos; is marked IsOneWay=true and declares one or more FaultContractAttributes. One-way methods cannot declare FaultContractAttributes. To fix it, change IsOneWay to false or remove the FaultContractAttributes..
        /// </summary>
        internal static string OneWayAndFaultsIncompatible2 {
            get {
                return ResourceManager.GetString("OneWayAndFaultsIncompatible2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A one-way header was expected on this message and none was found. It is possible that your bindings are mismatched..
        /// </summary>
        internal static string OneWayHeaderNotFound {
            get {
                return ResourceManager.GetString("OneWayHeaderNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding &apos;{0}&apos; is not configured properly. OneWayBindingElement requires an inner binding element that supports IRequestChannel/IReplyChannel or IDuplexSessionChannel. .
        /// </summary>
        internal static string OneWayInternalTypeNotSupported {
            get {
                return ResourceManager.GetString("OneWayInternalTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The one-way operation returned a fault message.  The reason for the fault was &apos;{0}&apos;..
        /// </summary>
        internal static string OneWayOperationReturnedFault {
            get {
                return ResourceManager.GetString("OneWayOperationReturnedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The one-way operation returned a fault message with Action=&apos;{0}&apos;..
        /// </summary>
        internal static string OneWayOperationReturnedLargeFault {
            get {
                return ResourceManager.GetString("OneWayOperationReturnedLargeFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The one-way operation returned a non-null message with Action=&apos;{0}&apos;..
        /// </summary>
        internal static string OneWayOperationReturnedMessage {
            get {
                return ResourceManager.GetString("OneWayOperationReturnedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One way operation {0} cannot not specify a reply action..
        /// </summary>
        internal static string OneWayOperationShouldNotSpecifyAReplyAction1 {
            get {
                return ResourceManager.GetString("OneWayOperationShouldNotSpecifyAReplyAction1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A response was received from a one-way send over the underlying IRequestChannel. Make sure the remote endpoint has a compatible binding at its endpoint (one that contains OneWayBindingElement)..
        /// </summary>
        internal static string OneWayUnexpectedResponse {
            get {
                return ResourceManager.GetString("OneWayUnexpectedResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only body return values are supported currently for protection, MessagePartDescription was specified..
        /// </summary>
        internal static string OnlyBodyReturnValuesSupported {
            get {
                return ResourceManager.GetString("OnlyBodyReturnValuesSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided SafeArray parameter was passed by value. SafeArray parameters must be passed by reference..
        /// </summary>
        internal static string OnlyByRefVariantSafeArraysAllowed {
            get {
                return ResourceManager.GetString("OnlyByRefVariantSafeArraysAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ Integration service &apos;{0}&apos; specified in configuration is not in a supported format and could not be started. Ensure that the configuration is correctly specified..
        /// </summary>
        internal static string OnlyClsidsAllowedForServiceType {
            get {
                return ResourceManager.GetString("OnlyClsidsAllowedForServiceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only malformed Messages are supported..
        /// </summary>
        internal static string OnlyMalformedMessagesAreSupported {
            get {
                return ResourceManager.GetString("OnlyMalformedMessagesAreSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-dimensional SafeArray parameters cannot be used..
        /// </summary>
        internal static string OnlyOneDimensionalSafeArraysAllowed {
            get {
                return ResourceManager.GetString("OnlyOneDimensionalSafeArraysAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The symmetric security protocol can either be configured with a symmetric token provider and a symmetric token authenticator or an asymmetric token provider. It cannot be configured with both..
        /// </summary>
        internal static string OnlyOneOfEncryptedKeyOrSymmetricBindingCanBeSelected {
            get {
                return ResourceManager.GetString("OnlyOneOfEncryptedKeyOrSymmetricBindingCanBeSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A VARIANT parameter was passed by value. VARIANT parameters must be passed by reference..
        /// </summary>
        internal static string OnlyVariantAllowedByRef {
            get {
                return ResourceManager.GetString("OnlyVariantAllowedByRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The elements of the SafeArray must be of the type VARIANT..
        /// </summary>
        internal static string OnlyVariantTypeElementsAllowed {
            get {
                return ResourceManager.GetString("OnlyVariantTypeElementsAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The lower bound of the SafeArray was not zero. SafeArrays with a lower bound other than zero cannot be used..
        /// </summary>
        internal static string OnlyZeroLBoundAllowed {
            get {
                return ResourceManager.GetString("OnlyZeroLBoundAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not open the process token (error=0x{0:X})..
        /// </summary>
        internal static string OpenProcessTokenFailed {
            get {
                return ResourceManager.GetString("OpenProcessTokenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not open the thread token (error=0x{0:X})..
        /// </summary>
        internal static string OpenThreadTokenFailed {
            get {
                return ResourceManager.GetString("OpenThreadTokenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open timed out after {0} while establishing a transport session to {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string OpenTimedOutEstablishingTransportSession {
            get {
                return ResourceManager.GetString("OpenTimedOutEstablishingTransportSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation was aborted while establishing a connection to {0}..
        /// </summary>
        internal static string OperationAbortedDuringConnectionEstablishment {
            get {
                return ResourceManager.GetString("OperationAbortedDuringConnectionEstablishment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be done after processing is started..
        /// </summary>
        internal static string OperationCannotBeDoneAfterProcessingIsStarted {
            get {
                return ResourceManager.GetString("OperationCannotBeDoneAfterProcessingIsStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service operation &apos;{0}&apos; that belongs to the contract with the &apos;{1}&apos; name and the &apos;{2}&apos; namespace does not allow impersonation..
        /// </summary>
        internal static string OperationDoesNotAllowImpersonation {
            get {
                return ResourceManager.GetString("OperationDoesNotAllowImpersonation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not valid until security negotiation is complete..
        /// </summary>
        internal static string OperationInvalidBeforeSecurityNegotiation {
            get {
                return ResourceManager.GetString("OperationInvalidBeforeSecurityNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{0}&apos; could not be found. Ensure that the correct method name is specified..
        /// </summary>
        internal static string OperationNotFound {
            get {
                return ResourceManager.GetString("OperationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation property of OperationAttributeGenerationContext is required to generate an attribute based on settings. .
        /// </summary>
        internal static string OperationPropertyIsRequiredForAttributeGeneration {
            get {
                return ResourceManager.GetString("OperationPropertyIsRequiredForAttributeGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The optional WSDL extension element &apos;{0}&apos; from namespace &apos;{1}&apos; was not handled.
        ///XPath: {2}.
        /// </summary>
        internal static string OptionalWSDLExtensionIgnored {
            get {
                return ResourceManager.GetString("OptionalWSDLExtensionIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The outer element name must be specified..
        /// </summary>
        internal static string OuterElementNameNotSpecified {
            get {
                return ResourceManager.GetString("OuterElementNameNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The outer name of the element extension cannot be empty..
        /// </summary>
        internal static string OuterNameOfElementExtensionEmpty {
            get {
                return ResourceManager.GetString("OuterNameOfElementExtensionEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send cannot be called when the session does not expect output..
        /// </summary>
        internal static string OutputNotExpected {
            get {
                return ResourceManager.GetString("OutputNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package full name &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string PackageFullNameInvalid {
            get {
                return ResourceManager.GetString("PackageFullNameInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter cannot be empty..
        /// </summary>
        internal static string ParameterCannotBeEmpty {
            get {
                return ResourceManager.GetString("ParameterCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to log messages. Application may be running in partial trust. Either disable message logging or configure the application to run in full trust..
        /// </summary>
        internal static string PartialTrustMessageLoggingNotEnabled {
            get {
                return ResourceManager.GetString("PartialTrustMessageLoggingNotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to performance counters is denied. Application may be running in partial trust. Either disable performance counters or configure the application to run in full trust..
        /// </summary>
        internal static string PartialTrustPerformanceCountersNotEnabled {
            get {
                return ResourceManager.GetString("PartialTrustPerformanceCountersNotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Service with name &apos;{0}&apos; could not be constructed because the application does not have permission to construct the type: both the Type and its default parameter-less constructor must be public..
        /// </summary>
        internal static string PartialTrustServiceCtorNotVisible {
            get {
                return ResourceManager.GetString("PartialTrustServiceCtorNotVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Method with name &apos;{1}&apos; in Type &apos;{0}&apos; could not be invoked because the application does not have permission to invoke the method: both the Method and its containing Type must be public..
        /// </summary>
        internal static string PartialTrustServiceMethodNotVisible {
            get {
                return ResourceManager.GetString("PartialTrustServiceMethodNotVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to windows management instrumentation (WMI) is denied. Application may be running in partial trust. Either disable WMI or configure the application to run in full trust..
        /// </summary>
        internal static string PartialTrustWMINotEnabled {
            get {
                return ResourceManager.GetString("PartialTrustWMINotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate generation has failed. Please see the inner exception for more information..
        /// </summary>
        internal static string PeerCertGenFailure {
            get {
                return ResourceManager.GetString("PeerCertGenFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid message: the peer channel via ({0}) has a size of ({1}) it exceeds the maximum via size of ({2})..
        /// </summary>
        internal static string PeerChannelViaTooLong {
            get {
                return ResourceManager.GetString("PeerChannelViaTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application message contains a header that conflicts with a PeerChannel specific header. Name = {0} and Namespace = {1}..
        /// </summary>
        internal static string PeerConflictingHeader {
            get {
                return ResourceManager.GetString("PeerConflictingHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding settings conflict with an existing instance that is using the same mesh name. Check the value of the property {0}..
        /// </summary>
        internal static string PeerConflictingPeerNodeSettings {
            get {
                return ResourceManager.GetString("PeerConflictingPeerNodeSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error. PeerFlooder instance is already disposed. It cannot be used to send messages..
        /// </summary>
        internal static string PeerFlooderDisposed {
            get {
                return ResourceManager.GetString("PeerFlooderDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageBody does not contain a valid {0} message.  Please ensure that the message is well formed..
        /// </summary>
        internal static string PeerInvalidMessageBody {
            get {
                return ResourceManager.GetString("PeerInvalidMessageBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registrationId {0} is invalid..
        /// </summary>
        internal static string PeerInvalidRegistrationId {
            get {
                return ResourceManager.GetString("PeerInvalidRegistrationId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LinkUtility message received from a neighbor has invalid values for usefull &apos;{0}&apos; and total &apos;{1}&apos;..
        /// </summary>
        internal static string PeerLinkUtilityInvalidValues {
            get {
                return ResourceManager.GetString("PeerLinkUtilityInvalidValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ListenIPAddress {0} is invalid..
        /// </summary>
        internal static string PeerListenIPAddressInvalid {
            get {
                return ResourceManager.GetString("PeerListenIPAddressInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maintainer is attempting a connection to Peer {0} for the mesh {1}..
        /// </summary>
        internal static string PeerMaintainerConnect {
            get {
                return ResourceManager.GetString("PeerMaintainerConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maintainer encountered exception when attempting a connection to Peer {0} for the mesh {1}. Exception is {2}..
        /// </summary>
        internal static string PeerMaintainerConnectFailure {
            get {
                return ResourceManager.GetString("PeerMaintainerConnectFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mantainer is attempting to establish additional connections for the mesh {0}..
        /// </summary>
        internal static string PeerMaintainerConnectMode {
            get {
                return ResourceManager.GetString("PeerMaintainerConnectMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mantainer&apos;s InitialConnect is running for the mesh {0}..
        /// </summary>
        internal static string PeerMaintainerInitialConnect {
            get {
                return ResourceManager.GetString("PeerMaintainerInitialConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mantainer is attempting to prune connections for the mesh {0}..
        /// </summary>
        internal static string PeerMaintainerPruneMode {
            get {
                return ResourceManager.GetString("PeerMaintainerPruneMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maintainer is starting for the mesh {0}..
        /// </summary>
        internal static string PeerMaintainerStarting {
            get {
                return ResourceManager.GetString("PeerMaintainerStarting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MaxReceivedMessageSize of the associated listener ({0}) is greater than the MaxReceivedMessageSize of the PeerNode ({1}) with the meshid ({2}), ensure that all ChannelFactories and Endpoints for this mesh have the same configuration for MaxRecievedMessageSize..
        /// </summary>
        internal static string PeerMaxReceivedMessageSizeConflict {
            get {
                return ResourceManager.GetString("PeerMaxReceivedMessageSizeConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message with action {0} received from a neighbor is missing a via Header..
        /// </summary>
        internal static string PeerMessageMustHaveVia {
            get {
                return ResourceManager.GetString("PeerMessageMustHaveVia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: Peer Neighbor state change from {0} to {1} is invalid..
        /// </summary>
        internal static string PeerNeighborInvalidState {
            get {
                return ResourceManager.GetString("PeerNeighborInvalidState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PeerNode cannot be opened because it has been Aborted..
        /// </summary>
        internal static string PeerNodeAborted {
            get {
                return ResourceManager.GetString("PeerNodeAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MeshId: {0}, Node Id: {1}, Online: {2}, Open: {3}, Port: {4}.
        /// </summary>
        internal static string PeerNodeToStringFormat {
            get {
                return ResourceManager.GetString("PeerNodeToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh info can not be null.  Please ensure that the Refresh operation is invoked with a valid RefreshInfo object..
        /// </summary>
        internal static string PeerNullRefreshInfo {
            get {
                return ResourceManager.GetString("PeerNullRefreshInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registration info can not be null.  Please ensure that the Register operation is invoked with a valid RegistrationInfo object..
        /// </summary>
        internal static string PeerNullRegistrationInfo {
            get {
                return ResourceManager.GetString("PeerNullRegistrationInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolve info can not be null.  Please ensure that the Resolve operation is invoked with a valid ResolveInfo object..
        /// </summary>
        internal static string PeerNullResolveInfo {
            get {
                return ResourceManager.GetString("PeerNullResolveInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error. Address of the Service cannot be registered with PNRP..
        /// </summary>
        internal static string PeerPnrpIllegalUri {
            get {
                return ResourceManager.GetString("PeerPnrpIllegalUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PNRP is not available. Please refer to the documentation with your system for details on how to install and enable PNRP..
        /// </summary>
        internal static string PeerPnrpNotAvailable {
            get {
                return ResourceManager.GetString("PeerPnrpNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PNRP service is not installed on this machine. Please refer to the documentation with your system for details on how to install and enable PNRP..
        /// </summary>
        internal static string PeerPnrpNotInstalled {
            get {
                return ResourceManager.GetString("PeerPnrpNotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerResolverBindingElement is required in the {0} binding. The default resolver (PNRP) is not available..
        /// </summary>
        internal static string PeerResolverBindingElementRequired {
            get {
                return ResourceManager.GetString("PeerResolverBindingElementRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified ResolverType: {0} cannot be loaded.  Please ensure that the type name specified refers to a type that can be loaded..
        /// </summary>
        internal static string PeerResolverInvalid {
            get {
                return ResourceManager.GetString("PeerResolverInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolver must be specified. The default resolver (PNRP) is not available. Please refer to the documentation with your system for details on how to install and enable PNRP..
        /// </summary>
        internal static string PeerResolverRequired {
            get {
                return ResourceManager.GetString("PeerResolverRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified resolver settings are not enough to create a valid resolver.  Please ensure that a ResolverType and an Address is specified for the custom resolver..
        /// </summary>
        internal static string PeerResolverSettingsInvalid {
            get {
                return ResourceManager.GetString("PeerResolverSettingsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to prune the slow neighbor for the mesh {0}..
        /// </summary>
        internal static string PeerThrottlePruning {
            get {
                return ResourceManager.GetString("PeerThrottlePruning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throttle on the mesh {0} waiting..
        /// </summary>
        internal static string PeerThrottleWaiting {
            get {
                return ResourceManager.GetString("PeerThrottleWaiting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are too many pending secure conversations on the server. Please retry later..
        /// </summary>
        internal static string PendingSessionsExceededFaultReason {
            get {
                return ResourceManager.GetString("PendingSessionsExceededFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to QueryInterface succeeded but the persistable type wrapper was null..
        /// </summary>
        internal static string PersistWrapperIsNull {
            get {
                return ResourceManager.GetString("PersistWrapperIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server cannot accept pipe: {0}.
        /// </summary>
        internal static string PipeAcceptFailed {
            get {
                return ResourceManager.GetString("PipeAcceptFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe cannot be written to or read from because it is already in the process of being closed..
        /// </summary>
        internal static string PipeAlreadyClosing {
            get {
                return ResourceManager.GetString("PipeAlreadyClosing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe cannot be written to because it is already in the process of shutting down..
        /// </summary>
        internal static string PipeAlreadyShuttingDown {
            get {
                return ResourceManager.GetString("PipeAlreadyShuttingDown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe cannot be closed while a write to the pipe is pending..
        /// </summary>
        internal static string PipeCantCloseWithPendingWrite {
            get {
                return ResourceManager.GetString("PipeCantCloseWithPendingWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be completed because the pipe was closed.  This may have been caused by the application on the other end of the pipe exiting..
        /// </summary>
        internal static string PipeClosed {
            get {
                return ResourceManager.GetString("PipeClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe could not close gracefully.  This may be caused by the application on the other end of the pipe exiting..
        /// </summary>
        internal static string PipeCloseFailed {
            get {
                return ResourceManager.GetString("PipeCloseFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A pipe endpoint exists for &apos;{0}&apos;, but the connect failed: {1}.
        /// </summary>
        internal static string PipeConnectAddressFailed {
            get {
                return ResourceManager.GetString("PipeConnectAddressFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot connect to endpoint &apos;{0}&apos;. .
        /// </summary>
        internal static string PipeConnectFailed {
            get {
                return ResourceManager.GetString("PipeConnectFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe connection was aborted because an asynchronous read from the pipe did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string PipeConnectionAbortedReadTimedOut {
            get {
                return ResourceManager.GetString("PipeConnectionAbortedReadTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe connection was aborted because an asynchronous write to the pipe did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string PipeConnectionAbortedWriteTimedOut {
            get {
                return ResourceManager.GetString("PipeConnectionAbortedWriteTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot connect to endpoint &apos;{0}&apos; within the allotted timeout of {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string PipeConnectTimedOut {
            get {
                return ResourceManager.GetString("PipeConnectTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot connect to endpoint &apos;{0}&apos; within the allotted timeout of {1}. The server has likely reached the MaxConnections quota and is too busy to accept new connections. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string PipeConnectTimedOutServerTooBusy {
            get {
                return ResourceManager.GetString("PipeConnectTimedOutServerTooBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error duplicating the..
        /// </summary>
        internal static string PipeDuplicationFailed {
            get {
                return ResourceManager.GetString("PipeDuplicationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe endpoint &apos;{0}&apos; could not be found on your local machine. .
        /// </summary>
        internal static string PipeEndpointNotFound {
            get {
                return ResourceManager.GetString("PipeEndpointNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} ({1}, 0x{2}).
        /// </summary>
        internal static string PipeKnownWin32Error {
            get {
                return ResourceManager.GetString("PipeKnownWin32Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe listener has been disposed..
        /// </summary>
        internal static string PipeListenerDisposed {
            get {
                return ResourceManager.GetString("PipeListenerDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connections cannot be created until the pipe has started listening.  Call Listen() before attempting to accept a connection..
        /// </summary>
        internal static string PipeListenerNotListening {
            get {
                return ResourceManager.GetString("PipeListenerNotListening", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot listen on pipe &apos;{0}&apos;: {1}.
        /// </summary>
        internal static string PipeListenFailed {
            get {
                return ResourceManager.GetString("PipeListenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe was not able to be set to message mode: {0}.
        /// </summary>
        internal static string PipeModeChangeFailed {
            get {
                return ResourceManager.GetString("PipeModeChangeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe name could not be obtained for the pipe URI: {0}.
        /// </summary>
        internal static string PipeNameCanNotBeAccessed {
            get {
                return ResourceManager.GetString("PipeNameCanNotBeAccessed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe name could not be obtained for {0}..
        /// </summary>
        internal static string PipeNameCanNotBeAccessed2 {
            get {
                return ResourceManager.GetString("PipeNameCanNotBeAccessed2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot listen on pipe &apos;{0}&apos; because the pipe name could not be reserved: {1}.
        /// </summary>
        internal static string PipeNameCantBeReserved {
            get {
                return ResourceManager.GetString("PipeNameCantBeReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot listen on pipe name &apos;{0}&apos; because another pipe endpoint is already listening on that name..
        /// </summary>
        internal static string PipeNameInUse {
            get {
                return ResourceManager.GetString("PipeNameInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error reading from the pipe: {0}..
        /// </summary>
        internal static string PipeReadError {
            get {
                return ResourceManager.GetString("PipeReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a read in progress for the pipe.  Wait for the first operation to complete before attempting to read again..
        /// </summary>
        internal static string PipeReadPending {
            get {
                return ResourceManager.GetString("PipeReadPending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read from the pipe did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string PipeReadTimedOut {
            get {
                return ResourceManager.GetString("PipeReadTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The shutdown indicator was not received from the pipe.  The application on the other end of the pipe may not have sent it.  The pipe will still be closed..
        /// </summary>
        internal static string PipeShutdownReadError {
            get {
                return ResourceManager.GetString("PipeShutdownReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The shutdown indicator could not be written to the pipe.  The application on the other end of the pipe may not be listening for it.  The pipe will still be closed..
        /// </summary>
        internal static string PipeShutdownWriteError {
            get {
                return ResourceManager.GetString("PipeShutdownWriteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read from the pipe expected just a signal, but received actual data..
        /// </summary>
        internal static string PipeSignalExpected {
            get {
                return ResourceManager.GetString("PipeSignalExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized error {0} (0x{1}).
        /// </summary>
        internal static string PipeUnknownWin32Error {
            get {
                return ResourceManager.GetString("PipeUnknownWin32Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to URIs used with pipes must use the scheme: &apos;net.pipe&apos;..
        /// </summary>
        internal static string PipeUriSchemeWrong {
            get {
                return ResourceManager.GetString("PipeUriSchemeWrong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error writing to the pipe: {0}..
        /// </summary>
        internal static string PipeWriteError {
            get {
                return ResourceManager.GetString("PipeWriteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe write did not write all the bytes..
        /// </summary>
        internal static string PipeWriteIncomplete {
            get {
                return ResourceManager.GetString("PipeWriteIncomplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a write in progress for the pipe.  Wait for the first operation to complete before attempting to write again..
        /// </summary>
        internal static string PipeWritePending {
            get {
                return ResourceManager.GetString("PipeWritePending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The write to the pipe did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string PipeWriteTimedOut {
            get {
                return ResourceManager.GetString("PipeWriteTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addresses specified in the registration exceed PNRP&apos;s per registration address limit..
        /// </summary>
        internal static string PnrpAddressesExceedLimit {
            get {
                return ResourceManager.GetString("PnrpAddressesExceedLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;Specified addresses can not be registered with PNRP because either PNRP is not enabled or the specified addresses do not have corresponding clouds. Please refer to the documentation with your system for details on how to install and enable PNRP.&quot;.
        /// </summary>
        internal static string PnrpAddressesUnsupported {
            get {
                return ResourceManager.GetString("PnrpAddressesUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified cloud {0} could not be used for the specified operation because it is disabled..
        /// </summary>
        internal static string PnrpCloudDisabled {
            get {
                return ResourceManager.GetString("PnrpCloudDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the addresses specified doesn&apos;t match any PNRP cloud for registration.{0}.
        /// </summary>
        internal static string PnrpCloudNotFound {
            get {
                return ResourceManager.GetString("PnrpCloudNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified cloud {0} is configured for Resolve operations only..
        /// </summary>
        internal static string PnrpCloudResolveOnly {
            get {
                return ResourceManager.GetString("PnrpCloudResolveOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified mesh name {0} cannot be used because a name can only be registered once per process..
        /// </summary>
        internal static string PnrpDuplicatePeerName {
            get {
                return ResourceManager.GetString("PnrpDuplicatePeerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PNRP could not find any clouds that match the current operation..
        /// </summary>
        internal static string PnrpNoClouds {
            get {
                return ResourceManager.GetString("PnrpNoClouds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested PNRP operation {0} could not be performed because the port is blocked possibly by a firewall..
        /// </summary>
        internal static string PnrpPortBlocked {
            get {
                return ResourceManager.GetString("PnrpPortBlocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A metadata section containing policy did not have an identifier so it cannot be referenced. .
        /// </summary>
        internal static string PolicyDocumentMustHaveIdentifier {
            get {
                return ResourceManager.GetString("PolicyDocumentMustHaveIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a policy export extension.
        ///Extension: {0}
        ///Error: {1}.
        /// </summary>
        internal static string PolicyExtensionExportError {
            get {
                return ResourceManager.GetString("PolicyExtensionExportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a policy import extension.
        ///Extension: {0}
        ///Error: {1}.
        /// </summary>
        internal static string PolicyExtensionImportError {
            get {
                return ResourceManager.GetString("PolicyExtensionImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} registered as a policy extension does not have a public default constructor. Policy extensions must have a public default constructor.
        /// </summary>
        internal static string PolicyExtensionTypeRequiresDefaultConstructor {
            get {
                return ResourceManager.GetString("PolicyExtensionTypeRequiresDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextBindingElementImporter cannot import policy because PolicyImportContext.BindingElements collection is null..
        /// </summary>
        internal static string PolicyImportContextBindingElementCollectionIsNull {
            get {
                return ResourceManager.GetString("PolicyImportContextBindingElementCollectionIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unreachable policy detected.
        ///A WS-Policy element embedded in WSDL is missing a fragment identifier. This policy cannot be referenced by any WS-PolicyAttachment mechanisms.
        ///XPath:{0}.
        /// </summary>
        internal static string PolicyInWsdlMustHaveFragmentId {
            get {
                return ResourceManager.GetString("PolicyInWsdlMustHaveFragmentId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy reference was ignored because the URI of the reference was empty..
        /// </summary>
        internal static string PolicyReferenceInvalidId {
            get {
                return ResourceManager.GetString("PolicyReferenceInvalidId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy reference was ignored because the required {0} attribute was missing..
        /// </summary>
        internal static string PolicyReferenceMissingURI {
            get {
                return ResourceManager.GetString("PolicyReferenceMissingURI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message security policy for the &apos;{0}&apos; action requires confidentiality without integrity. Confidentiality without integrity is not supported..
        /// </summary>
        internal static string PolicyRequiresConfidentialityWithoutIntegrity {
            get {
                return ResourceManager.GetString("PolicyRequiresConfidentialityWithoutIntegrity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application {0} is marked Pooled. Pooled applications are not supported under COM+ hosting..
        /// </summary>
        internal static string PooledApplicationNotSupportedForComplusHostedScenarios {
            get {
                return ResourceManager.GetString("PooledApplicationNotSupportedForComplusHostedScenarios", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have tried to create a channel to a service that does not support .Net Framing. .
        /// </summary>
        internal static string PreambleAckIncorrect {
            get {
                return ResourceManager.GetString("PreambleAckIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have tried to create a channel to a service that does not support .Net Framing. It is possible that you are encountering an HTTP endpoint..
        /// </summary>
        internal static string PreambleAckIncorrectMaybeHttp {
            get {
                return ResourceManager.GetString("PreambleAckIncorrectMaybeHttp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel demuxer Open failed previously with exception &apos;{0}&apos;..
        /// </summary>
        internal static string PreviousChannelDemuxerOpenFailed {
            get {
                return ResourceManager.GetString("PreviousChannelDemuxerOpenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The primary signature must be encrypted..
        /// </summary>
        internal static string PrimarySignatureIsRequiredToBeEncrypted {
            get {
                return ResourceManager.GetString("PrimarySignatureIsRequiredToBeEncrypted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Primary signature must be computed before supporting token signatures..
        /// </summary>
        internal static string PrimarySignatureMustBeComputedBeforeSupportingTokenSignatures {
            get {
                return ResourceManager.GetString("PrimarySignatureMustBeComputedBeforeSupportingTokenSignatures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The primary signature is not signed with a derived key. The binding&apos;s primary token parameter &apos;{0}&apos; requires key derivation..
        /// </summary>
        internal static string PrimarySignatureWasNotSignedByDerivedKey {
            get {
                return ResourceManager.GetString("PrimarySignatureWasNotSignedByDerivedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The primary signature is not signed with a key derived from the encrypted key. The binding&apos;s token parameter &apos;{0}&apos; requires key derivation..
        /// </summary>
        internal static string PrimarySignatureWasNotSignedByDerivedWrappedKey {
            get {
                return ResourceManager.GetString("PrimarySignatureWasNotSignedByDerivedWrappedKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PrivacyNotice element Version attribute must have an integer value..
        /// </summary>
        internal static string PrivacyNoticeElementVersionAttributeInvalid {
            get {
                return ResourceManager.GetString("PrivacyNoticeElementVersionAttributeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proof token was not wrapped correctly in the RequestSecurityTokenResponse..
        /// </summary>
        internal static string ProofTokenWasNotWrappedCorrectly {
            get {
                return ResourceManager.GetString("ProofTokenWasNotWrappedCorrectly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The proof token XML element is not expected in the response..
        /// </summary>
        internal static string ProofTokenXmlUnexpectedInRstr {
            get {
                return ResourceManager.GetString("ProofTokenXmlUnexpectedInRstr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required &apos;{0}&apos; property on the &apos;{1}&apos; security protocol factory is not set or has an invalid value..
        /// </summary>
        internal static string PropertySettingErrorOnProtocolFactory {
            get {
                return ResourceManager.GetString("PropertySettingErrorOnProtocolFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol factory cannot create a protocol..
        /// </summary>
        internal static string ProtocolFactoryCouldNotCreateProtocol {
            get {
                return ResourceManager.GetString("ProtocolFactoryCouldNotCreateProtocol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security protocol must be &apos;{0}&apos;, type is: &apos;{1}&apos;.;.
        /// </summary>
        internal static string ProtocolMisMatch {
            get {
                return ResourceManager.GetString("ProtocolMisMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; protocol can only be used by the Initiator..
        /// </summary>
        internal static string ProtocolMustBeInitiator {
            get {
                return ResourceManager.GetString("ProtocolMustBeInitiator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; protocol can only be used at the Recipient..
        /// </summary>
        internal static string ProtocolMustBeRecipient {
            get {
                return ResourceManager.GetString("ProtocolMustBeRecipient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;provider&apos; argument to the InstanceKey constructor must be a non-empty string which identifies the source of the key data. The &apos;provider&apos; argument can be null, in which case the default correlation provider name is used..
        /// </summary>
        internal static string ProviderCannotBeEmptyString {
            get {
                return ResourceManager.GetString("ProviderCannotBeEmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP proxy authentication credential specified an mutual authentication requirement ({0}) that is stricter than the requirement for target server authentication ({1})..
        /// </summary>
        internal static string ProxyAuthenticationLevelMismatch {
            get {
                return ResourceManager.GetString("ProxyAuthenticationLevelMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP proxy authentication credential specified an impersonation level restriction ({0}) that is stricter than the restriction for target server authentication ({1})..
        /// </summary>
        internal static string ProxyImpersonationLevelMismatch {
            get {
                return ResourceManager.GetString("ProxyImpersonationLevelMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PSHA1 key length &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string Psha1KeyLengthInvalid {
            get {
                return ResourceManager.GetString("Psha1KeyLengthInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The public key is not an RSA key..
        /// </summary>
        internal static string PublicKeyNotRSA {
            get {
                return ResourceManager.GetString("PublicKeyNotRSA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positioned after last element..
        /// </summary>
        internal static string QueryAfterNodes {
            get {
                return ResourceManager.GetString("QueryAfterNodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positioned before first element..
        /// </summary>
        internal static string QueryBeforeNodes {
            get {
                return ResourceManager.GetString("QueryBeforeNodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string value can&apos;t be determined because the XPathNodeIterator has been moved past the first node..
        /// </summary>
        internal static string QueryCantGetStringForMovedIterator {
            get {
                return ResourceManager.GetString("QueryCantGetStringForMovedIterator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context node is not supported in node sequences..
        /// </summary>
        internal static string QueryContextNotSupportedInSequences {
            get {
                return ResourceManager.GetString("QueryContextNotSupportedInSequences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument to an IXsltContextFunction could not be converted to a string..
        /// </summary>
        internal static string QueryFunctionStringArg {
            get {
                return ResourceManager.GetString("QueryFunctionStringArg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IXsltContextFunction return type &apos;{0}&apos; not supported..
        /// </summary>
        internal static string QueryFunctionTypeNotSupported {
            get {
                return ResourceManager.GetString("QueryFunctionTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred. Item already exists..
        /// </summary>
        internal static string QueryItemAlreadyExists {
            get {
                return ResourceManager.GetString("QueryItemAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XPathNodeIterator has been invalidated. XPathNodeIterators passed as arguments to IXsltContextFunctions are only valid within the function. They cannot be cached for later use or returned as the result of the function..
        /// </summary>
        internal static string QueryIteratorOutOfScope {
            get {
                return ResourceManager.GetString("QueryIteratorOutOfScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPathNavigator must be a SeekableXPathNavigator..
        /// </summary>
        internal static string QueryMustBeSeekable {
            get {
                return ResourceManager.GetString("QueryMustBeSeekable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function &apos;{0}&apos; is not implemented..
        /// </summary>
        internal static string QueryNotImplemented {
            get {
                return ResourceManager.GetString("QueryNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPathNavigator positions cannot be compared..
        /// </summary>
        internal static string QueryNotSortable {
            get {
                return ResourceManager.GetString("QueryNotSortable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IXsltContextVariables cannot return null..
        /// </summary>
        internal static string QueryVariableNull {
            get {
                return ResourceManager.GetString("QueryVariableNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IXsltContextVariable type &apos;{0}&apos; not supported..
        /// </summary>
        internal static string QueryVariableTypeNotSupported {
            get {
                return ResourceManager.GetString("QueryVariableTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read is not supported on this stream..
        /// </summary>
        internal static string ReadNotSupported {
            get {
                return ResourceManager.GetString("ReadNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receive context, {0}, is in the {1} state.  Receive contexts cannot be used for sending delayed acks unless they are in the Received state..
        /// </summary>
        internal static string ReceiveContextCannotBeUsed {
            get {
                return ResourceManager.GetString("ReceiveContextCannotBeUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receive context, {0}, cannot be used for sending delayed acks because it is in the Faulted state..
        /// </summary>
        internal static string ReceiveContextFaulted {
            get {
                return ResourceManager.GetString("ReceiveContextFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receive context, {0}, is in an unsupported state &apos;{1}&apos;.  This indicates an internal error in the implementation of that receive context..
        /// </summary>
        internal static string ReceiveContextInInvalidState {
            get {
                return ResourceManager.GetString("ReceiveContextInInvalidState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message in the request context received from channel &apos;{0}&apos; is null..
        /// </summary>
        internal static string ReceivedMessageInRequestContextNull {
            get {
                return ResourceManager.GetString("ReceivedMessageInRequestContextNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint returned a {0}Response when the {0} request had not been sent. This is a WS-ReliableMessaging protocol violation. The reliable session was faulted..
        /// </summary>
        internal static string ReceivedResponseBeforeRequestExceptionString {
            get {
                return ResourceManager.GetString("ReceivedResponseBeforeRequestExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0}Response was received when the {0} request had not been sent. This is a WS-ReliableMessaging protocol violation. The reliable session cannot continue..
        /// </summary>
        internal static string ReceivedResponseBeforeRequestFaultString {
            get {
                return ResourceManager.GetString("ReceivedResponseBeforeRequestFaultString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive request on local address {0} timed out after {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string ReceiveRequestTimedOut {
            get {
                return ResourceManager.GetString("ReceiveRequestTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive request timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string ReceiveRequestTimedOutNoLocalAddress {
            get {
                return ResourceManager.GetString("ReceiveRequestTimedOutNoLocalAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel received an unexpected fault input message while closing. The fault reason given is: &apos;{0}&apos;.
        /// </summary>
        internal static string ReceiveShutdownReturnedFault {
            get {
                return ResourceManager.GetString("ReceiveShutdownReturnedFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel received an unexpected fault input message with Action = &apos;{0}&apos; while closing. You should only close your channel when you are not expecting any more input messages..
        /// </summary>
        internal static string ReceiveShutdownReturnedLargeFault {
            get {
                return ResourceManager.GetString("ReceiveShutdownReturnedLargeFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel received an unexpected input message with Action &apos;{0}&apos; while closing. You should only close your channel when you are not expecting any more input messages..
        /// </summary>
        internal static string ReceiveShutdownReturnedMessage {
            get {
                return ResourceManager.GetString("ReceiveShutdownReturnedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive on local address {0} timed out after {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string ReceiveTimedOut {
            get {
                return ResourceManager.GetString("ReceiveTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string ReceiveTimedOut2 {
            get {
                return ResourceManager.GetString("ReceiveTimedOut2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string ReceiveTimedOutNoLocalAddress {
            get {
                return ResourceManager.GetString("ReceiveTimedOutNoLocalAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application {0} has recycling enabled. Recycling of applications is not supported under COM+ hosting..
        /// </summary>
        internal static string RecycledApplicationNotSupportedForComplusHostedScenarios {
            get {
                return ResourceManager.GetString("RecycledApplicationNotSupportedForComplusHostedScenarios", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested resouce has not changed and should be taken from cache..
        /// </summary>
        internal static string RedirectCache {
            get {
                return ResourceManager.GetString("RedirectCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RedirectionType &apos;Cache&apos; does not allow any RedirectionLocation objects be passed into the constructor..
        /// </summary>
        internal static string RedirectCacheNoLocationAllowed {
            get {
                return ResourceManager.GetString("RedirectCacheNoLocationAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested resource has been moved..
        /// </summary>
        internal static string RedirectGenericMessage {
            get {
                return ResourceManager.GetString("RedirectGenericMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}.
        /// </summary>
        internal static string RedirectionInfoStringFormatNoNamespace {
            get {
                return ResourceManager.GetString("RedirectionInfoStringFormatNoNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} ({1}).
        /// </summary>
        internal static string RedirectionInfoStringFormatWithNamespace {
            get {
                return ResourceManager.GetString("RedirectionInfoStringFormatWithNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one RedirectionLocation must be provided for this RedirectionType..
        /// </summary>
        internal static string RedirectMustProvideLocation {
            get {
                return ResourceManager.GetString("RedirectMustProvideLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested resource has moved to one of the following locations:
        ///{0}.
        /// </summary>
        internal static string RedirectResource {
            get {
                return ResourceManager.GetString("RedirectResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested resource must be accessed through one of the following intermediary service locations:
        ///{0}.
        /// </summary>
        internal static string RedirectUseIntermediary {
            get {
                return ResourceManager.GetString("RedirectUseIntermediary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid RefreshInterval value of {0}; it must be greater than zero.
        /// </summary>
        internal static string RefreshIntervalMustBeGreaterThanZero {
            get {
                return ResourceManager.GetString("RefreshIntervalMustBeGreaterThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Due to a request context abort call, the reliable reply session channel potentially has a gap in its reply sequence. The ExactlyOnce assurance can no longer be satisfied. The reliable session was faulted..
        /// </summary>
        internal static string ReliableRequestContextAborted {
            get {
                return ResourceManager.GetString("ReliableRequestContextAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following remote identity failed verification: &apos;{0}&apos;..
        /// </summary>
        internal static string RemoteIdentityFailedVerification {
            get {
                return ResourceManager.GetString("RemoteIdentityFailedVerification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream Security is required at {0}, but no security context was negotiated. This is likely caused by the remote endpoint missing a StreamSecurityBindingElement from its binding..
        /// </summary>
        internal static string RemoteSecurityNotNegotiatedOnStreamUpgrade {
            get {
                return ResourceManager.GetString("RemoteSecurityNotNegotiatedOnStreamUpgrade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The renew security session message does not have the session token as a supporting token..
        /// </summary>
        internal static string RenewSessionMissingSupportingToken {
            get {
                return ResourceManager.GetString("RenewSessionMissingSupportingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no handler registered for session token renew event..
        /// </summary>
        internal static string RenewSessionTokenHandlerNotSet {
            get {
                return ResourceManager.GetString("RenewSessionTokenHandlerNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repeated moniker keyword..
        /// </summary>
        internal static string RepeatedKeyword {
            get {
                return ResourceManager.GetString("RepeatedKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply has already been sent from this RequestContext..
        /// </summary>
        internal static string ReplyAlreadySent {
            get {
                return ResourceManager.GetString("ReplyAlreadySent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint failed to include a required SequenceAcknowledgement header on a reliable reply message. The reliable session was faulted..
        /// </summary>
        internal static string ReplyMissingAcknowledgement {
            get {
                return ResourceManager.GetString("ReplyMissingAcknowledgement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reply was not signed with the required signing token..
        /// </summary>
        internal static string ReplyWasNotSignedWithRequiredSigningToken {
            get {
                return ResourceManager.GetString("ReplyWasNotSignedWithRequiredSigningToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request channel timed out attempting to send after {0}. Increase the timeout value passed to the call to Request or increase the SendTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string RequestChannelSendTimedOut {
            get {
                return ResourceManager.GetString("RequestChannelSendTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request channel timed out while waiting for a reply after {0}. Increase the timeout value passed to the call to Request or increase the SendTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string RequestChannelWaitForReplyTimedOut {
            get {
                return ResourceManager.GetString("RequestChannelWaitForReplyTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requestContext has been aborted..
        /// </summary>
        internal static string RequestContextAborted {
            get {
                return ResourceManager.GetString("RequestContextAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection holds response headers and cannot contain the specified request header &apos;{0}&apos;..
        /// </summary>
        internal static string RequestHeaderWithResponseHeadersCollection {
            get {
                return ResourceManager.GetString("RequestHeaderWithResponseHeadersCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The initialization process of the request message timed out after {0}. To increase this quota, use the &apos;{1}&apos; property on the &apos;{2}&apos;..
        /// </summary>
        internal static string RequestInitializationTimeoutReached {
            get {
                return ResourceManager.GetString("RequestInitializationTimeoutReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply message cannot be created because the request message does not have a MessageID..
        /// </summary>
        internal static string RequestMessageDoesNotHaveAMessageID {
            get {
                return ResourceManager.GetString("RequestMessageDoesNotHaveAMessageID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityToken message does not match the endpoint filters the service &apos;{0}&apos; is expecting incoming messages to match. This may be because the RequestSecurityToken was intended to be sent to a different service..
        /// </summary>
        internal static string RequestSecurityTokenDoesNotMatchEndpointFilters {
            get {
                return ResourceManager.GetString("RequestSecurityTokenDoesNotMatchEndpointFilters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Request timed out after {0} while establishing a transport connection to {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string RequestTimedOutEstablishingTransportSession {
            get {
                return ResourceManager.GetString("RequestTimedOutEstablishingTransportSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface with IID {0} is not configured in the COM+ catalog and cannot be exposed as a web service..
        /// </summary>
        internal static string RequireConfiguredInterfaces {
            get {
                return ResourceManager.GetString("RequireConfiguredInterfaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface with IID {0} has no methods configured in the COM+ catalog and cannot be exposed as a web service..
        /// </summary>
        internal static string RequireConfiguredMethods {
            get {
                return ResourceManager.GetString("RequireConfiguredMethods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required {0} attribute is missing from the {1} element in the {2} assertion. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string RequiredAttributeIsMissing {
            get {
                return ResourceManager.GetString("RequiredAttributeIsMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is required on element &apos;{1}&apos;..
        /// </summary>
        internal static string RequiredAttributeMissing {
            get {
                return ResourceManager.GetString("RequiredAttributeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; required message part was not encrypted..
        /// </summary>
        internal static string RequiredMessagePartNotEncrypted {
            get {
                return ResourceManager.GetString("RequiredMessagePartNotEncrypted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos;, &apos;{1}&apos; required message part  was not encrypted..
        /// </summary>
        internal static string RequiredMessagePartNotEncryptedNs {
            get {
                return ResourceManager.GetString("RequiredMessagePartNotEncryptedNs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; required message part was not signed..
        /// </summary>
        internal static string RequiredMessagePartNotSigned {
            get {
                return ResourceManager.GetString("RequiredMessagePartNotSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos;, &apos;{1}&apos; required message part  was not signed..
        /// </summary>
        internal static string RequiredMessagePartNotSignedNs {
            get {
                return ResourceManager.GetString("RequiredMessagePartNotSignedNs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} assertion&apos;s required Milliseconds attribute is not schema compliant. Milliseconds must be convertible to an unsigned long. The ReliableSessionBindingElement could not be created..
        /// </summary>
        internal static string RequiredMillisecondsAttributeIncorrect {
            get {
                return ResourceManager.GetString("RequiredMillisecondsAttributeIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security header element &apos;{0}&apos; with the &apos;{1}&apos; id must be signed..
        /// </summary>
        internal static string RequiredSecurityHeaderElementNotSigned {
            get {
                return ResourceManager.GetString("RequiredSecurityHeaderElementNotSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; security token with the &apos;{1}&apos; attachment mode must be encrypted..
        /// </summary>
        internal static string RequiredSecurityTokenNotEncrypted {
            get {
                return ResourceManager.GetString("RequiredSecurityTokenNotEncrypted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; security token with the &apos;{1}&apos; attachment mode must be signed..
        /// </summary>
        internal static string RequiredSecurityTokenNotSigned {
            get {
                return ResourceManager.GetString("RequiredSecurityTokenNotSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signature must be in the security header..
        /// </summary>
        internal static string RequiredSignatureMissing {
            get {
                return ResourceManager.GetString("RequiredSignatureMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required timestamp missing in security header..
        /// </summary>
        internal static string RequiredTimestampMissingInSecurityHeader {
            get {
                return ResourceManager.GetString("RequiredTimestampMissingInSecurityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required WSDL extension element &apos;{0}&apos; from namespace &apos;{1}&apos; was not handled..
        /// </summary>
        internal static string RequiredWSDLExtensionIgnored {
            get {
                return ResourceManager.GetString("RequiredWSDLExtensionIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; binding with the &apos;{1}&apos; namespace is configured to issue cookie security context tokens. COM+ Integration services does not support cookie security context tokens..
        /// </summary>
        internal static string RequireNonCookieMode {
            get {
                return ResourceManager.GetString("RequireNonCookieMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Peer resolver threw an exception.  Please refer to InnerException..
        /// </summary>
        internal static string ResolverException {
            get {
                return ResourceManager.GetString("ResolverException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolving an External reference token requires appropriate SecurityTokenParameters to be specified..
        /// </summary>
        internal static string ResolvingExternalTokensRequireSecurityTokenParameters {
            get {
                return ResourceManager.GetString("ResolvingExternalTokensRequireSecurityTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content type {0} of the response message does not match the content type of the binding ({1}). If using a custom encoder, be sure that the IsContentTypeSupported method is implemented properly. The first {2} bytes of the response were: &apos;{3}&apos;..
        /// </summary>
        internal static string ResponseContentTypeMismatch {
            get {
                return ResourceManager.GetString("ResponseContentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content type {0} of the message is not supported by the encoder..
        /// </summary>
        internal static string ResponseContentTypeNotSupported {
            get {
                return ResourceManager.GetString("ResponseContentTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection holds request headers and cannot contain the specified response header &apos;{0}&apos;..
        /// </summary>
        internal static string ResponseHeaderWithRequestHeadersCollection {
            get {
                return ResourceManager.GetString("ResponseHeaderWithRequestHeadersCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested resource is available..
        /// </summary>
        internal static string RetryGenericMessage {
            get {
                return ResourceManager.GetString("RetryGenericMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to revert impersonation. {0}.
        /// </summary>
        internal static string RevertImpersonationFailure {
            get {
                return ResourceManager.GetString("RevertImpersonationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reverting operation failed with the exception &apos;{0}&apos;..
        /// </summary>
        internal static string RevertingPrivilegeFailed {
            get {
                return ResourceManager.GetString("RevertingPrivilegeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint at {0} has stopped accepting wsrm sessions..
        /// </summary>
        internal static string RMEndpointNotFoundReason {
            get {
                return ResourceManager.GetString("RMEndpointNotFoundReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AcceleratedTokenAuthenticator does not expect RequestSecurityTokenResponse from the client..
        /// </summary>
        internal static string RstDirectDoesNotExpectRstr {
            get {
                return ResourceManager.GetString("RstDirectDoesNotExpectRstr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The negotiation RequestSecurityTokenResponse has a different context from the authenticator RequestSecurityTokenResponse..
        /// </summary>
        internal static string RSTRAuthenticatorHasBadContext {
            get {
                return ResourceManager.GetString("RSTRAuthenticatorHasBadContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityTokenResponse CombinedHash is incorrect..
        /// </summary>
        internal static string RSTRAuthenticatorIncorrect {
            get {
                return ResourceManager.GetString("RSTRAuthenticatorIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authenticator was not included in the final leg of negotiation..
        /// </summary>
        internal static string RSTRAuthenticatorNotPresent {
            get {
                return ResourceManager.GetString("RSTRAuthenticatorNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityTokenResponse has multiple RequestedSecurityToken elements..
        /// </summary>
        internal static string RstrHasMultipleIssuedTokens {
            get {
                return ResourceManager.GetString("RstrHasMultipleIssuedTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequestSecurityTokenResponse has multiple RequestedProofToken elements..
        /// </summary>
        internal static string RstrHasMultipleProofTokens {
            get {
                return ResourceManager.GetString("RstrHasMultipleProofTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KeySize element not present in RequestSecurityTokenResponse..
        /// </summary>
        internal static string RstrKeySizeNotProvided {
            get {
                return ResourceManager.GetString("RstrKeySizeNotProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DispatchOperation requires Invoker..
        /// </summary>
        internal static string RuntimeRequiresInvoker0 {
            get {
                return ResourceManager.GetString("RuntimeRequiresInvoker0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On DuplexSecurityProtocolFactory, the same protocol factory cannot be set for the forward and reverse directions..
        /// </summary>
        internal static string SameProtocolFactoryCannotBeSetForBothDuplexDirections {
            get {
                return ResourceManager.GetString("SameProtocolFactoryCannotBeSetForBothDuplexDirections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a validation error on a schema generated during export:
        ///    Source: {0}
        ///    Line: {1} Column: {2}
        ///   Validation Error: {3}.
        /// </summary>
        internal static string SchemaValidationError {
            get {
                return ResourceManager.GetString("SchemaValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context protocol was unable to parse the context header. Nodes disallowed by the context header schema were found inside the context header..
        /// </summary>
        internal static string SchemaViolationInsideContextHeader {
            get {
                return ResourceManager.GetString("SchemaViolationInsideContextHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scopeName&apos; argument to the InstanceKey constructor must be a non-empty string which indicates the scope of uniqueness for the key. Durable services use the service namespace and name as the scope of uniqueness..
        /// </summary>
        internal static string ScopeNameMustBeSpecified {
            get {
                return ResourceManager.GetString("ScopeNameMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error decoding the Cookie element of SecurityContextSecurityToken..
        /// </summary>
        internal static string SctCookieBlobDecodeFailure {
            get {
                return ResourceManager.GetString("SctCookieBlobDecodeFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issuing cookie SecurityContextSecurityToken is not supported..
        /// </summary>
        internal static string SctCookieNotSupported {
            get {
                return ResourceManager.GetString("SctCookieNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken&apos;s Cookie element either does not contain &apos;{0}&apos; or has a wrong value for it..
        /// </summary>
        internal static string SctCookieValueMissingOrIncorrect {
            get {
                return ResourceManager.GetString("SctCookieValueMissingOrIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error parsing SecurityContextSecurityToken Cookie XML..
        /// </summary>
        internal static string SctCookieXmlParseError {
            get {
                return ResourceManager.GetString("SctCookieXmlParseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not establish secure channel for SSL/TLS with authority &apos;{0}&apos;..
        /// </summary>
        internal static string SecureChannelFailure {
            get {
                return ResourceManager.GetString("SecureChannelFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create security binding element based on configuration data. The secure conversation bootstrap requires another secure conversation which is not supported. .
        /// </summary>
        internal static string SecureConversationBootstrapCannotUseSecureConversation {
            get {
                return ResourceManager.GetString("SecureConversationBootstrapCannotUseSecureConversation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A secure conversation cancellation is not allowed by the binding..
        /// </summary>
        internal static string SecureConversationCancelNotAllowedFaultReason {
            get {
                return ResourceManager.GetString("SecureConversationCancelNotAllowedFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured SecureConversation version does not support sessions. Use WSSecureConversationFeb2005 or above..
        /// </summary>
        internal static string SecureConversationDriverVersionDoesNotSupportSession {
            get {
                return ResourceManager.GetString("SecureConversationDriverVersionDoesNotSupportSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create security binding element based on the configuration data. When secure conversation authentication mode is selected, the secure conversation bootstrap binding element must also be specified. .
        /// </summary>
        internal static string SecureConversationNeedsBootstrapSecurity {
            get {
                return ResourceManager.GetString("SecureConversationNeedsBootstrapSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot establish a reliable session without secure conversation. Enable secure conversation..
        /// </summary>
        internal static string SecureConversationRequiredByReliableSession {
            get {
                return ResourceManager.GetString("SecureConversationRequiredByReliableSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security channel or listener factory creation failed. Secure conversation security token parameters do not specify the bootstrap security binding element..
        /// </summary>
        internal static string SecureConversationSecurityTokenParametersRequireBootstrapBinding {
            get {
                return ResourceManager.GetString("SecureConversationSecurityTokenParametersRequireBootstrapBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security algorithm suite was not specified on &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityAlgorithmSuiteNotSet {
            get {
                return ResourceManager.GetString("SecurityAlgorithmSuiteNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; dynamic link library (dll) failed to load..
        /// </summary>
        internal static string SecurityAuditFailToLoadDll {
            get {
                return ResourceManager.GetString("SecurityAuditFailToLoadDll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityAuditBehavior is not supported on the channel factory..
        /// </summary>
        internal static string SecurityAuditNotSupportedOnChannelFactory {
            get {
                return ResourceManager.GetString("SecurityAuditNotSupportedOnChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing audit messages to the Security log is not supported by the current platform. You must write audit messages to the Application log..
        /// </summary>
        internal static string SecurityAuditPlatformNotSupported {
            get {
                return ResourceManager.GetString("SecurityAuditPlatformNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security policy was imported for the endpoint. The security policy contains requirements that cannot be represented in a Windows Communication Foundation configuration. Look for a comment about the SecurityBindingElement parameters that are required in the configuration file that was generated. Create the correct binding element with code. The binding configuration that is in the configuration file is not secure..
        /// </summary>
        internal static string SecurityBindingElementCannotBeExpressedInConfig {
            get {
                return ResourceManager.GetString("SecurityBindingElementCannotBeExpressedInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This SecurityProtocol instance was not set up to process incoming messages..
        /// </summary>
        internal static string SecurityBindingNotSetUpToProcessIncomingMessages {
            get {
                return ResourceManager.GetString("SecurityBindingNotSetUpToProcessIncomingMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This SecurityProtocol instance was not set up to process outgoing messages..
        /// </summary>
        internal static string SecurityBindingNotSetUpToProcessOutgoingMessages {
            get {
                return ResourceManager.GetString("SecurityBindingNotSetUpToProcessOutgoingMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityBinding for the (&apos;{0}&apos;,&apos;{1}&apos;) binding for the (&apos;{2}&apos;,&apos;{3}&apos;) contract only supports the OneWay operation..
        /// </summary>
        internal static string SecurityBindingSupportsOneWayOnly {
            get {
                return ResourceManager.GetString("SecurityBindingSupportsOneWayOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security capabilities of binding &apos;{0}&apos; do not match those of the generated runtime object. Most likely this means the binding contains a StreamSecurityBindingElement, but lacks a TransportBindingElement that supports Stream Security (such as TCP or Named Pipes). Either remove the unused StreamSecurityBindingElement or use a transport that supports this element..
        /// </summary>
        internal static string SecurityCapabilitiesMismatched {
            get {
                return ResourceManager.GetString("SecurityCapabilitiesMismatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExtendedProtectionPolicy specified a PolicyEnforcement of &apos;Always&apos; and a ChannelBinding was not found.  This prevents the ExtendedProtectionPolicy from being enforced. Change the binding to make a ChannelBinding available, for StandardBindings use a SecurityMode of TransportWithMessageCredential and a ClientCredential type of Windows. For CustomBindings use SspiNegotiationOverTransport or KerberosOverTransport.  Alternatively, specify a PolicyEnforcement of &apos;Never&apos;..
        /// </summary>
        internal static string SecurityChannelBindingMissing {
            get {
                return ResourceManager.GetString("SecurityChannelBindingMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExtendedProtectionPolicy specified a PolicyEnforcement of &apos;Always&apos; which is not supported for the authentication mode requested.  This prevents the ExtendedProtectionPolicy from being enforced. For StandardBindings use a SecurityMode of TransportWithMessageCredential and a ClientCredential type of Windows. For CustomBindings use SspiNegotiationOverTransport or KerberosOverTransport.  Alternatively, specify a PolicyEnforcement of &apos;Never&apos;..
        /// </summary>
        internal static string SecurityChannelListenerChannelExtendedProtectionNotSupported {
            get {
                return ResourceManager.GetString("SecurityChannelListenerChannelExtendedProtectionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security channel listener was not specified on  &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityChannelListenerNotSet {
            get {
                return ResourceManager.GetString("SecurityChannelListenerNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot start impersonation because the SecurityContext for the UltimateReceiver role from the request message with the &apos;{0}&apos; action is not mapped to a Windows identity..
        /// </summary>
        internal static string SecurityContextDoesNotAllowImpersonation {
            get {
                return ResourceManager.GetString("SecurityContextDoesNotAllowImpersonation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken with context-id={0} (key generation-id={1}) has expired..
        /// </summary>
        internal static string SecurityContextExpired {
            get {
                return ResourceManager.GetString("SecurityContextExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken with context-id={0} (no key generation-id) has expired..
        /// </summary>
        internal static string SecurityContextExpiredNoKeyGeneration {
            get {
                return ResourceManager.GetString("SecurityContextExpiredNoKeyGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken with Context-id={0} (generation-id={1}) has expired..
        /// </summary>
        internal static string SecurityContextKeyExpired {
            get {
                return ResourceManager.GetString("SecurityContextKeyExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken with Context-id={0} (no key generation-id) has expired..
        /// </summary>
        internal static string SecurityContextKeyExpiredNoKeyGeneration {
            get {
                return ResourceManager.GetString("SecurityContextKeyExpiredNoKeyGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityContext for the UltimateReceiver role is missing from the SecurityContextProperty of the request message with action &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityContextMissing {
            get {
                return ResourceManager.GetString("SecurityContextMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken with context-id={0} (key generation-id={1}) is not registered..
        /// </summary>
        internal static string SecurityContextNotRegistered {
            get {
                return ResourceManager.GetString("SecurityContextNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server &apos;{0}&apos; sent back a fault indicating it is in the process of shutting down. Please see the inner exception for fault details..
        /// </summary>
        internal static string SecurityEndpointNotFound {
            get {
                return ResourceManager.GetString("SecurityEndpointNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security header is empty..
        /// </summary>
        internal static string SecurityHeaderIsEmpty {
            get {
                return ResourceManager.GetString("SecurityHeaderIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The listener is not accepting new secure conversations because it is closing..
        /// </summary>
        internal static string SecurityListenerClosing {
            get {
                return ResourceManager.GetString("SecurityListenerClosing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is not accepting new secure conversations currently because it is closing. Please retry later..
        /// </summary>
        internal static string SecurityListenerClosingFaultReason {
            get {
                return ResourceManager.GetString("SecurityListenerClosingFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security negotiation with &apos;{0}&apos; cannot be initiated because the confidential endpoint address header (&apos;{1}&apos;, &apos;{2}&apos;) cannot be encrypted during the course of the negotiation..
        /// </summary>
        internal static string SecurityNegotiationCannotProtectConfidentialEndpointHeader {
            get {
                return ResourceManager.GetString("SecurityNegotiationCannotProtectConfidentialEndpointHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security negotiation message with action &apos;{0}&apos; is larger than the maximum allowed buffer size &apos;{1}&apos;. If you are using a streamed transport consider increasing the maximum buffer size on the transport..
        /// </summary>
        internal static string SecurityNegotiationMessageTooLarge {
            get {
                return ResourceManager.GetString("SecurityNegotiationMessageTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security protocol &apos;{0}&apos; cannot do replay detection..
        /// </summary>
        internal static string SecurityProtocolCannotDoReplayDetection {
            get {
                return ResourceManager.GetString("SecurityProtocolCannotDoReplayDetection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplex security is not supported by the security protocol factory &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityProtocolFactoryDoesNotSupportDuplex {
            get {
                return ResourceManager.GetString("SecurityProtocolFactoryDoesNotSupportDuplex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Request-reply security is not supported by the security protocol factory &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityProtocolFactoryDoesNotSupportRequestReply {
            get {
                return ResourceManager.GetString("SecurityProtocolFactoryDoesNotSupportRequestReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security protocol factory must be set before this operation is performed..
        /// </summary>
        internal static string SecurityProtocolFactoryShouldBeSetBeforeThisOperation {
            get {
                return ResourceManager.GetString("SecurityProtocolFactoryShouldBeSetBeforeThisOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken&apos;s key needs to be renewed..
        /// </summary>
        internal static string SecurityRenewFaultReason {
            get {
                return ResourceManager.GetString("SecurityRenewFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server &apos;{0}&apos; sent back a fault indicating it is too busy to process the request. Please retry later. Please see the inner exception for fault details..
        /// </summary>
        internal static string SecurityServerTooBusy {
            get {
                return ResourceManager.GetString("SecurityServerTooBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session was terminated This may be because no messages were received on the session for too long..
        /// </summary>
        internal static string SecuritySessionAbortedFaultReason {
            get {
                return ResourceManager.GetString("SecuritySessionAbortedFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session with id &apos;{0}&apos; is already pending..
        /// </summary>
        internal static string SecuritySessionAlreadyPending {
            get {
                return ResourceManager.GetString("SecuritySessionAlreadyPending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receiver sent back a security session fault message. Retry the request..
        /// </summary>
        internal static string SecuritySessionFaultReplyWasSent {
            get {
                return ResourceManager.GetString("SecuritySessionFaultReplyWasSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session id &apos;{0}&apos; is already present in the filter table..
        /// </summary>
        internal static string SecuritySessionIdAlreadyPresentInFilterTable {
            get {
                return ResourceManager.GetString("SecuritySessionIdAlreadyPresentInFilterTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session key must be renewed before it can secure application messages..
        /// </summary>
        internal static string SecuritySessionKeyIsStale {
            get {
                return ResourceManager.GetString("SecuritySessionKeyIsStale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a security session. Retry later..
        /// </summary>
        internal static string SecuritySessionLimitReached {
            get {
                return ResourceManager.GetString("SecuritySessionLimitReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No security session listener was found for message with action &apos;{0}&apos;..
        /// </summary>
        internal static string SecuritySessionListenerNotFound {
            get {
                return ResourceManager.GetString("SecuritySessionListenerNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No security session with id &apos;{0}&apos; is pending..
        /// </summary>
        internal static string SecuritySessionNotPending {
            get {
                return ResourceManager.GetString("SecuritySessionNotPending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security session protocol factory must be set before this operation is performed..
        /// </summary>
        internal static string SecuritySessionProtocolFactoryShouldBeSetBeforeThisOperation {
            get {
                return ResourceManager.GetString("SecuritySessionProtocolFactoryShouldBeSetBeforeThisOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session requires a security token authenticator that implements &apos;{0}&apos;. &apos;{1}&apos; does not implement &apos;{0}&apos;..
        /// </summary>
        internal static string SecuritySessionRequiresIssuanceAuthenticator {
            get {
                return ResourceManager.GetString("SecuritySessionRequiresIssuanceAuthenticator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security sessions require all messages to be signed..
        /// </summary>
        internal static string SecuritySessionRequiresMessageIntegrity {
            get {
                return ResourceManager.GetString("SecuritySessionRequiresMessageIntegrity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session requires a security token resolver that implements &apos;{1}&apos;. The security token resolver &apos;{0}&apos; does not implement &apos;{1}&apos;..
        /// </summary>
        internal static string SecuritySessionRequiresSecurityContextTokenCache {
            get {
                return ResourceManager.GetString("SecuritySessionRequiresSecurityContextTokenCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security settings lifetime manager was not specified on  &apos;{0}&apos;..
        /// </summary>
        internal static string SecuritySettingsLifetimeManagerNotSet {
            get {
                return ResourceManager.GetString("SecuritySettingsLifetimeManagerNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security standards manager was not specified on  &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityStandardsManagerNotSet {
            get {
                return ResourceManager.GetString("SecurityStandardsManagerNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DataProtectionSecurityStateEncoder is unable to decode the byte array. Ensure that a &apos;UserProfile&apos; is loaded, if this is a &apos;web farm scenario&apos; ensure all servers are running as the same user with the roaming profiles or provide a custom SecurityStateEncoder&apos;..
        /// </summary>
        internal static string SecurityStateEncoderDecodingFailure {
            get {
                return ResourceManager.GetString("SecurityStateEncoderDecodingFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DataProtectionSecurityStateEncoder is unable to encode the byte array. Ensure that a &apos;UserProfile&apos; is loaded, if this is a &apos;web farm scenario&apos; ensure all servers are running as the same user with the roaming profiles or provide a custom SecurityStateEncoder&apos;..
        /// </summary>
        internal static string SecurityStateEncoderEncodingFailure {
            get {
                return ResourceManager.GetString("SecurityStateEncoderEncodingFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security token (&apos;{0}&apos;, &apos;{1}&apos;) was found outside the security header. The message may have been altered in transit..
        /// </summary>
        internal static string SecurityTokenFoundOutsideSecurityHeader {
            get {
                return ResourceManager.GetString("SecurityTokenFoundOutsideSecurityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token manager cannot create a token authenticator for requirement &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityTokenManagerCannotCreateAuthenticatorForRequirement {
            get {
                return ResourceManager.GetString("SecurityTokenManagerCannotCreateAuthenticatorForRequirement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token manager cannot create a token provider for requirement &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityTokenManagerCannotCreateProviderForRequirement {
            get {
                return ResourceManager.GetString("SecurityTokenManagerCannotCreateProviderForRequirement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token manager cannot create a token serializer for security token version &apos;{0}&apos;..
        /// </summary>
        internal static string SecurityTokenManagerCannotCreateSerializerForVersion {
            get {
                return ResourceManager.GetString("SecurityTokenManagerCannotCreateSerializerForVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityTokenProvider &apos;{0}&apos; could not resolve the token..
        /// </summary>
        internal static string SecurityTokenNotResolved {
            get {
                return ResourceManager.GetString("SecurityTokenNotResolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CloneCore method of {0} type returned an invalid result. .
        /// </summary>
        internal static string SecurityTokenParametersCloneInvalidResult {
            get {
                return ResourceManager.GetString("SecurityTokenParametersCloneInvalidResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;, &apos;{1}&apos;) is configured with a security token parameter &apos;{2}&apos; that has an incompatible security token inclusion mode &apos;{3}&apos;. Specify an alternate security token inclusion mode (for example, &apos;{4}&apos;)..
        /// </summary>
        internal static string SecurityTokenParametersHasIncompatibleInclusionMode {
            get {
                return ResourceManager.GetString("SecurityTokenParametersHasIncompatibleInclusionMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When authentication schemes &apos;Basic&apos; and also &apos;{0}&apos; are enabled, the value of IncludeWindowsGroups for Windows (&apos;{1}&apos;) and UserName authentication (&apos;{2}&apos;) must match. Please consider using the same value in both places..
        /// </summary>
        internal static string SecurityTokenProviderIncludeWindowsGroupsInconsistent {
            get {
                return ResourceManager.GetString("SecurityTokenProviderIncludeWindowsGroupsInconsistent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (&apos;{0}&apos;,&apos;{1}&apos;) for contract (&apos;{2}&apos;,&apos;{3}&apos;) has been configured with an incompatible security version that does not support unattached references to EncryptedKeys. Use &apos;{4}&apos; or higher as the security version for the binding..
        /// </summary>
        internal static string SecurityVersionDoesNotSupportEncryptedKeyBinding {
            get {
                return ResourceManager.GetString("SecurityVersionDoesNotSupportEncryptedKeyBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityVersion &apos;{0}&apos; does not support signature confirmation. Use a later SecurityVersion..
        /// </summary>
        internal static string SecurityVersionDoesNotSupportSignatureConfirmation {
            get {
                return ResourceManager.GetString("SecurityVersionDoesNotSupportSignatureConfirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos;,&apos;{1}&apos; binding for the &apos;{2}&apos;,&apos;{3}&apos; contract is configured with a security version that does not support external references to X.509 tokens using the certificate&apos;s thumbprint value. Use &apos;{4}&apos; or higher as the security version for the binding..
        /// </summary>
        internal static string SecurityVersionDoesNotSupportThumbprintX509KeyIdentifierClause {
            get {
                return ResourceManager.GetString("SecurityVersionDoesNotSupportThumbprintX509KeyIdentifierClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A filter has attempted to access the body of a Message. Use a MessageBuffer instead if body filtering is required..
        /// </summary>
        internal static string SeekableMessageNavBodyForbidden {
            get {
                return ResourceManager.GetString("SeekableMessageNavBodyForbidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML unique ID not supported..
        /// </summary>
        internal static string SeekableMessageNavIDNotSupported {
            get {
                return ResourceManager.GetString("SeekableMessageNavIDNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The position is not valid for this navigator..
        /// </summary>
        internal static string SeekableMessageNavInvalidPosition {
            get {
                return ResourceManager.GetString("SeekableMessageNavInvalidPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot call &apos;{0}&apos; on a non-atomized navigator..
        /// </summary>
        internal static string SeekableMessageNavNonAtomized {
            get {
                return ResourceManager.GetString("SeekableMessageNavNonAtomized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not allowed to override prefix &apos;{0}&apos;..
        /// </summary>
        internal static string SeekableMessageNavOverrideForbidden {
            get {
                return ResourceManager.GetString("SeekableMessageNavOverrideForbidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seek is not supported on this stream..
        /// </summary>
        internal static string SeekNotSupported {
            get {
                return ResourceManager.GetString("SeekNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot Send messages on a channel after CloseOutputSession has been called..
        /// </summary>
        internal static string SendCannotBeCalledAfterCloseOutputSession {
            get {
                return ResourceManager.GetString("SendCannotBeCalledAfterCloseOutputSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security token parameters must be specified with supporting tokens for each message..
        /// </summary>
        internal static string SenderSideSupportingTokensMustSpecifySecurityTokenParameters {
            get {
                return ResourceManager.GetString("SenderSideSupportingTokensMustSpecifySecurityTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected code path for server security application, sending outgoing message on Recipient..
        /// </summary>
        internal static string SendingOutgoingmessageOnRecipient {
            get {
                return ResourceManager.GetString("SendingOutgoingmessageOnRecipient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sending to via {0} timed out after {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SendToViaTimedOut {
            get {
                return ResourceManager.GetString("SendToViaTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Sequence is closed and cannot accept new messages..
        /// </summary>
        internal static string SequenceClosedFaultString {
            get {
                return ResourceManager.GetString("SequenceClosedFaultString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM Source could not transfer the last message within the timeout the user specified..
        /// </summary>
        internal static string SequenceTerminatedAddLastToWindowTimedOut {
            get {
                return ResourceManager.GetString("SequenceTerminatedAddLastToWindowTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server received a TerminateSequence message before all reply sequence messages were acknowledged. This is a violation of the reply sequence acknowledgement protocol..
        /// </summary>
        internal static string SequenceTerminatedBeforeReplySequenceAcked {
            get {
                return ResourceManager.GetString("SequenceTerminatedBeforeReplySequenceAcked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsrm:TerminateSequence protocol message was transmitted before the sequence was successfully completed..
        /// </summary>
        internal static string SequenceTerminatedEarlyTerminateSequence {
            get {
                return ResourceManager.GetString("SequenceTerminatedEarlyTerminateSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The inactivity timeout of ({0}) has been exceeded..
        /// </summary>
        internal static string SequenceTerminatedInactivityTimeoutExceeded {
            get {
                return ResourceManager.GetString("SequenceTerminatedInactivityTimeoutExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two different wsrm:LastMsgNumber values were specified. Because of this the reliable session cannot complete..
        /// </summary>
        internal static string SequenceTerminatedInconsistentLastMsgNumber {
            get {
                return ResourceManager.GetString("SequenceTerminatedInconsistentLastMsgNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user specified maximum retry count for a particular message has been exceeded. Because of this the reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedMaximumRetryCountExceeded {
            get {
                return ResourceManager.GetString("SequenceTerminatedMaximumRetryCountExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CloseSequence request&apos;s reply message must carry a final acknowledgement. This is a violation of the WS-ReliableMessaging protocol. The reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedMissingFinalAck {
            get {
                return ResourceManager.GetString("SequenceTerminatedMissingFinalAck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All of the reply sequence&apos;s messages must be acknowledged prior to closing the request sequence. This is a violation of the reply sequence&apos;s delivery guarantee. The session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedNotAllRepliesAcknowledged {
            get {
                return ResourceManager.GetString("SequenceTerminatedNotAllRepliesAcknowledged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Due to a user abort the reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedOnAbort {
            get {
                return ResourceManager.GetString("SequenceTerminatedOnAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The necessary size to buffer a sequence message has exceeded the configured buffer quota. Because of this the reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedQuotaExceededException {
            get {
                return ResourceManager.GetString("SequenceTerminatedQuotaExceededException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session has stopped waiting for a particular reply. Because of this the reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedReliableRequestThrew {
            get {
                return ResourceManager.GetString("SequenceTerminatedReliableRequestThrew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply message was received with no acknowledgement..
        /// </summary>
        internal static string SequenceTerminatedReplyMissingAcknowledgement {
            get {
                return ResourceManager.GetString("SequenceTerminatedReplyMissingAcknowledgement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user of the remote endpoint&apos;s reliable session expects no more messages and a new message arrived. Due to this the reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedSessionClosedBeforeDone {
            get {
                return ResourceManager.GetString("SequenceTerminatedSessionClosedBeforeDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsrm:LastMsgNumber value is too small. A message with a larger sequence number has already been received..
        /// </summary>
        internal static string SequenceTerminatedSmallLastMsgNumber {
            get {
                return ResourceManager.GetString("SequenceTerminatedSmallLastMsgNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM destination received an acknowledgement message. The RM destination does not process acknowledgement messages..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedAcknowledgement {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedAcknowledgement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM source received an AckRequested message. The RM source does not process AckRequested messages..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedAckRequested {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedAckRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM source received an CloseSequence message. The RM source does not process CloseSequence messages..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedCloseSequence {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedCloseSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM destination received an CloseSequenceResponse message. The RM destination does not process CloseSequenceResponse messages..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedCloseSequenceResponse {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedCloseSequenceResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM source received a CreateSequence request. The RM source does not process CreateSequence requests..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedCS {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedCS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM destination received multiple CreateSequence requests with different OfferId values over the same session..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedCSOfferId {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedCSOfferId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM destination received a CreateSequenceResponse message. The RM destination does not process CreateSequenceResponse messages..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedCSR {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedCSR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM source received multiple CreateSequenceResponse messages with different sequence identifiers over the same session..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedCSROfferId {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedCSROfferId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM source received a TerminateSequence message. The RM source does not process TerminateSequence messages..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedTerminateSequence {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedTerminateSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM destination received a TerminateSequenceResponse message. The RM destination does not process TerminateSequenceResponse messages..
        /// </summary>
        internal static string SequenceTerminatedUnexpectedTerminateSequenceResponse {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnexpectedTerminateSequenceResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occurred while trying to add a sequence message to the window..
        /// </summary>
        internal static string SequenceTerminatedUnknownAddToWindowError {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnknownAddToWindowError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM source does not support an RM destination initiated close since messages can be lost. The reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedUnsupportedClose {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnsupportedClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM source does not support an RM destination initiated termination since messages can be lost. The reliable session cannot continue..
        /// </summary>
        internal static string SequenceTerminatedUnsupportedTerminateSequence {
            get {
                return ResourceManager.GetString("SequenceTerminatedUnsupportedTerminateSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The serialized token version {0} is unsupported..
        /// </summary>
        internal static string SerializedTokenVersionUnsupported {
            get {
                return ResourceManager.GetString("SerializedTokenVersionUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recipient did not provide its certificate.  This certificate is required by the TLS protocol.  Both parties must have access to their certificates..
        /// </summary>
        internal static string ServerCertificateNotProvided {
            get {
                return ResourceManager.GetString("ServerCertificateNotProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}.OnCloseMessageReceived when state == Created..
        /// </summary>
        internal static string ServerReceivedCloseMessageStateIsCreated {
            get {
                return ResourceManager.GetString("ServerReceivedCloseMessageStateIsCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server at {0} rejected the session-establishment request..
        /// </summary>
        internal static string ServerRejectedSessionPreamble {
            get {
                return ResourceManager.GetString("ServerRejectedSessionPreamble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server rejected the upgrade request..
        /// </summary>
        internal static string ServerRejectedUpgradeRequest {
            get {
                return ResourceManager.GetString("ServerRejectedUpgradeRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server &apos;{0}&apos; is too busy to process this request. Try again later..
        /// </summary>
        internal static string ServerTooBusy {
            get {
                return ResourceManager.GetString("ServerTooBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation Action={0}.
        /// </summary>
        internal static string ServiceBusyCountTrace {
            get {
                return ResourceManager.GetString("ServiceBusyCountTrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service certificate is not provided for target &apos;{0}&apos;. Specify a service certificate in ClientCredentials. .
        /// </summary>
        internal static string ServiceCertificateNotProvidedOnClientCredentials {
            get {
                return ResourceManager.GetString("ServiceCertificateNotProvidedOnClientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service certificate is not provided. Specify a service certificate in ServiceCredentials. .
        /// </summary>
        internal static string ServiceCertificateNotProvidedOnServiceCredentials {
            get {
                return ResourceManager.GetString("ServiceCertificateNotProvidedOnServiceCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one operation on the &apos;{0}&apos; contract is configured with the TransactionFlowAttribute attribute set to Mandatory but the channel&apos;s binding &apos;{1}&apos; is not configured with a TransactionFlowBindingElement. The TransactionFlowAttribute attribute set to Mandatory cannot be used without a TransactionFlowBindingElement..
        /// </summary>
        internal static string ServiceHasAtLeastOneOperationWithTransactionFlowEnabled {
            get {
                return ResourceManager.GetString("ServiceHasAtLeastOneOperationWithTransactionFlowEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service &apos;{0}&apos; has zero application (non-infrastructure) endpoints. This might be because no configuration file was found for your application, or because no service element matching the service name could be found in the configuration file, or because no endpoints were defined in the service element..
        /// </summary>
        internal static string ServiceHasZeroAppEndpoints {
            get {
                return ResourceManager.GetString("ServiceHasZeroAppEndpoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operations marked with IsOneWay=true must not declare output parameters, by-reference parameters or return values..
        /// </summary>
        internal static string ServiceOperationsMarkedWithIsOneWayTrueMust0 {
            get {
                return ResourceManager.GetString("ServiceOperationsMarkedWithIsOneWayTrueMust0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service&apos;s security session was not able to close its output session within the configured timeout ({0})..
        /// </summary>
        internal static string ServiceSecurityCloseOutputSessionTimeout {
            get {
                return ResourceManager.GetString("ServiceSecurityCloseOutputSessionTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service&apos;s security session did not receive a &apos;close&apos; message from the client within the configured timeout ({0})..
        /// </summary>
        internal static string ServiceSecurityCloseTimeout {
            get {
                return ResourceManager.GetString("ServiceSecurityCloseTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The COM+ string in the .svc file was formatted incorrectly. (The string is &quot;{0}&quot;.).
        /// </summary>
        internal static string ServiceStringFormatError {
            get {
                return ResourceManager.GetString("ServiceStringFormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} declared on method &apos;{1}&apos; in type &apos;{2}&apos; is invalid. {0}s are only valid on methods that are declared in a type that has ServiceContractAttribute. Either add ServiceContractAttribute to type &apos;{2}&apos; or remove {0} from method &apos;{1}&apos;..
        /// </summary>
        internal static string ServicesWithoutAServiceContractAttributeCan2 {
            get {
                return ResourceManager.GetString("ServicesWithoutAServiceContractAttributeCan2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session was closed before message transfer was complete..
        /// </summary>
        internal static string SessionClosedBeforeDone {
            get {
                return ResourceManager.GetString("SessionClosedBeforeDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot renew the security session key. Session Key Renewal is not supported..
        /// </summary>
        internal static string SessionKeyRenewalNotSupported {
            get {
                return ResourceManager.GetString("SessionKeyRenewalNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session security token provider returned a token of type &apos;{0}&apos;. The token type expected is &apos;{1}&apos;..
        /// </summary>
        internal static string SessionTokenIsNotGenericXmlToken {
            get {
                return ResourceManager.GetString("SessionTokenIsNotGenericXmlToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session security token authenticator returned a token of type &apos;{0}&apos;. The token type expected is &apos;{1}&apos;..
        /// </summary>
        internal static string SessionTokenIsNotSecurityContextToken {
            get {
                return ResourceManager.GetString("SessionTokenIsNotSecurityContextToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session token was not closed by the server..
        /// </summary>
        internal static string SessionTokenWasNotClosed {
            get {
                return ResourceManager.GetString("SessionTokenWasNotClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Session value &apos;{0}&apos; is invalid. Please specify &apos;CurrentSession&apos;,&apos;ServiceSession&apos; or a valid non-negative Windows Session Id..
        /// </summary>
        internal static string SessionValueInvalid {
            get {
                return ResourceManager.GetString("SessionValueInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operations {0} and {1} have the same action ({2}).  Every operation must have a unique action value..
        /// </summary>
        internal static string SFxActionDemuxerDuplicate {
            get {
                return ResourceManager.GetString("SFxActionDemuxerDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a typed message due to action mismatch, expecting {0} encountered {1}.
        /// </summary>
        internal static string SFxActionMismatch {
            get {
                return ResourceManager.GetString("SFxActionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Part {1} in message {0} cannot be exported with RPC or encoded since its type is anonymous..
        /// </summary>
        internal static string SFxAnonymousTypeNotSupported {
            get {
                return ResourceManager.GetString("SFxAnonymousTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IAsyncResult returned from Begin and the IAsyncResult supplied to the Callback are on different objects. These are required to be the same object..
        /// </summary>
        internal static string SFxAsyncResultsDontMatch0 {
            get {
                return ResourceManager.GetString("SFxAsyncResultsDontMatch0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; in class &apos;{1}&apos; has bad parameter metadata: a pass-by-reference parameter is marked with the &apos;in&apos; but not the &apos;out&apos; parameter mode..
        /// </summary>
        internal static string SFxBadByReferenceParameterMetadata {
            get {
                return ResourceManager.GetString("SFxBadByReferenceParameterMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; in class &apos;{1}&apos; has bad parameter metadata: a pass-by-value parameter is marked with the &apos;out&apos; parameter mode..
        /// </summary>
        internal static string SFxBadByValueParameterMetadata {
            get {
                return ResourceManager.GetString("SFxBadByValueParameterMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem reading the MetadataSet argument: a MetadataSection instance with identifier &apos;{0}&apos; and dialect &apos;{1}&apos; has a Metadata property whose type does not match the dialect. The expected Metadata type for this dialect is &apos;{2}&apos; but was found to be &apos;{3}&apos;..
        /// </summary>
        internal static string SFxBadMetadataDialect {
            get {
                return ResourceManager.GetString("SFxBadMetadataDialect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL supplied to ServiceMetadataBehavior via the ExternalMetadataLocation property or the externalMetadataLocation attribute in the serviceMetadata section in config was a relative URL and there is no base address with which to resolve it. &apos;{0}&apos; was specified..
        /// </summary>
        internal static string SFxBadMetadataLocationNoAppropriateBaseAddress {
            get {
                return ResourceManager.GetString("SFxBadMetadataLocationNoAppropriateBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URI supplied to ServiceMetadataBehavior via the ExternalMetadataLocation property or the externalMetadataLocation attribute in the serviceMetadata section in config must be a relative URI or an absolute URI with an http or https scheme. &apos;{0}&apos; was specified, which is a absolute URI with {1} scheme..
        /// </summary>
        internal static string SFxBadMetadataLocationUri {
            get {
                return ResourceManager.GetString("SFxBadMetadataLocationUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When calling the CreateFromPolicy method, the policy argument must be an XmlElement instance with LocalName &apos;{1}&apos; and NamespaceUri &apos;{0}&apos;. This XmlElement has LocalName &apos;{3}&apos; and NamespaceUri &apos;{2}&apos;. .
        /// </summary>
        internal static string SFxBadMetadataMustBePolicy {
            get {
                return ResourceManager.GetString("SFxBadMetadataMustBePolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata contains a reference that cannot be resolved: &apos;{0}&apos;..
        /// </summary>
        internal static string SFxBadMetadataReference {
            get {
                return ResourceManager.GetString("SFxBadMetadataReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransactionProtocol setting was not understood. A supported protocol must be specified..
        /// </summary>
        internal static string SFxBadTransactionProtocols {
            get {
                return ResourceManager.GetString("SFxBadTransactionProtocols", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding specified to do metadata exchange does not contain a TransportBindingElement..
        /// </summary>
        internal static string SFxBindingDoesNotHaveATransportBindingElement {
            get {
                return ResourceManager.GetString("SFxBindingDoesNotHaveATransportBindingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding (Name={0}, Namespace={1}) does not contain a TransportBindingElement..
        /// </summary>
        internal static string SFxBindingMustContainTransport2 {
            get {
                return ResourceManager.GetString("SFxBindingMustContainTransport2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding name cannot be null or empty..
        /// </summary>
        internal static string SFXBindingNameCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("SFXBindingNameCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding associated with ServiceMetadataBehavior or ServiceDebugBehavior is not supported.  The inner binding elements used by this binding must support IReplyChannel. Verify that HttpGetBinding/HttpsGetBinding (on ServiceMetadataBehavior) and HttpHelpPageBinding/HttpsHelpPageBinding (on ServiceDebugBehavior) are supported..
        /// </summary>
        internal static string SFxBindingNotSupportedForMetadataHttpGet {
            get {
                return ResourceManager.GetString("SFxBindingNotSupportedForMetadataHttpGet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The scheme &apos;{0}&apos; used by binding {1} does not match the required scheme &apos;{2}&apos;..
        /// </summary>
        internal static string SFxBindingSchemeDoesNotMatch {
            get {
                return ResourceManager.GetString("SFxBindingSchemeDoesNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Body object cannot be null in message {0}.
        /// </summary>
        internal static string SFxBodyCannotBeNull {
            get {
                return ResourceManager.GetString("SFxBodyCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type {0} cannot inherit from any class other than object to be used as body object in RPC style..
        /// </summary>
        internal static string SFxBodyObjectTypeCannotBeInherited {
            get {
                return ResourceManager.GetString("SFxBodyObjectTypeCannotBeInherited", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type {0} implements interface {1} which is not supported for body object in RPC style..
        /// </summary>
        internal static string SFxBodyObjectTypeCannotBeInterface {
            get {
                return ResourceManager.GetString("SFxBodyObjectTypeCannotBeInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CallbackBehaviorAttribute can only be run as a behavior on an endpoint with a duplex contract. Contract &apos;{0}&apos; is not duplex, as it contains no callback operations..
        /// </summary>
        internal static string SFxCallbackBehaviorAttributeOnlyOnDuplex {
            get {
                return ResourceManager.GetString("SFxCallbackBehaviorAttributeOnlyOnDuplex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation would deadlock because the reply cannot be received until the current Message completes processing. If you want to allow out-of-order message processing, specify ConcurrencyMode of Reentrant or Multiple on {0}..
        /// </summary>
        internal static string SFxCallbackRequestReplyInOrder1 {
            get {
                return ResourceManager.GetString("SFxCallbackRequestReplyInOrder1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to use the contract &apos;{0}&apos; with DuplexChannelFactory, the contract must specify a valid callback contract.  If your contract does not have a callback contract, consider using ChannelFactory instead of DuplexChannelFactory..
        /// </summary>
        internal static string SfxCallbackTypeCannotBeNull {
            get {
                return ResourceManager.GetString("SfxCallbackTypeCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The dispatch instance for duplex callbacks cannot be activated - you must provide an instance..
        /// </summary>
        internal static string SFxCannotActivateCallbackInstace {
            get {
                return ResourceManager.GetString("SFxCannotActivateCallbackInstace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceHostBase&apos;s AddBaseAddress method cannot be called after the InitializeDescription method has completed..
        /// </summary>
        internal static string SFxCannotCallAddBaseAddress {
            get {
                return ResourceManager.GetString("SFxCannotCallAddBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot make a call on this channel because a call to Open() is in progress..
        /// </summary>
        internal static string SFxCannotCallAutoOpenWhenExplicitOpenCalled {
            get {
                return ResourceManager.GetString("SFxCannotCallAutoOpenWhenExplicitOpenCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient can only get metadata from http and https MetadataLocations.  It cannot get metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCannotGetMetadataFromLocation {
            get {
                return ResourceManager.GetString("SFxCannotGetMetadataFromLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient can only get metadata from absolute addresses.  It cannot get metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCannotGetMetadataFromRelativeAddress {
            get {
                return ResourceManager.GetString("SFxCannotGetMetadataFromRelativeAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured policy specifies more than one TransactionProtocol across the operations. A single TransactionProtocol for each endpoint must be specified..
        /// </summary>
        internal static string SFxCannotHaveDifferentTransactionProtocolsInOneBinding {
            get {
                return ResourceManager.GetString("SFxCannotHaveDifferentTransactionProtocolsInOneBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient can only get metadata from http or https addresses when using MetadataExchangeClientMode HttpGet. It cannot get metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCannotHttpGetMetadataFromAddress {
            get {
                return ResourceManager.GetString("SFxCannotHttpGetMetadataFromAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the operation {0} is neither RPC nor document wrapped..
        /// </summary>
        internal static string SFxCannotImportAsParameters_Bare {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_Bare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the wrapper name ({1}) of message {0} does not match the default value ({2}).
        /// </summary>
        internal static string SFxCannotImportAsParameters_DifferentWrapperName {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_DifferentWrapperName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the wrapper namespace ({1}) of message {0} does not match the default value ({2}).
        /// </summary>
        internal static string SFxCannotImportAsParameters_DifferentWrapperNs {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_DifferentWrapperNs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since element name {0} from namespace {1} is not marked nillable.
        /// </summary>
        internal static string SFxCannotImportAsParameters_ElementIsNotNillable {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_ElementIsNotNillable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headers are not supported in RPC encoded format. Headers are ignored in message {0}..
        /// </summary>
        internal static string SFxCannotImportAsParameters_HeadersAreIgnoredInEncoded {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_HeadersAreIgnoredInEncoded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since message {0} has headers.
        /// </summary>
        internal static string SFxCannotImportAsParameters_HeadersAreUnsupported {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_HeadersAreUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the operation {0} has untyped Message as argument or return type.
        /// </summary>
        internal static string SFxCannotImportAsParameters_Message {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since message {0} requires protection..
        /// </summary>
        internal static string SFxCannotImportAsParameters_MessageHasProtectionLevel {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_MessageHasProtectionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since message part namespace ({0}) does not match the default value ({1}).
        /// </summary>
        internal static string SFxCannotImportAsParameters_NamespaceMismatch {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_NamespaceMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating message contract since the operation has multiple return values..
        /// </summary>
        internal static string SFxCannotImportAsParameters_OutputParameterAndTask {
            get {
                return ResourceManager.GetString("SFxCannotImportAsParameters_OutputParameterAndTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are two contracts listening on the same binding ({2}) and address with conflicting settings.  Specifically, the contract &apos;{0}&apos; specifies SessionMode.NotAllowed while the contract &apos;{1}&apos; specifies SessionMode.Required.  You should either change one of the SessionMode values or specify a different address (or ListenUri) for each endpoint..
        /// </summary>
        internal static string SFxCannotRequireBothSessionAndDatagram3 {
            get {
                return ResourceManager.GetString("SFxCannotRequireBothSessionAndDatagram3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection does not support setting extensions by index.  Please consider using the InsertItem or RemoveItem methods..
        /// </summary>
        internal static string SFxCannotSetExtensionsByIndex {
            get {
                return ResourceManager.GetString("SFxCannotSetExtensionsByIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ChannelDispatcher is not currently attached to the provided ServiceHost..
        /// </summary>
        internal static string SFxChannelDispatcherDifferentHost0 {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherDifferentHost0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add a ChannelDispatcher to more than one ServiceHost..
        /// </summary>
        internal static string SFxChannelDispatcherMultipleHost0 {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherMultipleHost0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open ChannelDispatcher because it is not attached to a ServiceHost..
        /// </summary>
        internal static string SFxChannelDispatcherNoHost0 {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherNoHost0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open ChannelDispatcher because it is does not have a MessageVersion set..
        /// </summary>
        internal static string SFxChannelDispatcherNoMessageVersion {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherNoMessageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ChannelDispatcher at &apos;{0}&apos; is unable to open its IChannelListener as there are no endpoints for the ChannelDispatcher..
        /// </summary>
        internal static string SFxChannelDispatcherUnableToOpen1 {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherUnableToOpen1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ChannelDispatcher at &apos;{0}&apos; with contract(s) &apos;{1}&apos; is unable to open its IChannelListener..
        /// </summary>
        internal static string SFxChannelDispatcherUnableToOpen2 {
            get {
                return ResourceManager.GetString("SFxChannelDispatcherUnableToOpen2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ApplyConfiguration requires that the Endpoint property be initialized. Either provide a valid ServiceEndpoint in the CreateDescription method or override the ApplyConfiguration method to provide an alternative implementation..
        /// </summary>
        internal static string SFxChannelFactoryCannotApplyConfigurationWithoutEndpoint {
            get {
                return ResourceManager.GetString("SFxChannelFactoryCannotApplyConfigurationWithoutEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CreateFactory requires that the Endpoint property be initialized. Either provide a valid ServiceEndpoint in the CreateDescription method or override the CreateFactory method to provide an alternative implementation..
        /// </summary>
        internal static string SFxChannelFactoryCannotCreateFactoryWithoutDescription {
            get {
                return ResourceManager.GetString("SFxChannelFactoryCannotCreateFactoryWithoutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Address property on ChannelFactory.Endpoint was null.  The ChannelFactory&apos;s Endpoint must have a valid Address specified..
        /// </summary>
        internal static string SFxChannelFactoryEndpointAddressUri {
            get {
                return ResourceManager.GetString("SFxChannelFactoryEndpointAddressUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying channel factory could not be created because no binding information was found in the configuration file for endpoint with name &apos;{0}&apos;.  Please check the endpoint configuration section with name &apos;{0}&apos; to ensure that binding information is present and correct..
        /// </summary>
        internal static string SFxChannelFactoryNoBindingFoundInConfig1 {
            get {
                return ResourceManager.GetString("SFxChannelFactoryNoBindingFoundInConfig1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying channel factory could not be created because no Binding was passed to the ChannelFactory. Please supply a valid Binding instance via the ChannelFactory constructor..
        /// </summary>
        internal static string SFxChannelFactoryNoBindingFoundInConfigOrCode {
            get {
                return ResourceManager.GetString("SFxChannelFactoryNoBindingFoundInConfigOrCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type argument passed to the generic ChannelFactory class must be an interface type..
        /// </summary>
        internal static string SFxChannelFactoryTypeMustBeInterface {
            get {
                return ResourceManager.GetString("SFxChannelFactoryTypeMustBeInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation marked as IsTerminating has already been invoked on this channel, causing the channel&apos;s connection to terminate.  No more operations may be invoked on this channel.  Please re-create the channel to continue communication..
        /// </summary>
        internal static string SFxChannelTerminated0 {
            get {
                return ResourceManager.GetString("SFxChannelTerminated0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This channel can no longer be used to send messages as the output session was auto-closed due to a server-initiated shutdown. Either disable auto-close by setting the DispatchRuntime.AutomaticInputSessionShutdown to false, or consider modifying the shutdown protocol with the remote server..
        /// </summary>
        internal static string SFxClientOutputSessionAutoClosed {
            get {
                return ResourceManager.GetString("SFxClientOutputSessionAutoClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceHost close operation timed out after {0}.  This could be because a client failed to close a sessionful channel within the required time.  The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SFxCloseTimedOut1 {
            get {
                return ResourceManager.GetString("SFxCloseTimedOut1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close process timed out waiting for service dispatch to complete..
        /// </summary>
        internal static string SfxCloseTimedOutWaitingForDispatchToComplete {
            get {
                return ResourceManager.GetString("SfxCloseTimedOutWaitingForDispatchToComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array of type {0} is not supported..
        /// </summary>
        internal static string SFxCodeGenArrayTypeIsNotSupported {
            get {
                return ResourceManager.GetString("SFxCodeGenArrayTypeIsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can only store into ArgBuilder or LocalBuilder. Got: {0}..
        /// </summary>
        internal static string SFxCodeGenCanOnlyStoreIntoArgOrLocGot0 {
            get {
                return ResourceManager.GetString("SFxCodeGenCanOnlyStoreIntoArgOrLocGot0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expecting End {0}..
        /// </summary>
        internal static string SFxCodeGenExpectingEnd {
            get {
                return ResourceManager.GetString("SFxCodeGenExpectingEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not assignable from {1}..
        /// </summary>
        internal static string SFxCodeGenIsNotAssignableFrom {
            get {
                return ResourceManager.GetString("SFxCodeGenIsNotAssignableFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No conversion possible to {0}..
        /// </summary>
        internal static string SFxCodeGenNoConversionPossibleTo {
            get {
                return ResourceManager.GetString("SFxCodeGenNoConversionPossibleTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: Unrecognized constant type {0}..
        /// </summary>
        internal static string SFxCodeGenUnknownConstantType {
            get {
                return ResourceManager.GetString("SFxCodeGenUnknownConstantType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CODEGEN: {0}.
        /// </summary>
        internal static string SFxCodeGenWarning {
            get {
                return ResourceManager.GetString("SFxCodeGenWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This collection does not support setting items by index..
        /// </summary>
        internal static string SFxCollectionDoesNotSupportSet0 {
            get {
                return ResourceManager.GetString("SFxCollectionDoesNotSupportSet0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not supported because the collection is read-only..
        /// </summary>
        internal static string SFxCollectionReadOnly {
            get {
                return ResourceManager.GetString("SFxCollectionReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection of type {0} does not support values of type {1}..
        /// </summary>
        internal static string SFxCollectionWrongType2 {
            get {
                return ResourceManager.GetString("SFxCollectionWrongType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find endpoint element with name &apos;{0}&apos; and contract &apos;{1}&apos; in the ServiceModel client configuration section. This might be because no configuration file was found for your application, or because no endpoint element matching this name could be found in the client element..
        /// </summary>
        internal static string SFxConfigChannelConfigurationNotFound {
            get {
                return ResourceManager.GetString("SFxConfigChannelConfigurationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find default endpoint element that references contract &apos;{0}&apos; in the ServiceModel client configuration section. This might be because no configuration file was found for your application, or because no endpoint element matching this contract could be found in the client element..
        /// </summary>
        internal static string SFxConfigContractNotFound {
            get {
                return ResourceManager.GetString("SFxConfigContractNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint configuration section for contract &apos;{0}&apos; with name &apos;{1}&apos; could not be loaded because more than one endpoint configuration with the same name and contract were found. Please check your config and try again..
        /// </summary>
        internal static string SFxConfigLoaderMultipleEndpointMatchesSpecified2 {
            get {
                return ResourceManager.GetString("SFxConfigLoaderMultipleEndpointMatchesSpecified2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An endpoint configuration section for contract &apos;{0}&apos; could not be loaded because more than one endpoint configuration for that contract was found. Please indicate the preferred endpoint configuration section by name..
        /// </summary>
        internal static string SFxConfigLoaderMultipleEndpointMatchesWildcard1 {
            get {
                return ResourceManager.GetString("SFxConfigLoaderMultipleEndpointMatchesWildcard1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ConfigurationName property must be a non-empty string..
        /// </summary>
        internal static string SFxConfigurationNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxConfigurationNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Top level XML element with name {0} in namespace {1} cannot reference {2} type because it already references a different type ({3}). Use a different operation name or MessageBodyMemberAttribute to specify a different name for the Message or Message parts..
        /// </summary>
        internal static string SFxConflictingGlobalElement {
            get {
                return ResourceManager.GetString("SFxConflictingGlobalElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate top level XML Schema type with name {0} in namespace {1}..
        /// </summary>
        internal static string SFxConflictingGlobalType {
            get {
                return ResourceManager.GetString("SFxConflictingGlobalType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of OperationContext.Current is not the OperationContext value installed by this OperationContextScope..
        /// </summary>
        internal static string SFxContextModifiedInsideScope0 {
            get {
                return ResourceManager.GetString("SFxContextModifiedInsideScope0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractDescription&apos;s Name must be a non-empty string..
        /// </summary>
        internal static string SFxContractDescriptionNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxContractDescriptionNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractDescription &apos;{0}&apos; has zero IsInitiating=true operations; a contract must have at least one IsInitiating=true operation..
        /// </summary>
        internal static string SFxContractHasZeroInitiatingOperations {
            get {
                return ResourceManager.GetString("SFxContractHasZeroInitiatingOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractDescription &apos;{0}&apos; has zero operations; a contract must have at least one operation..
        /// </summary>
        internal static string SFxContractHasZeroOperations {
            get {
                return ResourceManager.GetString("SFxContractHasZeroOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service class of type {0} both defines a ServiceContract and inherits a ServiceContract from type {1}. Contract inheritance can only be used among interface types.  If a class is marked with ServiceContractAttribute, it must be the only type in the hierarchy with ServiceContractAttribute.  Consider moving the ServiceContractAttribute on type {1} to a separate interface that type {1} implements..
        /// </summary>
        internal static string SFxContractInheritanceRequiresInterfaces {
            get {
                return ResourceManager.GetString("SFxContractInheritanceRequiresInterfaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service class of type {0} both defines a ServiceContract and inherits a ServiceContract from type {1}. Contract inheritance can only be used among interface types.  If a class is marked with ServiceContractAttribute, then another service class cannot derive from it..
        /// </summary>
        internal static string SFxContractInheritanceRequiresInterfaces2 {
            get {
                return ResourceManager.GetString("SFxContractInheritanceRequiresInterfaces2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SynchronizedReadOnlyCollection&apos;s CopyTo only works if the underlying list implements ICollection..
        /// </summary>
        internal static string SFxCopyToRequiresICollection {
            get {
                return ResourceManager.GetString("SFxCopyToRequiresICollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback contract of contract {0} either does not exist or does not define any operations.  If this is not a duplex contract, consider using ChannelFactory instead of DuplexChannelFactory..
        /// </summary>
        internal static string SFxCreateDuplexChannel1 {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannel1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InstanceContext provided to the ChannelFactory contains a UserObject that does not implement the CallbackContractType &apos;{0}&apos;..
        /// </summary>
        internal static string SFxCreateDuplexChannelBadCallbackUserObject {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelBadCallbackUserObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This CreateChannel overload cannot be called on this instance of DuplexChannelFactory, as the DuplexChannelFactory was not initialized with an InstanceContext.  Please call the CreateChannel overload that takes an InstanceContext..
        /// </summary>
        internal static string SFxCreateDuplexChannelNoCallback {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelNoCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This CreateChannel overload cannot be called on this instance of DuplexChannelFactory, as the DuplexChannelFactory was initialized with a Type and no valid InstanceContext was provided.  Please call the CreateChannel overload that takes an InstanceContext..
        /// </summary>
        internal static string SFxCreateDuplexChannelNoCallback1 {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelNoCallback1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This CreateChannel overload cannot be called on this instance of DuplexChannelFactory, as the InstanceContext provided to the DuplexChannelFactory does not contain a valid UserObject..
        /// </summary>
        internal static string SFxCreateDuplexChannelNoCallbackUserObject {
            get {
                return ResourceManager.GetString("SFxCreateDuplexChannelNoCallbackUserObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChannelFactory does not support the contract {0} as it defines a callback contract with one or more operations.  Please consider using DuplexChannelFactory instead of ChannelFactory..
        /// </summary>
        internal static string SFxCreateNonDuplexChannel1 {
            get {
                return ResourceManager.GetString("SFxCreateNonDuplexChannel1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CustomBinding on the ServiceEndpoint with contract &apos;{0}&apos; lacks a TransportBindingElement.  Every binding must have at least one binding element that derives from TransportBindingElement..
        /// </summary>
        internal static string SFxCustomBindingNeedsTransport1 {
            get {
                return ResourceManager.GetString("SFxCustomBindingNeedsTransport1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Scheme cannot be computed for this binding because this CustomBinding lacks a TransportBindingElement.  Every binding must have at least one binding element that derives from TransportBindingElement..
        /// </summary>
        internal static string SFxCustomBindingWithoutTransport {
            get {
                return ResourceManager.GetString("SFxCustomBindingWithoutTransport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataContractSerializer does not support collection specified on element &apos;{0}&apos; .
        /// </summary>
        internal static string SFxDataContractSerializerDoesNotSupportBareArray {
            get {
                return ResourceManager.GetString("SFxDataContractSerializerDoesNotSupportBareArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid OperationFormatUse specified in the OperationFormatStyle of operation {0}, DataContractSerializer supports only Literal..
        /// </summary>
        internal static string SFxDataContractSerializerDoesNotSupportEncoded {
            get {
                return ResourceManager.GetString("SFxDataContractSerializerDoesNotSupportEncoded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The formatter threw an exception while trying to deserialize the message: {0}.
        /// </summary>
        internal static string SFxDeserializationFailed1 {
            get {
                return ResourceManager.GetString("SFxDeserializationFailed1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not possible since the dictionary is empty..
        /// </summary>
        internal static string SFxDictionaryIsEmpty {
            get {
                return ResourceManager.GetString("SFxDictionaryIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type or member named &apos;{0}&apos; could not be loaded because it has two incompatible attributes: &apos;{1}&apos; and &apos;{2}&apos;. To fix the problem, remove one of the attributes from the type or member..
        /// </summary>
        internal static string SFxDisallowedAttributeCombination {
            get {
                return ResourceManager.GetString("SFxDisallowedAttributeCombination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation &apos;{0}&apos;, cannot return null from methods that return Message..
        /// </summary>
        internal static string SFxDispatchRuntimeMessageCannotBeNull {
            get {
                return ResourceManager.GetString("SFxDispatchRuntimeMessageCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DispatchRuntime.EnsureOrderedDispatch property is set to true, but the DispatchRuntime.ConcurrencyMode is not set to Single. EnsureOrderedDispatch requires the use of ConcurrencyMode.Single..
        /// </summary>
        internal static string SfxDispatchRuntimeNonConcurrentOrEnsureOrderedDispatch {
            get {
                return ResourceManager.GetString("SfxDispatchRuntimeNonConcurrentOrEnsureOrderedDispatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fault could not be loaded as the Use setting is Encoded and it references a schema definition using Element attribute. To fix the problem, change the Use setting to Literal..
        /// </summary>
        internal static string SFxDocEncodedFaultNotSupported {
            get {
                return ResourceManager.GetString("SFxDocEncodedFaultNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; could not be loaded as it uses an unsupported combination of Use and Style settings: Document with Encoded. To fix the problem, change the Use setting to Literal or change the Style setting to Rpc..
        /// </summary>
        internal static string SFxDocEncodedNotSupported {
            get {
                return ResourceManager.GetString("SFxDocEncodedNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;P class=&apos;intro&apos;&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;.
        /// </summary>
        internal static string SFxDocExt_CS {
            get {
                return ResourceManager.GetString("SFxDocExt_CS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service encountered an error..
        /// </summary>
        internal static string SFxDocExt_Error {
            get {
                return ResourceManager.GetString("SFxDocExt_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;client&apos; variable to call operations on the service..
        /// </summary>
        internal static string SFxDocExt_MainPageComment {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always close the client..
        /// </summary>
        internal static string SFxDocExt_MainPageComment2 {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageComment2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have created a service.&lt;P class=&apos;intro&apos;&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; .
        /// </summary>
        internal static string SFxDocExt_MainPageIntro1a {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntro1a", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have created a service.&lt;P class=&apos;intro&apos;&gt;To test this service, you will need to create a client and use it to call the service; however, metadata publishing via ?WSDL is currently disabled. This can be enabled via the service&apos;s configuration file. &lt;/P&gt;.
        /// </summary>
        internal static string SFxDocExt_MainPageIntro1b {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntro1b", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;.
        /// </summary>
        internal static string SFxDocExt_MainPageIntro2 {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntro2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can also access the service description as a single file:.
        /// </summary>
        internal static string SFxDocExt_MainPageIntroSingleWsdl {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageIntroSingleWsdl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} Service.
        /// </summary>
        internal static string SFxDocExt_MainPageTitle {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service.
        /// </summary>
        internal static string SFxDocExt_MainPageTitleNoServiceName {
            get {
                return ResourceManager.GetString("SFxDocExt_MainPageTitleNoServiceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: the service name must match the configuration name for the service implementation..
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment1 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the following endpoint. .
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment2 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: your service must have an http base address to add this endpoint..
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment3 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the following element to your service behavior configuration..
        /// </summary>
        internal static string SFxDocExt_NoMetadataConfigComment4 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataConfigComment4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a Windows&amp;#169; Communication Foundation service.&lt;BR/&gt;&lt;BR/&gt;&lt;B&gt;Metadata publishing for this service is currently disabled.&lt;/B&gt;&lt;BR/&gt;&lt;BR/&gt;If you have access to the service, you can enable metadata publishing by completing the following steps to modify your web or application configuration file:&lt;BR/&gt;&lt;BR/&gt;1. Create the following service behavior configuration, or add the &amp;lt;serviceMetadata&amp;gt; element to an existing service behavior configuration:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection1 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2. Add the behavior configuration to the service:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection2 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: the service name must match the configuration name for the service implementation.&lt;BR/&gt;&lt;BR/&gt;3. Add the following endpoint to your service configuration:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection3 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: your service must have an http base address to add this endpoint.&lt;BR/&gt;&lt;BR/&gt;The following is an example service configuration file with metadata publishing enabled:.
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection4 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For more information on publishing metadata please see the following documentation: &lt;a href=&quot;http://go.microsoft.com/fwlink/?LinkId=65455&quot;&gt;http://go.microsoft.com/fwlink/?LinkId=65455&lt;/a&gt;..
        /// </summary>
        internal static string SFxDocExt_NoMetadataSection5 {
            get {
                return ResourceManager.GetString("SFxDocExt_NoMetadataSection5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;P class=&apos;intro&apos;&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;.
        /// </summary>
        internal static string SFxDocExt_VB {
            get {
                return ResourceManager.GetString("SFxDocExt_VB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This service has multiple endpoints listening at &apos;{0}&apos; which share the same initiating action &apos;{1}&apos;.  As a result, messages with this action would be dropped since the dispatcher would not be able to determine the correct endpoint for handling the message.  Please consider hosting these Endpoints at separate ListenUris..
        /// </summary>
        internal static string SFxDuplicateInitiatingActionAtSameVia {
            get {
                return ResourceManager.GetString("SFxDuplicateInitiatingActionAtSameVia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message part {0} in namespace {1} appears more than once in Message..
        /// </summary>
        internal static string SFxDuplicateMessageParts {
            get {
                return ResourceManager.GetString("SFxDuplicateMessageParts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint&apos;s address is not specified. .
        /// </summary>
        internal static string SFxEndpointAddressNotSpecified {
            get {
                return ResourceManager.GetString("SFxEndpointAddressNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IEndpointBehavior &apos;{0}&apos; cannot be used on the server side; this behavior can only be applied to clients..
        /// </summary>
        internal static string SFXEndpointBehaviorUsedOnWrongSide {
            get {
                return ResourceManager.GetString("SFXEndpointBehaviorUsedOnWrongSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint&apos;s binding is not specified..
        /// </summary>
        internal static string SFxEndpointBindingNotSpecified {
            get {
                return ResourceManager.GetString("SFxEndpointBindingNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint&apos;s contract is not specified..
        /// </summary>
        internal static string SFxEndpointContractNotSpecified {
            get {
                return ResourceManager.GetString("SFxEndpointContractNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This EndpointDispatcher is not currently attached to the provided ChannelDispatcher..
        /// </summary>
        internal static string SFxEndpointDispatcherDifferentChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxEndpointDispatcherDifferentChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add EndpointDispatcher to more than one ChannelDispatcher..
        /// </summary>
        internal static string SFxEndpointDispatcherMultipleChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxEndpointDispatcherMultipleChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a base address that matches scheme {0} for the endpoint with binding {1}. Registered base address schemes are [{2}]..
        /// </summary>
        internal static string SFxEndpointNoMatchingScheme {
            get {
                return ResourceManager.GetString("SFxEndpointNoMatchingScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error creating a reader for the MTOM message.
        /// </summary>
        internal static string SFxErrorCreatingMtomReader {
            get {
                return ResourceManager.GetString("SFxErrorCreatingMtomReader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server returned an invalid SOAP Fault.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorDeserializingFault {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in deserializing one of the headers in message {0}.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorDeserializingHeader {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of reply message for operation &apos;{0}&apos;..
        /// </summary>
        internal static string SFxErrorDeserializingReplyBody {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingReplyBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of reply message for operation &apos;{0}&apos;. {1}.
        /// </summary>
        internal static string SFxErrorDeserializingReplyBodyMore {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingReplyBodyMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of request message for operation &apos;{0}&apos;..
        /// </summary>
        internal static string SFxErrorDeserializingRequestBody {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingRequestBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in deserializing body of request message for operation &apos;{0}&apos;. {1}.
        /// </summary>
        internal static string SFxErrorDeserializingRequestBodyMore {
            get {
                return ResourceManager.GetString("SFxErrorDeserializingRequestBodyMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos; on method &apos;{1}&apos; in type &apos;{2}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectingOnMethod3 {
            get {
                return ResourceManager.GetString("SFxErrorReflectingOnMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos; on parameter {1} of method &apos;{2}&apos; in type &apos;{3}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectingOnParameter4 {
            get {
                return ResourceManager.GetString("SFxErrorReflectingOnParameter4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos; on type &apos;{1}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectingOnType2 {
            get {
                return ResourceManager.GetString("SFxErrorReflectingOnType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading attribute &apos;{0}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorReflectionOnUnknown1 {
            get {
                return ResourceManager.GetString("SFxErrorReflectionOnUnknown1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in serializing body of message {0}: &apos;{1}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorSerializingBody {
            get {
                return ResourceManager.GetString("SFxErrorSerializingBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in serializing one of the headers in message {0}: &apos;{1}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxErrorSerializingHeader {
            get {
                return ResourceManager.GetString("SFxErrorSerializingHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --- End of inner ExceptionDetail stack trace ---.
        /// </summary>
        internal static string SFxExceptionDetailEndOfInner {
            get {
                return ResourceManager.GetString("SFxExceptionDetailEndOfInner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ExceptionDetail, likely created by IncludeExceptionDetailInFaults=true, whose value is:.
        /// </summary>
        internal static string SFxExceptionDetailFormat {
            get {
                return ResourceManager.GetString("SFxExceptionDetailFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: Message must be a valid IMethodCallMessage..
        /// </summary>
        internal static string SFxExpectedIMethodCallMessage {
            get {
                return ResourceManager.GetString("SFxExpectedIMethodCallMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified ContractDescription could not be exported to WSDL because the Type property of the MessagePartDescription with name &apos;{1}&apos; in the OperationDescription with name &apos;{0}&apos; is not set.  The Type property must be set in order to create WSDL..
        /// </summary>
        internal static string SFxExportMustHaveType {
            get {
                return ResourceManager.GetString("SFxExportMustHaveType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fault named {0} in operation {1} cannot be imported. {2}.
        /// </summary>
        internal static string SFxFaultCannotBeImported {
            get {
                return ResourceManager.GetString("SFxFaultCannotBeImported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation {0}, more than one fault is declared with detail type {1}.
        /// </summary>
        internal static string SFxFaultContractDuplicateDetailType {
            get {
                return ResourceManager.GetString("SFxFaultContractDuplicateDetailType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation {0}, more than one fault is declared with element name {1} in namespace {2}.
        /// </summary>
        internal static string SFxFaultContractDuplicateElement {
            get {
                return ResourceManager.GetString("SFxFaultContractDuplicateElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: {1} (Fault Detail is equal to {2})..
        /// </summary>
        internal static string SFxFaultExceptionToString3 {
            get {
                return ResourceManager.GetString("SFxFaultExceptionToString3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The creator of this fault did not specify a Reason..
        /// </summary>
        internal static string SFxFaultReason {
            get {
                return ResourceManager.GetString("SFxFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation {0}, the schema type corresponding to the fault detail type {1} is anonymous. Please set Fault name explicitly to export anonymous types..
        /// </summary>
        internal static string SFxFaultTypeAnonymous {
            get {
                return ResourceManager.GetString("SFxFaultTypeAnonymous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a &apos;{0}&apos; using &apos;{1}&apos; or &apos;{2}&apos; is supported in this scenario..
        /// </summary>
        internal static string SFxGetChannelDispatcherDoesNotSupportScheme {
            get {
                return ResourceManager.GetString("SFxGetChannelDispatcherDoesNotSupportScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header name cannot be null or empty..
        /// </summary>
        internal static string SFXHeaderNameCannotBeNullOrEmpty {
            get {
                return ResourceManager.GetString("SFXHeaderNameCannotBeNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header name mismatch in member {1} of type {0}. The header name found in the description is {2}. The element name deduced by the formatter is {3}. This mismatch can happen if the ElementName specified in XmlElementAttribute or XmlArrayAttribute does not match the name specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the member name..
        /// </summary>
        internal static string SFxHeaderNameMismatchInMessageContract {
            get {
                return ResourceManager.GetString("SFxHeaderNameMismatchInMessageContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header name mismatch in operation {0} from contract {1}:{2}. The header name found in the description is {3}. The element name deduced by the formatter is {4}. This mismatch can happen if the ElementName specified in XmlElementAttribute or XmlArrayAttribute does not match the name specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the member name..
        /// </summary>
        internal static string SFxHeaderNameMismatchInOperation {
            get {
                return ResourceManager.GetString("SFxHeaderNameMismatchInOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header namespace mismatch in member {1} of type {0}. The header namespace found in the description is {2}. The element namespace deduced by the formatter is {3}. This mismatch can happen if the Namespace specified in XmlElementAttribute or XmlArrayAttribute does not match the namespace specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the contract namespace..
        /// </summary>
        internal static string SFxHeaderNamespaceMismatchInMessageContract {
            get {
                return ResourceManager.GetString("SFxHeaderNamespaceMismatchInMessageContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header namespace mismatch in operation {0} from contract {1}:{2}. The header namespace found in the description is {3}. The element namespace deduced by the formatter is {4}. This mismatch can happen if the Namespace specified in XmlElementAttribute or XmlArrayAttribute does not match the namespace specified in the MessageHeaderAttribute or MessageHeaderArrayAttribute or the contract namespace..
        /// </summary>
        internal static string SFxHeaderNamespaceMismatchInOperation {
            get {
                return ResourceManager.GetString("SFxHeaderNamespaceMismatchInOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The header &apos;{0}&apos; from the namespace &apos;{1}&apos; was not understood by the recipient of this message, causing the message to not be processed.  This error typically indicates that the sender of this message has enabled a communication protocol that the receiver cannot process.  Please ensure that the configuration of the client&apos;s binding is consistent with the service&apos;s binding. .
        /// </summary>
        internal static string SFxHeaderNotUnderstood {
            get {
                return ResourceManager.GetString("SFxHeaderNotUnderstood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message {0} must not have headers to be used in RPC encoded style..
        /// </summary>
        internal static string SFxHeadersAreNotSupportedInEncoded {
            get {
                return ResourceManager.GetString("SFxHeadersAreNotSupportedInEncoded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This value cannot be changed after the ChannelFactory has opened..
        /// </summary>
        internal static string SFxImmutableChannelFactoryBehavior0 {
            get {
                return ResourceManager.GetString("SFxImmutableChannelFactoryBehavior0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This value cannot be changed after the first ClientBase of type &apos;{0}&apos; has been created..
        /// </summary>
        internal static string SFxImmutableClientBaseCacheSetting {
            get {
                return ResourceManager.GetString("SFxImmutableClientBaseCacheSetting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This value cannot be changed after the ServiceHost has opened..
        /// </summary>
        internal static string SFxImmutableServiceHostBehavior0 {
            get {
                return ResourceManager.GetString("SFxImmutableServiceHostBehavior0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} cannot be changed after the ServiceHost has opened..
        /// </summary>
        internal static string SFxImmutableThrottle1 {
            get {
                return ResourceManager.GetString("SFxImmutableThrottle1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation {0} binding {1} has extra part {2} that is not present in other bindings.
        /// </summary>
        internal static string SFxInconsistentBindingBodyParts {
            get {
                return ResourceManager.GetString("SFxInconsistentBindingBodyParts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Style {1} on header {0} does not match expected style {2}..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationStyleInHeader {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationStyleInHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All parts of message in operation {0} must either contain type or element. .
        /// </summary>
        internal static string SFxInconsistentWsdlOperationStyleInMessageParts {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationStyleInMessageParts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Style {1} inferred from messages in operation {0} does not match expected style {2} specified via bindings..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationStyleInOperationMessages {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationStyleInOperationMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bindings for operation {0} cannot specify different use and style values. Binding {1} specifies use {2} and style {3} while binding {4} specifies use {5} and style {6}..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseAndStyleInBinding {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseAndStyleInBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extensions for operation {0} in binding {1} cannot specify different use values..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseInBindingExtensions {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseInBindingExtensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fault bindings for operation {0} in binding {1} cannot specify different use values..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseInBindingFaults {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseInBindingFaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message bindings for operation {0} in binding {1} cannot specify different use values..
        /// </summary>
        internal static string SFxInconsistentWsdlOperationUseInBindingMessages {
            get {
                return ResourceManager.GetString("SFxInconsistentWsdlOperationUseInBindingMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageVersion &apos;{0}&apos; is not supported in this scenario.  Only MessageVersion &apos;{1}&apos; is supported..
        /// </summary>
        internal static string SFxIncorrectMessageVersion {
            get {
                return ResourceManager.GetString("SFxIncorrectMessageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AllowInitializationUI was set to false for this channel, but the channel is configured to use the &apos;{0}&apos; as an interactive initializer..
        /// </summary>
        internal static string SFxInitializationUIDisallowed {
            get {
                return ResourceManager.GetString("SFxInitializationUIDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The channel is configured to use interactive initializer &apos;{0}&apos;, but the channel was Opened without calling DisplayInitializationUI.  Call DisplayInitializationUI before calling Open or other methods on this channel..
        /// </summary>
        internal static string SFxInitializationUINotCalled {
            get {
                return ResourceManager.GetString("SFxInitializationUINotCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service implementation object invoked with wrong number of input parameters, operation expects {0} parameters but was called with {1} parameters..
        /// </summary>
        internal static string SFxInputParametersToServiceInvalid {
            get {
                return ResourceManager.GetString("SFxInputParametersToServiceInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service implementation object invoked with null input parameters, but operation expects {0} parameters..
        /// </summary>
        internal static string SFxInputParametersToServiceNull {
            get {
                return ResourceManager.GetString("SFxInputParametersToServiceNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InstanceContext has no provider for creating Service implementation objects..
        /// </summary>
        internal static string SFxInstanceNotInitialized {
            get {
                return ResourceManager.GetString("SFxInstanceNotInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This OperationContextScope is being disposed out of order..
        /// </summary>
        internal static string SFxInterleavedContextScopes0 {
            get {
                return ResourceManager.GetString("SFxInterleavedContextScopes0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client was unable to process the callback request due to an internal error.  For more information about the error, either turn on IncludeExceptionDetailInFaults (either from CallbackBehaviorAttribute or from the &lt;clientDebug&gt; configuration behavior) on the client in order to send the exception information back to the server, or turn on tracing as per the Microsoft .NET Framework SDK documentation and inspect the client trace logs..
        /// </summary>
        internal static string SFxInternalCallbackError {
            get {
                return ResourceManager.GetString("SFxInternalCallbackError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server was unable to process the request due to an internal error.  For more information about the error, either turn on IncludeExceptionDetailInFaults (either from ServiceBehaviorAttribute or from the &lt;serviceDebug&gt; configuration behavior) on the server in order to send the exception information back to the client, or turn on tracing as per the Microsoft .NET Framework SDK documentation and inspect the server trace logs..
        /// </summary>
        internal static string SFxInternalServerError {
            get {
                return ResourceManager.GetString("SFxInternalServerError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IAsyncResult&apos;s State must be the state argument passed to your Begin call..
        /// </summary>
        internal static string SFxInvalidAsyncResultState0 {
            get {
                return ResourceManager.GetString("SFxInvalidAsyncResultState0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallbackContract {0} is invalid because it is not an interface type..
        /// </summary>
        internal static string SFxInvalidCallbackContractType {
            get {
                return ResourceManager.GetString("SFxInvalidCallbackContractType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IAsyncResult not provided or of wrong type..
        /// </summary>
        internal static string SFxInvalidCallbackIAsyncResult {
            get {
                return ResourceManager.GetString("SFxInvalidCallbackIAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid IContextChannel passed to OperationContext. Must be either a server dispatching channel or a client proxy channel..
        /// </summary>
        internal static string SFxInvalidChannelToOperationContext {
            get {
                return ResourceManager.GetString("SFxInvalidChannelToOperationContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This OperationContextScope is being disposed on a different thread than it was created..
        /// </summary>
        internal static string SFxInvalidContextScopeThread0 {
            get {
                return ResourceManager.GetString("SFxInvalidContextScopeThread0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationFormatter encountered an invalid Message body. Expected to find node type &apos;Element&apos; with name &apos;{0}&apos; and namespace &apos;{1}&apos;. Found node type &apos;{2}&apos; with name &apos;{3}&apos; and namespace &apos;{4}&apos;.
        /// </summary>
        internal static string SFxInvalidMessageBody {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OperationFormatter could not deserialize any information from the Message because the Message is empty (IsEmpty = true)..
        /// </summary>
        internal static string SFxInvalidMessageBodyEmptyMessage {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while trying to deserialize parameter {0}:{1}.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxInvalidMessageBodyErrorDeserializingParameter {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while trying to deserialize parameter {0}:{1}. The InnerException message was &apos;{2}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxInvalidMessageBodyErrorDeserializingParameterMore {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while trying to serialize parameter {0}:{1}. The InnerException message was &apos;{2}&apos;.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxInvalidMessageBodyErrorSerializingParameter {
            get {
                return ResourceManager.GetString("SFxInvalidMessageBodyErrorSerializingParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation {0} either has a parameter or a return type that is attributed with MessageContractAttribute.  In order to represent the request message using a Message Contract, the operation must have a single parameter attributed with MessageContractAttribute.  In order to represent the response message using a Message Contract, the operation&apos;s return value must be a type that is attributed with MessageContractAttribute and the operation may not have any out or ref parameters..
        /// </summary>
        internal static string SFxInvalidMessageContractSignature {
            get {
                return ResourceManager.GetString("SFxInvalidMessageContractSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageHeaderArrayAttribute found on member {0} is not a single dimensional array..
        /// </summary>
        internal static string SFxInvalidMessageHeaderArrayType {
            get {
                return ResourceManager.GetString("SFxInvalidMessageHeaderArrayType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outgoing reply message for operation &apos;{0}&apos; specified Action=&apos;{1}&apos;, but contract for that operation specifies ReplyAction=&apos;{2}&apos;.    The Action specified in the Message must match the ReplyAction in the contract, or the operation contract must specify ReplyAction=&apos;*&apos;..
        /// </summary>
        internal static string SFxInvalidReplyAction {
            get {
                return ResourceManager.GetString("SFxInvalidReplyAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outgoing request message for operation &apos;{0}&apos; specified Action=&apos;{1}&apos;, but contract for that operation specifies Action=&apos;{2}&apos;.  The Action specified in the Message must match the Action in the contract, or the operation contract must specify Action=&apos;*&apos;..
        /// </summary>
        internal static string SFxInvalidRequestAction {
            get {
                return ResourceManager.GetString("SFxInvalidRequestAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlSerializer attribute {0} is not valid in {1}. Only SoapElement attribute is supported..
        /// </summary>
        internal static string SFxInvalidSoapAttribute {
            get {
                return ResourceManager.GetString("SFxInvalidSoapAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The static CreateChannel method cannot be used with the contract {0} because that contract defines a callback contract.  Please try using one of the static CreateChannel overloads on DuplexChannelFactory&lt;TChannel&gt;..
        /// </summary>
        internal static string SFxInvalidStaticOverloadCalledForDuplexChannelFactory1 {
            get {
                return ResourceManager.GetString("SFxInvalidStaticOverloadCalledForDuplexChannelFactory1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For request in operation {0} to be a stream the operation must have a single parameter whose type is Stream..
        /// </summary>
        internal static string SFxInvalidStreamInRequest {
            get {
                return ResourceManager.GetString("SFxInvalidStreamInRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For response in operation {0} to be a stream the operation must have a single out parameter or return value whose type is Stream..
        /// </summary>
        internal static string SFxInvalidStreamInResponse {
            get {
                return ResourceManager.GetString("SFxInvalidStreamInResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to use Streams with the MessageContract programming model, the type {0} must have a single member with MessageBodyMember attribute and the member type must be Stream..
        /// </summary>
        internal static string SFxInvalidStreamInTypedMessage {
            get {
                return ResourceManager.GetString("SFxInvalidStreamInTypedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer size must be at least {0} bytes..
        /// </summary>
        internal static string SFxInvalidStreamOffsetLength {
            get {
                return ResourceManager.GetString("SFxInvalidStreamOffsetLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PrimitiveOperationFormatter was given a parameter or return type which it does not support..
        /// </summary>
        internal static string SFxInvalidUseOfPrimitiveOperationFormatter {
            get {
                return ResourceManager.GetString("SFxInvalidUseOfPrimitiveOperationFormatter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WSDL binding named {0} is not valid because no match for operation {1} was found in the corresponding portType definition..
        /// </summary>
        internal static string SFxInvalidWsdlBindingOpMismatch2 {
            get {
                return ResourceManager.GetString("SFxInvalidWsdlBindingOpMismatch2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WSDL binding named {0} is not valid because an operation binding doesn&apos;t have a name specified..
        /// </summary>
        internal static string SFxInvalidWsdlBindingOpNoName {
            get {
                return ResourceManager.GetString("SFxInvalidWsdlBindingOpNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlSerializer attribute {0} is not valid in {1}. Only XmlElement, XmlArray, XmlArrayItem and XmlAnyElement attributes are supported in MessageContract when IsWrapped is false..
        /// </summary>
        internal static string SFxInvalidXmlAttributeInBare {
            get {
                return ResourceManager.GetString("SFxInvalidXmlAttributeInBare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlSerializer attribute {0} is not valid in {1}. Only XmlElement, XmlArray, XmlArrayItem, XmlAnyAttribute and XmlAnyElement attributes are supported when IsWrapped is true..
        /// </summary>
        internal static string SFxInvalidXmlAttributeInWrapped {
            get {
                return ResourceManager.GetString("SFxInvalidXmlAttributeInWrapped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must contain either a single ServiceKnownTypeAttribute that refers to a method or a set of ServiceKnownTypeAttributes, each specifying a valid type.
        /// </summary>
        internal static string SFxKnownTypeAttributeInvalid1 {
            get {
                return ResourceManager.GetString("SFxKnownTypeAttributeInvalid1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type of method {1} in type {2} must be IEnumerable&lt;Type&gt; to be used by ServiceKnownTypeAttribute in {0}.
        /// </summary>
        internal static string SFxKnownTypeAttributeReturnType3 {
            get {
                return ResourceManager.GetString("SFxKnownTypeAttributeReturnType3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceKnownTypeAttribute in {0} refers to a method {1} that does not exist in type {2}.
        /// </summary>
        internal static string SFxKnownTypeAttributeUnknownMethod3 {
            get {
                return ResourceManager.GetString("SFxKnownTypeAttributeUnknownMethod3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KnownType cannot be null in operation {0}.
        /// </summary>
        internal static string SFxKnownTypeNull {
            get {
                return ResourceManager.GetString("SFxKnownTypeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MaximumResolvedReferences property of MetadataExchangeClient must be greater than or equal to one.  &apos;{0}&apos; was specified..
        /// </summary>
        internal static string SFxMaximumResolvedReferencesOutOfRange {
            get {
                return ResourceManager.GetString("SFxMaximumResolvedReferencesOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a typed message from type &apos;{0}&apos;.  The functionality only valid for types decorated with MessageContractAttribute..
        /// </summary>
        internal static string SFxMessageContractAttributeRequired {
            get {
                return ResourceManager.GetString("SFxMessageContractAttributeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {1} defines a MessageContract but also derives from a type {0} that does not define a MessageContract.  All of the objects in the inheritance hierarchy of {1} must defines a MessageContract..
        /// </summary>
        internal static string SFxMessageContractBaseTypeNotValid {
            get {
                return ResourceManager.GetString("SFxMessageContractBaseTypeNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message cannot be deserialized into MessageContract type {0} since it does not have a default (parameterless) constructor..
        /// </summary>
        internal static string SFxMessageContractRequiresDefaultConstructor {
            get {
                return ResourceManager.GetString("SFxMessageContractRequiresDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MessageOperationFormatter cannot serialize faults..
        /// </summary>
        internal static string SFxMessageOperationFormatterCannotSerializeFault {
            get {
                return ResourceManager.GetString("SFxMessageOperationFormatterCannotSerializeFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance of MessagePartDescription Name=&apos;{0}&apos; Namespace=&apos;{1}&apos; cannot be used in this context: required &apos;Type&apos; property was not set..
        /// </summary>
        internal static string SFxMessagePartDescriptionMissingType {
            get {
                return ResourceManager.GetString("SFxMessagePartDescriptionMissingType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient could not create an IChannelFactory for: address=&apos;{0}&apos;, dialect=&apos;{1}&apos;, and  identifier=&apos;{2}&apos;. .
        /// </summary>
        internal static string SFxMetadataExchangeClientCouldNotCreateChannelFactory {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientCouldNotCreateChannelFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient instance could not be initialized because no Binding is available for scheme &apos;{0}&apos;. You can supply a Binding in the constructor, or specify a configurationName..
        /// </summary>
        internal static string SFxMetadataExchangeClientCouldNotCreateChannelFactoryBadScheme {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientCouldNotCreateChannelFactoryBadScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient could not create an HttpWebRequest for: address=&apos;{0}&apos;, dialect=&apos;{1}&apos;, and  identifier=&apos;{2}&apos;. .
        /// </summary>
        internal static string SFxMetadataExchangeClientCouldNotCreateWebRequest {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientCouldNotCreateWebRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient was not supplied with a MetadataReference or MetadataLocation from which to get metadata.  You must supply one to the constructor, to the GetMetadata method, or to the BeginGetMetadata method..
        /// </summary>
        internal static string SFxMetadataExchangeClientNoMetadataAddress {
            get {
                return ResourceManager.GetString("SFxMetadataExchangeClientNoMetadataAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the Location property. The Location property must be a valid absolute or relative URI..
        /// </summary>
        internal static string SFxMetadataReferenceInvalidLocation {
            get {
                return ResourceManager.GetString("SFxMetadataReferenceInvalidLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataResolver cannot recieve an empty contracts argument to the Resolve or BeginResolve methods.  You must supply at least one ContractDescription..
        /// </summary>
        internal static string SFxMetadataResolverKnownContractsArgumentCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxMetadataResolverKnownContractsArgumentCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contracts argument to the Resolve or BeginResolve methods cannot contain a null ContractDescription..
        /// </summary>
        internal static string SFxMetadataResolverKnownContractsCannotContainNull {
            get {
                return ResourceManager.GetString("SFxMetadataResolverKnownContractsCannotContainNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ContractDescriptions in contracts must all have unique Name and Namespace pairs.  More than one ContractDescription had the pair Name=&apos;{0}&apos; and Namespace=&apos;{1}&apos;. .
        /// </summary>
        internal static string SFxMetadataResolverKnownContractsUniqueQNames {
            get {
                return ResourceManager.GetString("SFxMetadataResolverKnownContractsUniqueQNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} is not supported on this proxy, this can happen if the method is not marked with OperationContractAttribute or if the interface type is not marked with ServiceContractAttribute..
        /// </summary>
        internal static string SFxMethodNotSupported1 {
            get {
                return ResourceManager.GetString("SFxMethodNotSupported1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceHost implementation type {0} does not implement ServiceContract {1}..
        /// </summary>
        internal static string SFxMethodNotSupportedByType2 {
            get {
                return ResourceManager.GetString("SFxMethodNotSupportedByType2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Callback method {0} is not supported, this can happen if the method is not marked with OperationContractAttribute or if its interface type is not the target of the ServiceContractAttribute&apos;s CallbackContract..
        /// </summary>
        internal static string SFxMethodNotSupportedOnCallback1 {
            get {
                return ResourceManager.GetString("SFxMethodNotSupportedOnCallback1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A DispatchOperation (or ClientOperation) can only be added to its parent DispatchRuntime (or ClientRuntime)..
        /// </summary>
        internal static string SFxMismatchedOperationParent {
            get {
                return ResourceManager.GetString("SFxMismatchedOperationParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Action header was found with namespace &apos;{0}&apos; for the given message..
        /// </summary>
        internal static string SFxMissingActionHeader {
            get {
                return ResourceManager.GetString("SFxMissingActionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback passed to operation &apos;{0}&apos; was called more than once.  This indicates an internal error in the implementation of that operation..
        /// </summary>
        internal static string SFxMultipleCallbackFromAsyncOperation {
            get {
                return ResourceManager.GetString("SFxMultipleCallbackFromAsyncOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling Post() on &apos;{0}&apos; resulted in multiple callbacks.  This indicates a problem in &apos;{0}&apos;..
        /// </summary>
        internal static string SFxMultipleCallbackFromSynchronizationContext {
            get {
                return ResourceManager.GetString("SFxMultipleCallbackFromSynchronizationContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ServiceContract has more the one operation with an Action of &quot;*&quot;.  A ServiceContract can have at most one operation an Action = &quot;*&quot;..
        /// </summary>
        internal static string SFxMultipleContractStarOperations0 {
            get {
                return ResourceManager.GetString("SFxMultipleContractStarOperations0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Service contains multiple ServiceEndpoints with different ContractDescriptions which each have Name=&apos;{0}&apos; and Namespace=&apos;{1}&apos;.  Either provide ContractDescriptions with unique Name and Namespaces, or ensure the ServiceEndpoints have the same ContractDescription instance..
        /// </summary>
        internal static string SFxMultipleContractsWithSameName {
            get {
                return ResourceManager.GetString("SFxMultipleContractsWithSameName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Part {1}:{0} is repeating and is not supported in Soap Encoding..
        /// </summary>
        internal static string SFxMultiplePartsNotAllowedInEncoded {
            get {
                return ResourceManager.GetString("SFxMultiplePartsNotAllowedInEncoded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} in type {1} has more than one header part of type array of XmlElement..
        /// </summary>
        internal static string SFxMultipleUnknownHeaders {
            get {
                return ResourceManager.GetString("SFxMultipleUnknownHeaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SetTransactionComplete method was wrongly called more than once in the operation &apos;{0}&apos; on contract &apos;{1}&apos;. The SetTransactionComplete method can only be called once. This is an invalid scenario and the current transaction was aborted..
        /// </summary>
        internal static string SFxMultiSetTransactionComplete {
            get {
                return ResourceManager.GetString("SFxMultiSetTransactionComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property must be a non-empty string..
        /// </summary>
        internal static string SFxNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot handle invocation of {0} on interface {1} because the OperationSelector on ClientRuntime is null..
        /// </summary>
        internal static string SFxNeedProxyBehaviorOperationSelector2 {
            get {
                return ResourceManager.GetString("SFxNeedProxyBehaviorOperationSelector2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TransactedBatchingBehavior validation failed. Service cannot be started. Transacted batching requires ServiceBehavior.ReleaseServiceInstanceOnTransactionComplete to be false..
        /// </summary>
        internal static string SFxNoBatchingForReleaseOnComplete {
            get {
                return ResourceManager.GetString("SFxNoBatchingForReleaseOnComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TransactedBatchingBehavior validation failed. Service or client cannot be started. Transacted batching is not supported for session contracts. Remove transacted batching behavior from the endpoint or define a non-sessionful contract..
        /// </summary>
        internal static string SFxNoBatchingForSession {
            get {
                return ResourceManager.GetString("SFxNoBatchingForSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service type provided could not be loaded as a service because it does not have a default (parameter-less) constructor. To fix the problem, add a default constructor to the type, or pass an instance of the type to the host..
        /// </summary>
        internal static string SFxNoDefaultConstructor {
            get {
                return ResourceManager.GetString("SFxNoDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message with To &apos;{0}&apos; cannot be processed at the receiver, due to an AddressFilter mismatch at the EndpointDispatcher.  Check that the sender and receiver&apos;s EndpointAddresses agree..
        /// </summary>
        internal static string SFxNoEndpointMatchingAddress {
            get {
                return ResourceManager.GetString("SFxNoEndpointMatchingAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message with Action &apos;{0}&apos; cannot be processed at the receiver because this Action is reserved for the connection opening messages only and cannot be sent from client to server. To invoke this operation on the server, call the &apos;{1}&apos; method on the client proxy instead..
        /// </summary>
        internal static string SFxNoEndpointMatchingAddressForConnectionOpeningMessage {
            get {
                return ResourceManager.GetString("SFxNoEndpointMatchingAddressForConnectionOpeningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message with Action &apos;{0}&apos; cannot be processed at the receiver, due to a ContractFilter mismatch at the EndpointDispatcher. This may be because of either a contract mismatch (mismatched Actions between sender and receiver) or a binding/security mismatch between the sender and the receiver.  Check that sender and receiver have the same contract and the same binding (including security requirements, e.g. Message, Transport, None)..
        /// </summary>
        internal static string SFxNoEndpointMatchingContract {
            get {
                return ResourceManager.GetString("SFxNoEndpointMatchingContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract specified by type &apos;{0}&apos; is ambiguous.  The type derives from at least two different types that each define its own service contract.  For this type to be used as a contract type, exactly one of its inherited contracts must be more derived than any of the others..
        /// </summary>
        internal static string SFxNoMostDerivedContract {
            get {
                return ResourceManager.GetString("SFxNoMostDerivedContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; service is configured with EnsureOrderedDispatch set to true, but the ConcurrencyMode is not set to Single. EnsureOrderedDispatch requires the use of ConcurrencyMode.Single..
        /// </summary>
        internal static string SFxNonConcurrentOrEnsureOrderedDispatch {
            get {
                return ResourceManager.GetString("SFxNonConcurrentOrEnsureOrderedDispatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-Addressing &quot;none&quot; value is not valid for the August 2004 version of WS-Addressing..
        /// </summary>
        internal static string SFxNone2004 {
            get {
                return ResourceManager.GetString("SFxNone2004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object that is not an exception was thrown..
        /// </summary>
        internal static string SFxNonExceptionThrown {
            get {
                return ResourceManager.GetString("SFxNonExceptionThrown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; cannot be the first operation to be called because IsInitiating is false..
        /// </summary>
        internal static string SFxNonInitiatingOperation1 {
            get {
                return ResourceManager.GetString("SFxNonInitiatingOperation1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service implementation object was not initialized or is not available..
        /// </summary>
        internal static string SFxNoServiceObject {
            get {
                return ResourceManager.GetString("SFxNoServiceObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no CLR type specified for parameter {0}, preventing the operation from being generated..
        /// </summary>
        internal static string SfxNoTypeSpecifiedForParameter {
            get {
                return ResourceManager.GetString("SfxNoTypeSpecifiedForParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension {0} prevented call to operation &apos;{1}&apos; from replying by setting the reply to null..
        /// </summary>
        internal static string SFxNullReplyFromExtension2 {
            get {
                return ResourceManager.GetString("SFxNullReplyFromExtension2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formatter {0} returned a null reply message for call to operation &apos;{1}&apos;..
        /// </summary>
        internal static string SFxNullReplyFromFormatter2 {
            get {
                return ResourceManager.GetString("SFxNullReplyFromFormatter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The one-way operation &apos;{1}&apos; on ServiceContract &apos;{0}&apos; is configured for transaction flow. Transactions cannot be flowed over one-way operations..
        /// </summary>
        internal static string SFxOneWayAndTransactionsIncompatible {
            get {
                return ResourceManager.GetString("SFxOneWayAndTransactionsIncompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message with action could not be processed because it is targeted at a request-reply operation, but cannot be replied to as the MessageId property is not set..
        /// </summary>
        internal static string SFxOneWayMessageToTwoWayMethod0 {
            get {
                return ResourceManager.GetString("SFxOneWayMessageToTwoWayMethod0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationBehaviorAttribute can only go on the service class, it cannot be put on the ServiceContract interface. Method &apos;{0}&apos; on type &apos;{1}&apos; violates this..
        /// </summary>
        internal static string SFxOperationBehaviorAttributeOnlyOnServiceClass {
            get {
                return ResourceManager.GetString("SFxOperationBehaviorAttributeOnlyOnServiceClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ReleaseInstanceMode property on OperationBehaviorAttribute can only be set on non-callback operations. Method &apos;{0}&apos; violates this..
        /// </summary>
        internal static string SFxOperationBehaviorAttributeReleaseInstanceModeDoesNotApplyToCallback {
            get {
                return ResourceManager.GetString("SFxOperationBehaviorAttributeReleaseInstanceModeDoesNotApplyToCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; has OperationContractAttribute, but enclosing type &apos;{1}&apos; does not have ServiceContractAttribute. OperationContractAttribute can only be used on methods in ServiceContractAttribute types or on their CallbackContract types..
        /// </summary>
        internal static string SFxOperationContractOnNonServiceContract {
            get {
                return ResourceManager.GetString("SFxOperationContractOnNonServiceContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{1}&apos; has {0}, but enclosing type &apos;{2}&apos; does not have ServiceContractAttribute. {0} can only be used on methods in ServiceContractAttribute types..
        /// </summary>
        internal static string SFxOperationContractProviderOnNonServiceContract {
            get {
                return ResourceManager.GetString("SFxOperationContractProviderOnNonServiceContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationDescription&apos;s Name must be a non-empty string..
        /// </summary>
        internal static string SFxOperationDescriptionNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxOperationDescriptionNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationDescription &apos;{0}&apos; is invalid because its Messages property contains an invalid number of MessageDescription instances. Each OperationDescription must have one or two messages..
        /// </summary>
        internal static string SFxOperationMustHaveOneOrTwoMessages {
            get {
                return ResourceManager.GetString("SFxOperationMustHaveOneOrTwoMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a mismatch between the number of supplied arguments and the number of expected arguments.  Specifically, the argument &apos;{0}&apos; has &apos;{1}&apos; elements while the argument &apos;{2}&apos; has &apos;{3}&apos; elements..
        /// </summary>
        internal static string SFxParameterCountMismatch {
            get {
                return ResourceManager.GetString("SFxParameterCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;parameters&apos; argument must be an array of one element..
        /// </summary>
        internal static string SFxParameterMustBeArrayOfOneElement {
            get {
                return ResourceManager.GetString("SFxParameterMustBeArrayOfOneElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;parameters&apos; argument must be an array that contains a single Message object..
        /// </summary>
        internal static string SFxParameterMustBeMessage {
            get {
                return ResourceManager.GetString("SFxParameterMustBeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All parameter names used in operations that make up a service contract must not be null..
        /// </summary>
        internal static string SFxParameterNameCannotBeNull {
            get {
                return ResourceManager.GetString("SFxParameterNameCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;parameters&apos; argument must be either null or an empty array..
        /// </summary>
        internal static string SFxParametersMustBeEmpty {
            get {
                return ResourceManager.GetString("SFxParametersMustBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message part name {0} is not unique in an RPC Message..
        /// </summary>
        internal static string SFxPartNameMustBeUniqueInRpc {
            get {
                return ResourceManager.GetString("SFxPartNameMustBeUniqueInRpc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In operation &apos;{0}&apos;, cannot pass null to methods that take Message as input parameter..
        /// </summary>
        internal static string SFxProxyRuntimeMessageCannotBeNull {
            get {
                return ResourceManager.GetString("SFxProxyRuntimeMessageCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required message property &apos;{0}&apos; is missing from the IncomingProperties collections of the received message. Ensure that when the receive context is enabled on the binding, the created channel ensures that &apos;{0}&apos; is present on all received messages..
        /// </summary>
        internal static string SFxReceiveContextPropertyMissing {
            get {
                return ResourceManager.GetString("SFxReceiveContextPropertyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract &apos;{0}&apos; has at least one operation annotated with &apos;{1}&apos;, but the binding used for the contract endpoint at address &apos;{2}&apos; does not support required binding property &apos;{3}&apos;. Please ensure that the binding used for the contract supports the ReceiveContext capability..
        /// </summary>
        internal static string SFxReceiveContextSettingsPropertyMissing {
            get {
                return ResourceManager.GetString("SFxReceiveContextSettingsPropertyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract name &apos;{0}&apos; could not be found in the list of contracts implemented by the service &apos;{1}&apos;..
        /// </summary>
        internal static string SfxReflectedContractKeyNotFound2 {
            get {
                return ResourceManager.GetString("SfxReflectedContractKeyNotFound2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to add an endpoint to the service &apos;{0}&apos;, a non-empty contract name must be specified..
        /// </summary>
        internal static string SfxReflectedContractKeyNotFoundEmpty {
            get {
                return ResourceManager.GetString("SfxReflectedContractKeyNotFoundEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract name &apos;IMetadataExchange&apos; could not be found in the list of contracts implemented by the service {0}.  Add a ServiceMetadataBehavior to the configuration file or to the ServiceHost directly to enable support for this contract..
        /// </summary>
        internal static string SfxReflectedContractKeyNotFoundIMetadataExchange {
            get {
                return ResourceManager.GetString("SfxReflectedContractKeyNotFoundIMetadataExchange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An endpoint for type &apos;{0}&apos; could not be added because the ServiceHost instance was not initialized properly.  In order to add endpoints by Type, the CreateDescription method must be called.  If you are using a class derived from ServiceHost, ensure that the class is properly calling base.CreateDescription..
        /// </summary>
        internal static string SfxReflectedContractsNotInitialized1 {
            get {
                return ResourceManager.GetString("SfxReflectedContractsNotInitialized1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply message was received for operation &apos;{0}&apos; with action &apos;{1}&apos;. However, your client code requires action &apos;{2}&apos;..
        /// </summary>
        internal static string SFxReplyActionMismatch3 {
            get {
                return ResourceManager.GetString("SFxReplyActionMismatch3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has FaultTo=&apos;{0}&apos; but IContextChannel.LocalAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress.  Enable ManualAddressing or avoid setting FaultTo on the message..
        /// </summary>
        internal static string SFxRequestHasInvalidFaultToOnClient {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidFaultToOnClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has FaultTo=&apos;{0}&apos; but IContextChannel.RemoteAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress because sending a reply to a different address than the original sender can create a security risk.  If you want to process such messages, enable ManualAddressing..
        /// </summary>
        internal static string SFxRequestHasInvalidFaultToOnServer {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidFaultToOnServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has From=&apos;{0}&apos; but IContextChannel.LocalAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress.  Enable ManualAddressing or avoid setting From on the message..
        /// </summary>
        internal static string SFxRequestHasInvalidFromOnClient {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidFromOnClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has From=&apos;{0}&apos; but IContextChannel.RemoteAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress because sending a reply to a different address than the original sender can create a security risk.  If you want to process such messages, enable ManualAddressing..
        /// </summary>
        internal static string SFxRequestHasInvalidFromOnServer {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidFromOnServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has ReplyTo=&apos;{0}&apos; but IContextChannel.LocalAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress.  Enable ManualAddressing or avoid setting ReplyTo on the message..
        /// </summary>
        internal static string SFxRequestHasInvalidReplyToOnClient {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidReplyToOnClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request message has ReplyTo=&apos;{0}&apos; but IContextChannel.RemoteAddress is &apos;{1}&apos;.  When ManualAddressing is false, these values must be the same, null, or EndpointAddress.AnonymousAddress because sending a reply to a different address than the original sender can create a security risk.  If you want to process such messages, enable ManualAddressing..
        /// </summary>
        internal static string SFxRequestHasInvalidReplyToOnServer {
            get {
                return ResourceManager.GetString("SFxRequestHasInvalidReplyToOnServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was received with a WS-Addressing ReplyTo or FaultTo header targeted at the &quot;None&quot; address.  These values are not valid for request-reply operations.  Please consider using a one-way operation or enabling ManualAddressing if you need to support ReplyTo or FaultTo values of &quot;None.&quot;.
        /// </summary>
        internal static string SFxRequestReplyNone {
            get {
                return ResourceManager.GetString("SFxRequestReplyNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This request operation did not receive a reply within the configured timeout ({0}).  The time allotted to this operation may have been a portion of a longer timeout.  This may be because the service is still processing the operation or because the service was unable to send a reply message.  Please consider increasing the operation timeout (by casting the channel/proxy to IContextChannel and setting the OperationTimeout property) and ensure that the service is able to connect to the client..
        /// </summary>
        internal static string SFxRequestTimedOut1 {
            get {
                return ResourceManager.GetString("SFxRequestTimedOut1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This request operation sent to {0} did not receive a reply within the configured timeout ({1}).  The time allotted to this operation may have been a portion of a longer timeout.  This may be because the service is still processing the operation or because the service was unable to send a reply message.  Please consider increasing the operation timeout (by casting the channel/proxy to IContextChannel and setting the OperationTimeout property) and ensure that the service is able to connect to the client..
        /// </summary>
        internal static string SFxRequestTimedOut2 {
            get {
                return ResourceManager.GetString("SFxRequestTimedOut2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required runtime property &apos;{0}&apos; is not initialized on DispatchRuntime. Do not remove ServiceBehaviorAttribute from ServiceDescription.Behaviors or ensure that you include a third-party service behavior that supplies this value..
        /// </summary>
        internal static string SFxRequiredRuntimePropertyMissing {
            get {
                return ResourceManager.GetString("SFxRequiredRuntimePropertyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient has resolved more than MaximumResolvedReferences..
        /// </summary>
        internal static string SFxResolvedMaxResolvedReferences {
            get {
                return ResourceManager.GetString("SFxResolvedMaxResolvedReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;result&apos; argument must be of type Message..
        /// </summary>
        internal static string SFxResultMustBeMessage {
            get {
                return ResourceManager.GetString("SFxResultMustBeMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not revert impersonation on current thread. Continuing would compromise system security. Terminating process..
        /// </summary>
        internal static string SFxRevertImpersonationFailed0 {
            get {
                return ResourceManager.GetString("SFxRevertImpersonationFailed0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RPC Message {1} in operation {0} has an invalid body name {2}. It must be {3}.
        /// </summary>
        internal static string SFxRpcMessageBodyPartNameInvalid {
            get {
                return ResourceManager.GetString("SFxRpcMessageBodyPartNameInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RPC Message {1} in operation {0} must have a single MessageBodyMember..
        /// </summary>
        internal static string SFxRpcMessageMustHaveASingleBody {
            get {
                return ResourceManager.GetString("SFxRpcMessageMustHaveASingleBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem loading the XSD documents provided: a reference to a schema element with name &apos;{0}&apos; and namespace &apos;{1}&apos; could not be resolved because the element definition could not be found in the schema for targetNamespace &apos;{1}&apos;. Please check the XSD documents provided and try again..
        /// </summary>
        internal static string SFxSchemaDoesNotContainElement {
            get {
                return ResourceManager.GetString("SFxSchemaDoesNotContainElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem loading the XSD documents provided: a reference to a schema type with name &apos;{0}&apos; and namespace &apos;{1}&apos; could not be resolved because the type definition could not be found in the schema for targetNamespace &apos;{1}&apos;. Please check the XSD documents provided and try again..
        /// </summary>
        internal static string SFxSchemaDoesNotContainType {
            get {
                return ResourceManager.GetString("SFxSchemaDoesNotContainType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schema with target namespace &apos;{0}&apos; could not be found..
        /// </summary>
        internal static string SFxSchemaNotFound {
            get {
                return ResourceManager.GetString("SFxSchemaNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityContextProperty is missing from the request Message, this may indicate security is configured incorrectly..
        /// </summary>
        internal static string SFxSecurityContextPropertyMissingFromRequestMessage {
            get {
                return ResourceManager.GetString("SFxSecurityContextPropertyMissingFromRequestMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server did not provide a meaningful reply; this might be caused by a contract mismatch, a premature session shutdown or an internal server error..
        /// </summary>
        internal static string SFxServerDidNotReply {
            get {
                return ResourceManager.GetString("SFxServerDidNotReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be invoked because the property &apos;{1}&apos; on the OperationContract is set to &apos;{2}&apos;. To invoke this operation on the server, call the &apos;{3}&apos; method on the client proxy instead..
        /// </summary>
        internal static string SFxServiceChannelCannotBeCalledBecauseIsSessionOpenNotificationEnabled {
            get {
                return ResourceManager.GetString("SFxServiceChannelCannotBeCalledBecauseIsSessionOpenNotificationEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be completed because the sessionful channel timed out waiting to receive a message.  To increase the timeout, either set the receiveTimeout property on the binding in your configuration file, or set the ReceiveTimeout property on the Binding directly..
        /// </summary>
        internal static string SFxServiceChannelIdleAborted {
            get {
                return ResourceManager.GetString("SFxServiceChannelIdleAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract type {0} is not attributed with ServiceContractAttribute.  In order to define a valid contract, the specified type (either contract interface or service class) must be attributed with ServiceContractAttribute..
        /// </summary>
        internal static string SfxServiceContractAttributeNotFound {
            get {
                return ResourceManager.GetString("SfxServiceContractAttributeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to generate configuration information using the GenerateServiceEndpoint method, the ServiceContractGenerator instance must have been initialized with a valid Configuration object..
        /// </summary>
        internal static string SFxServiceContractGeneratorConfigRequired {
            get {
                return ResourceManager.GetString("SFxServiceContractGeneratorConfigRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoints cannot be added after the ServiceHost has been opened/faulted/aborted/closed..
        /// </summary>
        internal static string SFxServiceHostBaseCannotAddEndpointAfterOpen {
            get {
                return ResourceManager.GetString("SFxServiceHostBaseCannotAddEndpointAfterOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoints cannot be added before the Description property has been initialized..
        /// </summary>
        internal static string SFxServiceHostBaseCannotAddEndpointWithoutDescription {
            get {
                return ResourceManager.GetString("SFxServiceHostBaseCannotAddEndpointWithoutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ApplyConfiguration requires that the Description property be initialized. Either provide a valid ServiceDescription in the CreateDescription method or override the ApplyConfiguration method to provide an alternative implementation..
        /// </summary>
        internal static string SFxServiceHostBaseCannotApplyConfigurationWithoutDescription {
            get {
                return ResourceManager.GetString("SFxServiceHostBaseCannotApplyConfigurationWithoutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InitializeRuntime requires that the Description property be initialized. Either provide a valid ServiceDescription in the CreateDescription method or override the InitializeRuntime method to provide an alternative implementation..
        /// </summary>
        internal static string SFxServiceHostBaseCannotInitializeRuntimeWithoutDescription {
            get {
                return ResourceManager.GetString("SFxServiceHostBaseCannotInitializeRuntimeWithoutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LoadConfigurationSection requires that the Description property be initialized. Provide a valid ServiceDescription in the CreateDescription method..
        /// </summary>
        internal static string SFxServiceHostBaseCannotLoadConfigurationSectionWithoutDescription {
            get {
                return ResourceManager.GetString("SFxServiceHostBaseCannotLoadConfigurationSectionWithoutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InitializeDescription must be called with a serviceType or singletonInstance parameter..
        /// </summary>
        internal static string SFxServiceHostCannotCreateDescriptionWithoutServiceType {
            get {
                return ResourceManager.GetString("SFxServiceHostCannotCreateDescriptionWithoutServiceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceHost only supports class service types..
        /// </summary>
        internal static string SFxServiceHostNeedsClass {
            get {
                return ResourceManager.GetString("SFxServiceHostNeedsClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ChannelDispatcher with ListenUri &apos;{0}&apos; has endpoints with the following contracts: {1}. Metadata endpoints cannot share ListenUris. The conflicting endpoints were either specified in AddServiceEndpoint() calls, in a config file, or a combination of AddServiceEndpoint() and config..
        /// </summary>
        internal static string SFxServiceMetadataBehaviorInstancingError {
            get {
                return ResourceManager.GetString("SFxServiceMetadataBehaviorInstancingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HttpGetEnabled property of ServiceMetadataBehavior is set to true and the HttpGetUrl property is a relative address, but there is no http base address.  Either supply an http base address or set HttpGetUrl to an absolute address..
        /// </summary>
        internal static string SFxServiceMetadataBehaviorNoHttpBaseAddress {
            get {
                return ResourceManager.GetString("SFxServiceMetadataBehaviorNoHttpBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HttpsGetEnabled property of ServiceMetadataBehavior is set to true and the HttpsGetUrl property is a relative address, but there is no https base address.  Either supply an https base address or set HttpsGetUrl to an absolute address..
        /// </summary>
        internal static string SFxServiceMetadataBehaviorNoHttpsBaseAddress {
            get {
                return ResourceManager.GetString("SFxServiceMetadataBehaviorNoHttpsBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must be a relative URI or an absolute URI with scheme &apos;{1}&apos;.  &apos;{2}&apos; is an absolute URI with scheme &apos;{3}&apos;. .
        /// </summary>
        internal static string SFxServiceMetadataBehaviorUrlMustBeHttpOrRelative {
            get {
                return ResourceManager.GetString("SFxServiceMetadataBehaviorUrlMustBeHttpOrRelative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service implementation type is an interface or abstract class and no implementation object was provided..
        /// </summary>
        internal static string SFxServiceTypeNotCreatable {
            get {
                return ResourceManager.GetString("SFxServiceTypeNotCreatable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property sets EnableFaults on the client. To set EnableFaults on the server, use ChannelDispatcher&apos;s EnableFaults..
        /// </summary>
        internal static string SFxSetEnableFaultsOnChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxSetEnableFaultsOnChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property sets ManualAddressing on the client. To set ManualAddressing on the server, use ChannelDispatcher&apos;s ManualAddressing..
        /// </summary>
        internal static string SFxSetManualAddresssingOnChannelDispatcher0 {
            get {
                return ResourceManager.GetString("SFxSetManualAddresssingOnChannelDispatcher0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header properties cannot be set in MessageHeaderAttribute of {0} as its type is MessageHeader&lt;T&gt;..
        /// </summary>
        internal static string SFxStaticMessageHeaderPropertiesNotAllowed {
            get {
                return ResourceManager.GetString("SFxStaticMessageHeaderPropertiesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception has been thrown when reading the stream..
        /// </summary>
        internal static string SFxStreamIOException {
            get {
                return ResourceManager.GetString("SFxStreamIOException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message containing this stream has been closed. Note that request streams cannot be accessed after the service operation returns..
        /// </summary>
        internal static string SFxStreamRequestMessageClosed {
            get {
                return ResourceManager.GetString("SFxStreamRequestMessageClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message containing this stream has been closed. .
        /// </summary>
        internal static string SFxStreamResponseMessageClosed {
            get {
                return ResourceManager.GetString("SFxStreamResponseMessageClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This channel cannot send any more messages because IsTerminating operation &apos;{0}&apos; has already been called..
        /// </summary>
        internal static string SFxTerminatingOperationAlreadyCalled1 {
            get {
                return ResourceManager.GetString("SFxTerminatingOperationAlreadyCalled1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throttle limit must be greater than zero. To disable, set to Int32.MaxValue..
        /// </summary>
        internal static string SFxThrottleLimitMustBeGreaterThanZero0 {
            get {
                return ResourceManager.GetString("SFxThrottleLimitMustBeGreaterThanZero0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timeout value provided was not of a recognized format.  Please see InnerException for more details..
        /// </summary>
        internal static string SFxTimeoutInvalidStringFormat {
            get {
                return ResourceManager.GetString("SFxTimeoutInvalidStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout must be greater than or equal to TimeSpan.Zero. To disable timeout, specify TimeSpan.MaxValue..
        /// </summary>
        internal static string SFxTimeoutOutOfRange0 {
            get {
                return ResourceManager.GetString("SFxTimeoutOutOfRange0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeouts larger than Int32.MaxValue TotalMilliseconds (approximately 24 days) cannot be honored. To disable timeout, specify TimeSpan.MaxValue..
        /// </summary>
        internal static string SFxTimeoutOutOfRangeTooBig {
            get {
                return ResourceManager.GetString("SFxTimeoutOutOfRangeTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a unique part name for {0}..
        /// </summary>
        internal static string SFxTooManyPartsWithSameName {
            get {
                return ResourceManager.GetString("SFxTooManyPartsWithSameName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecognized element was encountered in the XML during deserialization which was ignored..
        /// </summary>
        internal static string SFxTraceCodeElementIgnored {
            get {
                return ResourceManager.GetString("SFxTraceCodeElementIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TransactedBatchingBehavior validation failed. The service endpoint cannot be started. TransactedBatchingBehavior requires a binding that contains a binding element ITransactedBindingElement that returns true for ITransactedBindingElement.TransactedReceiveEnabled. If you are using NetMsmqBinding or MsmqIntegrationBinding make sure that ExactlyOnce is set to true..
        /// </summary>
        internal static string SfxTransactedBindingNeeded {
            get {
                return ResourceManager.GetString("SfxTransactedBindingNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction under which this method call was executing was asynchronously aborted..
        /// </summary>
        internal static string SFxTransactionAsyncAborted {
            get {
                return ResourceManager.GetString("SFxTransactionAsyncAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{1}&apos; on contract &apos;{0}&apos; is configured with TransactionAutoComplete set to false and the InstanceContextMode is not set to PerSession. TransactionAutoComplete set to false requires the use of InstanceContextMode.PerSession..
        /// </summary>
        internal static string SFxTransactionAutoCompleteFalseAndInstanceContextMode {
            get {
                return ResourceManager.GetString("SFxTransactionAutoCompleteFalseAndInstanceContextMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{1}&apos; on contract &apos;{0}&apos; is configured with TransactionAutoComplete set to false but SessionMode is not set to Required. TransactionAutoComplete set to false requires SessionMode.Required..
        /// </summary>
        internal static string SFxTransactionAutoCompleteFalseAndSupportsSession {
            get {
                return ResourceManager.GetString("SFxTransactionAutoCompleteFalseAndSupportsSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; on callback contract &apos;{1}&apos; is configured with TransactionAutoComplete set to false. TransactionAutoComplete set to false cannot be used with operations on callback contracts..
        /// </summary>
        internal static string SFxTransactionAutoCompleteFalseOnCallbackContract {
            get {
                return ResourceManager.GetString("SFxTransactionAutoCompleteFalseOnCallbackContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service &apos;{0}&apos; is configured with TransactionAutoCompleteOnSessionClose set to true and with an InstanceContextMode not set to PerSession. TransactionAutoCompleteOnSessionClose set to true requires an instancing mode that uses sessions..
        /// </summary>
        internal static string SFxTransactionAutoCompleteOnSessionCloseNoSession {
            get {
                return ResourceManager.GetString("SFxTransactionAutoCompleteOnSessionCloseNoSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming transaction cannot be deserialized. The transaction header in the message was either malformed or in an unrecognized format. The client and the service must be configured to use the same protocol and protocol version. The following exception occurred: {0}.
        /// </summary>
        internal static string SFxTransactionDeserializationFailed {
            get {
                return ResourceManager.GetString("SFxTransactionDeserializationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding for the endpoint at address &apos;{0}&apos; is configured with both the MsmqTransportBindingElement and the TransactionFlowBindingElement. These two elements cannot be used together..
        /// </summary>
        internal static string SFxTransactionFlowAndMSMQ {
            get {
                return ResourceManager.GetString("SFxTransactionFlowAndMSMQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service operation requires a transaction to be flowed..
        /// </summary>
        internal static string SFxTransactionFlowRequired {
            get {
                return ResourceManager.GetString("SFxTransactionFlowRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction header &apos;{0}&apos; within the namespace &apos;{1}&apos; was not understood by the service. The client and the service must be configured to use the same protocol and protocol version (&apos;{2}&apos;)..
        /// </summary>
        internal static string SFxTransactionHeaderNotUnderstood {
            get {
                return ResourceManager.GetString("SFxTransactionHeaderNotUnderstood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SetTransactionComplete method was called in the operation &apos;{0}&apos; on contract &apos;{1}&apos; when TransactionAutoComplete was set to true. The SetTransactionComplete method can only be called when TransactionAutoComplete is set to false. This is an invalid scenario and the current transaction was aborted..
        /// </summary>
        internal static string SFxTransactionInvalidSetTransactionComplete {
            get {
                return ResourceManager.GetString("SFxTransactionInvalidSetTransactionComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service &apos;{0}&apos; is configured with a TransactionIsolationLevel but no operations are configured with TransactionScopeRequired set to true. TransactionIsolationLevel requires at least one operation with TransactionScopeRequired set to true..
        /// </summary>
        internal static string SFxTransactionIsolationLevelNeedsScope {
            get {
                return ResourceManager.GetString("SFxTransactionIsolationLevelNeedsScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TThe operation &apos;{1}&apos; on contract &apos;{0}&apos; is configured with TransactionAutoComplete set to false and with ConcurrencyMode not set to Single. TransactionAutoComplete set to false requires ConcurrencyMode.Single..
        /// </summary>
        internal static string SFxTransactionNonConcurrentOrAutoComplete2 {
            get {
                return ResourceManager.GetString("SFxTransactionNonConcurrentOrAutoComplete2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; service is configured with ReleaseServiceInstanceOnTransactionComplete set to true, but the ConcurrencyMode is not set to Single. The ReleaseServiceInstanceOnTransactionComplete requires the use of ConcurrencyMode.Single..
        /// </summary>
        internal static string SFxTransactionNonConcurrentOrReleaseServiceInstanceOnTxComplete {
            get {
                return ResourceManager.GetString("SFxTransactionNonConcurrentOrReleaseServiceInstanceOnTxComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service &apos;{0}&apos; is configured with ReleaseServiceInstanceOnTransactionComplete but no operations are configured with TransactionScopeRequired set to true. The ReleaseServiceInstanceOnTransactionComplete property requires at least one operation with TransactionScopeRequired set to true. Remove the ReleaseServiceInstanceOnTransactionComplete property from the service if this is the case..
        /// </summary>
        internal static string SFxTransactionReleaseServiceInstanceOnTransactionCompleteNeedsScope {
            get {
                return ResourceManager.GetString("SFxTransactionReleaseServiceInstanceOnTransactionCompleteNeedsScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service does not support concurrent transactions..
        /// </summary>
        internal static string SFxTransactionsNotSupported {
            get {
                return ResourceManager.GetString("SFxTransactionsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service &apos;{0}&apos; is configured with TransactionAutoCompleteOnSessionClose, but no operations are configured with TransactionScopeRequired set to true. The TransactionAutoCompleteOnSessionClose property requires at least one operation with TransactionScopeRequired set to true. Remove the TransactionAutoCompleteOnSessionClose property from the service if this is the case..
        /// </summary>
        internal static string SFxTransactionTransactionAutoCompleteOnSessionCloseNeedsScope {
            get {
                return ResourceManager.GetString("SFxTransactionTransactionAutoCompleteOnSessionCloseNeedsScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service &apos;{0}&apos; is configured with a TransactionTimeout but no operations are configured with TransactionScopeRequired set to true. TransactionTimeout requires at least one operation with TransactionScopeRequired set to true..
        /// </summary>
        internal static string SFxTransactionTransactionTimeoutNeedsScope {
            get {
                return ResourceManager.GetString("SFxTransactionTransactionTimeoutNeedsScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The flowed transaction could not be unmarshaled. The following exception occurred: {0}.
        /// </summary>
        internal static string SFxTransactionUnmarshalFailed {
            get {
                return ResourceManager.GetString("SFxTransactionUnmarshalFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to add more than one transaction to a message. At most one transaction can be added..
        /// </summary>
        internal static string SFxTryAddMultipleTransactionsOnMessage {
            get {
                return ResourceManager.GetString("SFxTryAddMultipleTransactionsOnMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: The instance of the MessageContract cannot be null in {0}..
        /// </summary>
        internal static string SFxTypedMessageCannotBeNull {
            get {
                return ResourceManager.GetString("SFxTypedMessageCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be loaded because it specifies &quot;rpc-style&quot; in &quot;literal&quot; mode, but uses message contract types or the System.ServiceModel.Channels.Message. This combination is disallowed -- specify a different value for style or use parameters other than message contract types or System.ServiceModel.Channels.Message..
        /// </summary>
        internal static string SFxTypedMessageCannotBeRpcLiteral {
            get {
                return ResourceManager.GetString("SFxTypedMessageCannotBeRpcLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; could not be loaded because it has a parameter or return type of type System.ServiceModel.Channels.Message or a type that has MessageContractAttribute and other parameters of different types. When using System.ServiceModel.Channels.Message or types with MessageContractAttribute, the method must not use any other types of parameters..
        /// </summary>
        internal static string SFxTypedOrUntypedMessageCannotBeMixedWithParameters {
            get {
                return ResourceManager.GetString("SFxTypedOrUntypedMessageCannotBeMixedWithParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using the rpc-encoded style, message contract types or the System.ServiceModel.Channels.Message type cannot be used if the operation has no parameters or has a void return value. Add a blank message contract type as a parameter or return type to operation &apos;{0}&apos;..
        /// </summary>
        internal static string SFxTypedOrUntypedMessageCannotBeMixedWithVoidInRpc {
            get {
                return ResourceManager.GetString("SFxTypedOrUntypedMessageCannotBeMixedWithVoidInRpc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This fault did not provide a matching translation: {0}.
        /// </summary>
        internal static string SFxUnknownFaultNoMatchingTranslation1 {
            get {
                return ResourceManager.GetString("SFxUnknownFaultNoMatchingTranslation1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This fault did not provide a reason (MessageFault.Reason was null)..
        /// </summary>
        internal static string SFxUnknownFaultNullReason0 {
            get {
                return ResourceManager.GetString("SFxUnknownFaultNullReason0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This fault did not provide a reason (MessageFault.Reason.Translations.Count was 0)..
        /// </summary>
        internal static string SFxUnknownFaultZeroReasons0 {
            get {
                return ResourceManager.GetString("SFxUnknownFaultZeroReasons0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter value &apos;{0}&apos; is an invalid URI..
        /// </summary>
        internal static string SFXUnvalidNamespaceParam {
            get {
                return ResourceManager.GetString("SFXUnvalidNamespaceParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value &apos;{0}&apos; provided for {1} property is an invalid URI..
        /// </summary>
        internal static string SFXUnvalidNamespaceValue {
            get {
                return ResourceManager.GetString("SFXUnvalidNamespaceValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User operation &apos;{0}.{1}&apos; threw an exception that is unhandled in user code. This exception will be rethrown. If this is a recurring problem, it may indicate an error in the implementation of the &apos;{0}.{1}&apos; method..
        /// </summary>
        internal static string SFxUserCodeThrewException {
            get {
                return ResourceManager.GetString("SFxUserCodeThrewException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; requires additional schema information that cannot be captured using the parameter mode. The specific attribute is &apos;{1}&apos;..
        /// </summary>
        internal static string SfxUseTypedMessageForCustomAttributes {
            get {
                return ResourceManager.GetString("SfxUseTypedMessageForCustomAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add outgoing headers to message as MessageVersion in OperationContext.Current &apos;{0}&apos; does not match with the header version of message being processed &apos;{1}&apos;..
        /// </summary>
        internal static string SFxVersionMismatchInOperationContextAndMessage2 {
            get {
                return ResourceManager.GetString("SFxVersionMismatchInOperationContextAndMessage2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to use one of the ServiceHost constructors that takes a service instance, the InstanceContextMode of the service must be set to InstanceContextMode.Single.  This can be configured via the ServiceBehaviorAttribute.  Otherwise, please consider using the ServiceHost constructors that take a Type argument..
        /// </summary>
        internal static string SFxWellKnownNonSingleton0 {
            get {
                return ResourceManager.GetString("SFxWellKnownNonSingleton0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When multiple endpoints on a service share the same ListenUri, those endpoints must all have the same Identity in their EndpointAddress. The endpoints at ListenUri &apos;{0}&apos; do not meet this criteria..
        /// </summary>
        internal static string SFxWhenMultipleEndpointsShareAListenUriTheyMustHaveSameIdentity {
            get {
                return ResourceManager.GetString("SFxWhenMultipleEndpointsShareAListenUriTheyMustHaveSameIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrapper element name cannot be empty..
        /// </summary>
        internal static string SFxWrapperNameCannotBeEmpty {
            get {
                return ResourceManager.GetString("SFxWrapperNameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrapper type for message {0} cannot be projected as a data contract type since it has multiple namespaces. Consider using the XmlSerializer.
        /// </summary>
        internal static string SFxWrapperTypeHasMultipleNamespaces {
            get {
                return ResourceManager.GetString("SFxWrapperTypeHasMultipleNamespaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service description message &apos;{1}&apos; from target namespace &apos;{2}&apos; does not contain part named &apos;{0}&apos;..
        /// </summary>
        internal static string SFxWsdlMessageDoesNotContainPart3 {
            get {
                return ResourceManager.GetString("SFxWsdlMessageDoesNotContainPart3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl operation {0} in portType {1} contains a fault that does not reference a message. This is either because the message attribute is missing or empty..
        /// </summary>
        internal static string SFxWsdlOperationFaultNeedsMessageAttribute2 {
            get {
                return ResourceManager.GetString("SFxWsdlOperationFaultNeedsMessageAttribute2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl operation input {0} in portType {1} does not reference a message. This is either because the message attribute is missing or empty..
        /// </summary>
        internal static string SFxWsdlOperationInputNeedsMessageAttribute2 {
            get {
                return ResourceManager.GetString("SFxWsdlOperationInputNeedsMessageAttribute2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsdl operation output {0} in portType {1} does not reference a message. This is either because the message attribute is missing or empty..
        /// </summary>
        internal static string SFxWsdlOperationOutputNeedsMessageAttribute2 {
            get {
                return ResourceManager.GetString("SFxWsdlOperationOutputNeedsMessageAttribute2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WSDL part {0} in message {1} from namespace {2} must have either an element or a type name.
        /// </summary>
        internal static string SFxWsdlPartMustHaveElementOrType {
            get {
                return ResourceManager.GetString("SFxWsdlPartMustHaveElementOrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XmlArrayAttribute cannot be used in repeating part {1}:{0}..
        /// </summary>
        internal static string SFxXmlArrayNotAllowedForMultiple {
            get {
                return ResourceManager.GetString("SFxXmlArrayNotAllowedForMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service endpoint failed to listen on the URI &apos;{0}&apos; because access was denied.  Verify that the current user is granted access in the appropriate allowAccounts section of SMSvcHost.exe.config..
        /// </summary>
        internal static string SharedEndpointReadDenied {
            get {
                return ResourceManager.GetString("SharedEndpointReadDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service endpoint failed to listen on the URI &apos;{0}&apos; because the shared memory section was not found.  Verify that the &apos;{1}&apos; service is running..
        /// </summary>
        internal static string SharedEndpointReadNotFound {
            get {
                return ResourceManager.GetString("SharedEndpointReadNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to grant the PROCESS_DUP_HANDLE access right to the target service&apos;s account SID &apos;{0}&apos;..
        /// </summary>
        internal static string SharedManagerAllowDupHandleFailed {
            get {
                return ResourceManager.GetString("SharedManagerAllowDupHandleFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransportManager failed to listen on the supplied URI using the {0} service: {1}..
        /// </summary>
        internal static string SharedManagerBase {
            get {
                return ResourceManager.GetString("SharedManagerBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the URI is already registered with the service.
        /// </summary>
        internal static string SharedManagerConflictingRegistration {
            get {
                return ResourceManager.GetString("SharedManagerConflictingRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to retrieve the UserSid of the current process.
        /// </summary>
        internal static string SharedManagerCurrentUserSidLookupFailure {
            get {
                return ResourceManager.GetString("SharedManagerCurrentUserSidLookupFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to create a data connection to the service.
        /// </summary>
        internal static string SharedManagerDataConnectionCreateFailure {
            get {
                return ResourceManager.GetString("SharedManagerDataConnectionCreateFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to establish a data connection to the service.
        /// </summary>
        internal static string SharedManagerDataConnectionFailure {
            get {
                return ResourceManager.GetString("SharedManagerDataConnectionFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to establish the data connection because of an I/O error.
        /// </summary>
        internal static string SharedManagerDataConnectionPipeFailed {
            get {
                return ResourceManager.GetString("SharedManagerDataConnectionPipeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the service failed to listen.
        /// </summary>
        internal static string SharedManagerFailedToListen {
            get {
                return ResourceManager.GetString("SharedManagerFailedToListen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to retrieve the LogonSid of the service process ({0}).
        /// </summary>
        internal static string SharedManagerLogonSidLookupFailure {
            get {
                return ResourceManager.GetString("SharedManagerLogonSidLookupFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the URI is too long.
        /// </summary>
        internal static string SharedManagerPathTooLong {
            get {
                return ResourceManager.GetString("SharedManagerPathTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the protocol is not supported.
        /// </summary>
        internal static string SharedManagerProtocolUnsupported {
            get {
                return ResourceManager.GetString("SharedManagerProtocolUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the quota was exceeded.
        /// </summary>
        internal static string SharedManagerRegistrationQuotaExceeded {
            get {
                return ResourceManager.GetString("SharedManagerRegistrationQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to read the service&apos;s endpoint with native error code {0}.  See inner exception for details.
        /// </summary>
        internal static string SharedManagerServiceEndpointReadFailure {
            get {
                return ResourceManager.GetString("SharedManagerServiceEndpointReadFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to look up the service process in the SCM ({0}).
        /// </summary>
        internal static string SharedManagerServiceLookupFailure {
            get {
                return ResourceManager.GetString("SharedManagerServiceLookupFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the service failed the security checks.
        /// </summary>
        internal static string SharedManagerServiceSecurityFailed {
            get {
                return ResourceManager.GetString("SharedManagerServiceSecurityFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to look up the service SID in the SCM ({0}).
        /// </summary>
        internal static string SharedManagerServiceSidLookupFailure {
            get {
                return ResourceManager.GetString("SharedManagerServiceSidLookupFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to start the service ({0}). Refer to the Event Log for more details.
        /// </summary>
        internal static string SharedManagerServiceStartFailure {
            get {
                return ResourceManager.GetString("SharedManagerServiceStartFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to start the service because it is disabled. An administrator can enable it by running &apos;sc.exe config {0} start= demand&apos;..
        /// </summary>
        internal static string SharedManagerServiceStartFailureDisabled {
            get {
                return ResourceManager.GetString("SharedManagerServiceStartFailureDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to start the service. Refer to the Event Log for more details.
        /// </summary>
        internal static string SharedManagerServiceStartFailureNoError {
            get {
                return ResourceManager.GetString("SharedManagerServiceStartFailureNoError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed to retrieve the UserSid of the service process ({0}).
        /// </summary>
        internal static string SharedManagerUserSidLookupFailure {
            get {
                return ResourceManager.GetString("SharedManagerUserSidLookupFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the version is not supported by the service.
        /// </summary>
        internal static string SharedManagerVersionUnsupported {
            get {
                return ResourceManager.GetString("SharedManagerVersionUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be dispatched to the service at address &apos;{0}&apos;. Refer to the server Event Log for more details.
        /// </summary>
        internal static string Sharing_ConnectionDispatchFailed {
            get {
                return ResourceManager.GetString("Sharing_ConnectionDispatchFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint address for the NT service &apos;{0}&apos; read from shared memory is empty..
        /// </summary>
        internal static string Sharing_EmptyListenerEndpoint {
            get {
                return ResourceManager.GetString("Sharing_EmptyListenerEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be dispatched because the service at the endpoint address &apos;{0}&apos; is unavailable for the protocol of the address..
        /// </summary>
        internal static string Sharing_EndpointUnavailable {
            get {
                return ResourceManager.GetString("Sharing_EndpointUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be dispatched because the transport manager has been stopped.  This can happen if the application is being recycled or disabled..
        /// </summary>
        internal static string Sharing_ListenerProxyStopped {
            get {
                return ResourceManager.GetString("Sharing_ListenerProxyStopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shutdown request was not received..
        /// </summary>
        internal static string ShutdownRequestWasNotReceived {
            get {
                return ResourceManager.GetString("ShutdownRequestWasNotReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signature token &apos;{0}&apos; is not the same token as the encryption token &apos;{1}&apos;..
        /// </summary>
        internal static string SignatureAndEncryptionTokenMismatch {
            get {
                return ResourceManager.GetString("SignatureAndEncryptionTokenMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured SecurityVersion does not support signature confirmation. Use WsSecurity11 or above..
        /// </summary>
        internal static string SignatureConfirmationNotSupported {
            get {
                return ResourceManager.GetString("SignatureConfirmationNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol factory must support Request/Reply security in order to offer signature confirmation..
        /// </summary>
        internal static string SignatureConfirmationRequiresRequestReply {
            get {
                return ResourceManager.GetString("SignatureConfirmationRequiresRequestReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature confirmation is not expected in the security header..
        /// </summary>
        internal static string SignatureConfirmationsNotExpected {
            get {
                return ResourceManager.GetString("SignatureConfirmationsNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signature confirmation elements cannot occur after the primary signature..
        /// </summary>
        internal static string SignatureConfirmationsOccursAfterPrimarySignature {
            get {
                return ResourceManager.GetString("SignatureConfirmationsOccursAfterPrimarySignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature confirmation was expected to be present in the security header..
        /// </summary>
        internal static string SignatureConfirmationWasExpected {
            get {
                return ResourceManager.GetString("SignatureConfirmationWasExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A signature is not expected for this message..
        /// </summary>
        internal static string SignatureNotExpected {
            get {
                return ResourceManager.GetString("SignatureNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature verification failed..
        /// </summary>
        internal static string SignatureVerificationFailed {
            get {
                return ResourceManager.GetString("SignatureVerificationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A signed supporting token is not expected in the security header in this context..
        /// </summary>
        internal static string SignedSupportingTokenNotExpected {
            get {
                return ResourceManager.GetString("SignedSupportingTokenNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signing token {0} has no keys. The security token is used in a context that requires it to perform cryptographic operations, but the token contains no cryptographic keys. Either the token type does not support cryptographic operations, or the particular token instance does not contain cryptographic keys. Check your configuration to ensure that cryptographically disabled token types (for example, UserNameSecurityToken) are not specified in a context that requires cryptographic operations (for example, an [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SigningTokenHasNoKeys {
            get {
                return ResourceManager.GetString("SigningTokenHasNoKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The signing token {0} has no key that supports the algorithm suite {1}..
        /// </summary>
        internal static string SigningTokenHasNoKeysSupportingTheAlgorithmSuite {
            get {
                return ResourceManager.GetString("SigningTokenHasNoKeysSupportingTheAlgorithmSuite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signing without primary signature requires timestamp..
        /// </summary>
        internal static string SigningWithoutPrimarySignatureRequiresTimestamp {
            get {
                return ResourceManager.GetString("SigningWithoutPrimarySignatureRequiresTimestamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DeliveryRequirementsAttribute on contract &apos;{0}&apos; specifies that the binding must support ordered delivery (RequireOrderedDelivery).  This condition could not be verified because the configured binding does not implement IBindingDeliveryCapabilities.  The DeliveryRequirementsAttribute may only be used with bindings that implement the IBindingDeliveryCapabilities interface..
        /// </summary>
        internal static string SinceTheBindingForDoesnTSupportIBindingCapabilities1_1 {
            get {
                return ResourceManager.GetString("SinceTheBindingForDoesnTSupportIBindingCapabilities1_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DeliveryRequirementsAttribute on contract &apos;{0}&apos; specifies a QueuedDeliveryRequirements constraint.  This condition could not be verified because the configured binding does not implement IBindingDeliveryCapabilities.  The DeliveryRequirementsAttribute may only be used with bindings that implement the IBindingDeliveryCapabilities interface..
        /// </summary>
        internal static string SinceTheBindingForDoesnTSupportIBindingCapabilities2_1 {
            get {
                return ResourceManager.GetString("SinceTheBindingForDoesnTSupportIBindingCapabilities2_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A single WSDL document could not be generated for this service. Multiple service contract namespaces were found ({0}). Ensure that all your service contracts have the same namespace..
        /// </summary>
        internal static string SingleWsdlNotGenerated {
            get {
                return ResourceManager.GetString("SingleWsdlNotGenerated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified size exceeds the remaining buffer space ({0} bytes)..
        /// </summary>
        internal static string SizeExceedsRemainingBufferSpace {
            get {
                return ResourceManager.GetString("SizeExceedsRemainingBufferSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint specified a last message number that is smaller than a sequence number that has already been seen. The reliable session is in an inconsistent state since it cannot determine the actual last message. The reliable session was faulted..
        /// </summary>
        internal static string SmallLastMsgNumberExceptionString {
            get {
                return ResourceManager.GetString("SmallLastMsgNumberExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soap11 ({0}).
        /// </summary>
        internal static string Soap11ToStringFormat {
            get {
                return ResourceManager.GetString("Soap11ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soap12 ({0}).
        /// </summary>
        internal static string Soap12ToStringFormat {
            get {
                return ResourceManager.GetString("Soap12ToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SOAP security negotiation failed. See inner exception for more details..
        /// </summary>
        internal static string SoapSecurityNegotiationFailed {
            get {
                return ResourceManager.GetString("SoapSecurityNegotiationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SOAP security negotiation with &apos;{0}&apos; for target &apos;{1}&apos; failed. See inner exception for more details..
        /// </summary>
        internal static string SoapSecurityNegotiationFailedForIssuerAndTarget {
            get {
                return ResourceManager.GetString("SoapSecurityNegotiationFailedForIssuerAndTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket was aborted because an asynchronous receive from the socket did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SocketAbortedReceiveTimedOut {
            get {
                return ResourceManager.GetString("SocketAbortedReceiveTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection was aborted because an asynchronous send to the socket did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SocketAbortedSendTimedOut {
            get {
                return ResourceManager.GetString("SocketAbortedSendTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A graceful close was attempted on the socket, but the other side ({0}) is still sending data..
        /// </summary>
        internal static string SocketCloseReadReceivedData {
            get {
                return ResourceManager.GetString("SocketCloseReadReceivedData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint of the socket ({0}) did not respond to a close request within the allotted timeout ({1}). It is likely that the remote endpoint is not calling Close after receiving the EOF signal (null) from Receive. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string SocketCloseReadTimeout {
            get {
                return ResourceManager.GetString("SocketCloseReadTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection has been disposed..
        /// </summary>
        internal static string SocketConnectionDisposed {
            get {
                return ResourceManager.GetString("SocketConnectionDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket listener has been disposed..
        /// </summary>
        internal static string SocketListenerDisposed {
            get {
                return ResourceManager.GetString("SocketListenerDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket listener is not listening..
        /// </summary>
        internal static string SocketListenerNotListening {
            get {
                return ResourceManager.GetString("SocketListenerNotListening", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming transaction cannot be unmarshaled because the source MSDTC transaction manager has either disabled outbound transactions or disabled its WS-AtomicTransaction protocol service..
        /// </summary>
        internal static string SourceTransactionsDisabled {
            get {
                return ResourceManager.GetString("SourceTransactionsDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The space needed for encoding ({0} bytes) exceeds the message frame offset..
        /// </summary>
        internal static string SpaceNeededExceedsMessageFrameOffset {
            get {
                return ResourceManager.GetString("SpaceNeededExceedsMessageFrameOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Security Support Provider Interface does not support Impersonation level &apos;None&apos;. Specify Identification, Impersonation or Delegation level..
        /// </summary>
        internal static string SpnegoImpersonationLevelCannotBeSetToNone {
            get {
                return ResourceManager.GetString("SpnegoImpersonationLevelCannotBeSetToNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is likely that certificate &apos;{0}&apos; may not have a private key that is capable of key exchange or the process may not have access rights for the private key. Please see inner exception for detail..
        /// </summary>
        internal static string SslCertMayNotDoKeyExchange {
            get {
                return ResourceManager.GetString("SslCertMayNotDoKeyExchange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate &apos;{0}&apos; must have a private key. The process must have access rights for the private key..
        /// </summary>
        internal static string SslCertMustHavePrivateKey {
            get {
                return ResourceManager.GetString("SslCertMustHavePrivateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cipher key negotiated by SSL is too small (&apos;{0}&apos; bits). Keys of such lengths are not allowed as they may result in information disclosure. Please configure the initiator machine to negotiate SSL cipher keys that are &apos;{1}&apos; bits or longer..
        /// </summary>
        internal static string SslCipherKeyTooSmall {
            get {
                return ResourceManager.GetString("SslCipherKeyTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either the client credential was invalid or there was an error collecting the client credentials by the SSPI..
        /// </summary>
        internal static string SspiErrorOrInvalidClientCredentials {
            get {
                return ResourceManager.GetString("SspiErrorOrInvalidClientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecuritySessionServerSettings.CreateAcceptor, channelAcceptor must be null, can not create twice..
        /// </summary>
        internal static string SSSSCreateAcceptor {
            get {
                return ResourceManager.GetString("SSSSCreateAcceptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token Serializer cannot serialize &apos;{0}&apos;.  If this is a custom type you must supply a custom serializer..
        /// </summary>
        internal static string StandardsManagerCannotWriteObject {
            get {
                return ResourceManager.GetString("StandardsManagerCannotWriteObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Standards manager of filter does not match that of filter table.  Can not have two different filters..
        /// </summary>
        internal static string StandardsManagerDoesNotMatch {
            get {
                return ResourceManager.GetString("StandardsManagerDoesNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be completed because the stream is closed..
        /// </summary>
        internal static string StreamClosed {
            get {
                return ResourceManager.GetString("StreamClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeoutStream requires an inner Stream that supports timeouts; its CanTimeout property must be true..
        /// </summary>
        internal static string StreamDoesNotSupportTimeout {
            get {
                return ResourceManager.GetString("StreamDoesNotSupportTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while transmitting data..
        /// </summary>
        internal static string StreamError {
            get {
                return ResourceManager.GetString("StreamError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote server did not satisfy the mutual authentication requirement..
        /// </summary>
        internal static string StreamMutualAuthNotSatisfied {
            get {
                return ResourceManager.GetString("StreamMutualAuthNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The StreamUpgradeProvider {0} does not support the specified ChannelBindingKind ({1}). .
        /// </summary>
        internal static string StreamUpgradeUnsupportedChannelBindingKind {
            get {
                return ResourceManager.GetString("StreamUpgradeUnsupportedChannelBindingKind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address of the security token issuer is not specified. An explicit issuer address must be specified in the binding for target &apos;{0}&apos; or the local issuer address must be configured in the credentials..
        /// </summary>
        internal static string StsAddressNotSet {
            get {
                return ResourceManager.GetString("StsAddressNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding to use to communicate to the federation service at &apos;{0}&apos; is not specified..
        /// </summary>
        internal static string StsBindingNotSet {
            get {
                return ResourceManager.GetString("StsBindingNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The algorithm &apos;{0}&apos; is not accepted for operation &apos;{1}&apos; by algorithm suite {2}..
        /// </summary>
        internal static string SuiteDoesNotAcceptAlgorithm {
            get {
                return ResourceManager.GetString("SuiteDoesNotAcceptAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reply message was received without a valid RelatesTo header.  This may have been caused by a missing RelatesTo header or a RelatesTo header with an invalid WS-Addressing Relationship type..
        /// </summary>
        internal static string SuppliedMessageIsNotAReplyItHasNoRelatesTo0 {
            get {
                return ResourceManager.GetString("SuppliedMessageIsNotAReplyItHasNoRelatesTo0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; addressing mode is not supported..
        /// </summary>
        internal static string SupportedAddressingModeNotSupported {
            get {
                return ResourceManager.GetString("SupportedAddressingModeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supporting signature is not signed with a derived key. The binding&apos;s supporting token parameter &apos;{0}&apos; requires key derivation..
        /// </summary>
        internal static string SupportingSignatureIsNotDerivedFrom {
            get {
                return ResourceManager.GetString("SupportingSignatureIsNotDerivedFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supporting token provided for parameters &apos;{0}&apos; was not encrypted..
        /// </summary>
        internal static string SupportingTokenIsNotEncrypted {
            get {
                return ResourceManager.GetString("SupportingTokenIsNotEncrypted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supporting token provided for parameters &apos;{0}&apos; did not endorse the primary signature..
        /// </summary>
        internal static string SupportingTokenIsNotEndorsing {
            get {
                return ResourceManager.GetString("SupportingTokenIsNotEndorsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supporting token provided for parameters &apos;{0}&apos; was not signed as part of the primary signature..
        /// </summary>
        internal static string SupportingTokenIsNotSigned {
            get {
                return ResourceManager.GetString("SupportingTokenIsNotSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A supporting token that satisfies parameters &apos;{0}&apos; and attachment mode &apos;{1}&apos; was not provided..
        /// </summary>
        internal static string SupportingTokenNotProvided {
            get {
                return ResourceManager.GetString("SupportingTokenNotProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supporting token signatures not expected..
        /// </summary>
        internal static string SupportingTokenSignaturesNotExpected {
            get {
                return ResourceManager.GetString("SupportingTokenSignaturesNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SymmetricSecurityBindingElement cannot build a channel or listener factory. The ProtectionTokenParameters property is required but not set. Binding element configuration: {0}.
        /// </summary>
        internal static string SymmetricSecurityBindingElementNeedsProtectionTokenParameters {
            get {
                return ResourceManager.GetString("SymmetricSecurityBindingElementNeedsProtectionTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, any additional attributes must be declared on the synchronous OperationContract method. In this case, the asynchronous OperationContract method &apos;{2}&apos; has one or more attributes of type &apos;{5}&apos;. To fix it, remove the &apos;{5} [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_Attributes6 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_Attributes6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same number and types of parameters. In this case, some of the arguments are different. To fix it, ensure that the OperationContracts define the same number and types of argum [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_Parameters5 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_Parameters5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract  methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must have the same value for the &apos;{5}&apos; property. In this case, the values are different. To fix it, change the &apos;{5} property of one of the OperationContracts to match the other. Alternativel [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_Property6 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_Property6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same return type. In this case, the return types are different. To fix it, ensure that method &apos;{0}&apos; and method &apos;{3}&apos; have the same return type. Alternatively, changing the nam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncAsyncMatchConsistency_ReturnType5 {
            get {
                return ResourceManager.GetString("SyncAsyncMatchConsistency_ReturnType5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be added to the generic collection, because the collection has been parameterized with a different type..
        /// </summary>
        internal static string SynchronizedCollectionWrongType1 {
            get {
                return ResourceManager.GetString("SynchronizedCollectionWrongType1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null value cannot be added to the generic collection, because the collection has been parameterized with a value type..
        /// </summary>
        internal static string SynchronizedCollectionWrongTypeNull {
            get {
                return ResourceManager.GetString("SynchronizedCollectionWrongTypeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, any additional attributes must be declared on the synchronous OperationContract method. In this case, the task-based asynchronous OperationContract method &apos;{2}&apos; has one or more attributes of type &apos;{4}&apos;. To fix it, re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_Attributes6 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_Attributes6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, the two OperationContracts must define the same number and types of parameters. In this case, some of the arguments are different. To fix it, ensure that the OperationContracts define the same number and types of arg [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_Parameters5 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_Parameters5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract  method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, the two OperationContracts must have the same value for the &apos;{4}&apos; property. In this case, the values are different. To fix it, change the &apos;{4} property of one of the OperationContracts to match the other. Alternativ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_Property6 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_Property6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The synchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the task-based asynchronous OperationContract method &apos;{2}&apos; because they have the same operation name &apos;{3}&apos;. When a synchronous OperationContract method is matched to a task-based asynchronous OperationContract method, the two OperationContracts must define the same return type. In this case, the return types are different. To fix it, ensure that method &apos;{0}&apos; and method &apos;{2}&apos; have the same return type. Alternatively, changing the n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SyncTaskMatchConsistency_ReturnType5 {
            get {
                return ResourceManager.GetString("SyncTaskMatchConsistency_ReturnType5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target service address was not specified on &apos;{0}&apos;..
        /// </summary>
        internal static string TargetAddressIsNotSet {
            get {
                return ResourceManager.GetString("TargetAddressIsNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target object does not support IPersistStream..
        /// </summary>
        internal static string TargetObjectDoesNotSupportIPersistStream {
            get {
                return ResourceManager.GetString("TargetObjectDoesNotSupportIPersistStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target type is an interface but corresponding type is not PersistStreamTypeWrapper..
        /// </summary>
        internal static string TargetTypeIsAnIntefaceButCorrespoindingTypeIsNotPersistStreamTypeWrapper {
            get {
                return ResourceManager.GetString("TargetTypeIsAnIntefaceButCorrespoindingTypeIsNotPersistStreamTypeWrapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a task-based asynchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, any additional attributes must be declared on the task-based asynchronous OperationContract method. In this case, the asynchronous OperationContract method &apos;{2}&apos; has one or more attributes of ty [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_Attributes6 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_Attributes6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a task-based asynchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same number and types of parameters. In this case, some of the arguments are different. To fix it, ensure that the OperationContracts define the same n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_Parameters5 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_Parameters5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract  methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a task-based asynchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must have the same value for the &apos;{5}&apos; property. In this case, the values are different. To fix it, change the &apos;{5} property of one of the OperationContracts to match [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_Property6 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_Property6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task-based asynchronous OperationContract method &apos;{0}&apos; in type &apos;{1}&apos; was matched with the asynchronous OperationContract methods &apos;{2}&apos; and &apos;{3}&apos; because they have the same operation name &apos;{4}&apos;. When a synchronous OperationContract method is matched to a pair of asynchronous OperationContract methods, the two OperationContracts must define the same return type. In this case, the return types are different. To fix it, ensure that method &apos;{0}&apos; and method &apos;{3}&apos; have the same return type. Alternatively, chan [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TaskAsyncMatchConsistency_ReturnType5 {
            get {
                return ResourceManager.GetString("TaskAsyncMatchConsistency_ReturnType5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task was cancelled..
        /// </summary>
        internal static string TaskCancelledError {
            get {
                return ResourceManager.GetString("TaskCancelledError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client side task-based asynchronous method must not have any out or ref parameters. Any data that would have been returned through an out or ref parameter should instead be returned as part of the TResult in the resulting task..
        /// </summary>
        internal static string TaskMethodMustNotHaveOutParameter {
            get {
                return ResourceManager.GetString("TaskMethodMustNotHaveOutParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The use of &apos;{0}&apos; on the task-based asynchronous method is not supported..
        /// </summary>
        internal static string TaskMethodParameterNotSupported {
            get {
                return ResourceManager.GetString("TaskMethodParameterNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a listener on IP endpoint {0}. This could happen if there is another application already listening on this endpoint or if you have multiple service endpoints in your service host with the same IP endpoint but with incompatible binding configurations..
        /// </summary>
        internal static string TcpAddressInUse {
            get {
                return ResourceManager.GetString("TcpAddressInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not connect to {0}. TCP error code {1}: {2}. .
        /// </summary>
        internal static string TcpConnectError {
            get {
                return ResourceManager.GetString("TcpConnectError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not connect to {0}. The connection attempt lasted for a time span of {3}. TCP error code {1}: {2}. .
        /// </summary>
        internal static string TcpConnectErrorWithTimeSpan {
            get {
                return ResourceManager.GetString("TcpConnectErrorWithTimeSpan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connecting to via {0} timed out after {1}. Connection attempts were made to {2} of {3} available addresses ({4}). Check the RemoteAddress of your channel and verify that the DNS records for this endpoint correspond to valid IP Addresses. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TcpConnectingToViaTimedOut {
            get {
                return ResourceManager.GetString("TcpConnectingToViaTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection was aborted. This could be caused by an error processing your message or a receive timeout being exceeded by the remote host, or an underlying network resource issue. Local socket timeout was &apos;{0}&apos;..
        /// </summary>
        internal static string TcpConnectionResetError {
            get {
                return ResourceManager.GetString("TcpConnectionResetError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection was aborted. This could be caused by an error processing your message or a receive timeout being exceeded by the remote host, or an underlying network resource issue. Local socket timeout was &apos;{0}&apos;. The local IP address and port is {1}. The remote IP address and port is {2}..
        /// </summary>
        internal static string TcpConnectionResetErrorWithIP {
            get {
                return ResourceManager.GetString("TcpConnectionResetErrorWithIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket transfer timed out after {0}. You have exceeded the timeout set on your binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TcpConnectionTimedOut {
            get {
                return ResourceManager.GetString("TcpConnectionTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket transfer timed out after {0}. You have exceeded the timeout set on your binding. The time allotted to this operation may have been a portion of a longer timeout. The local IP address and port is {1}. The remote IP address and port is {2}..
        /// </summary>
        internal static string TcpConnectionTimedOutWithIP {
            get {
                return ResourceManager.GetString("TcpConnectionTimedOutWithIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient winsock resources available to complete socket connection initiation..
        /// </summary>
        internal static string TcpConnectNoBufs {
            get {
                return ResourceManager.GetString("TcpConnectNoBufs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TCP error ({0}: {1}) occurred while listening on IP Endpoint={2}..
        /// </summary>
        internal static string TcpListenError {
            get {
                return ResourceManager.GetString("TcpListenError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket connection was aborted by your local machine. This could be caused by a channel Abort(), or a transmission error from another thread using this socket..
        /// </summary>
        internal static string TcpLocalConnectionAborted {
            get {
                return ResourceManager.GetString("TcpLocalConnectionAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TCP error ({0}: {1}) occurred while transmitting data..
        /// </summary>
        internal static string TcpTransferError {
            get {
                return ResourceManager.GetString("TcpTransferError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TCP error ({0}: {1}) occurred while transmitting data. The local IP address and port is {2}. The remote IP address and port is {3}..
        /// </summary>
        internal static string TcpTransferErrorWithIP {
            get {
                return ResourceManager.GetString("TcpTransferErrorWithIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IPv4 address was specified ({0}), but IPv4 is not enabled on this machine. .
        /// </summary>
        internal static string TcpV4AddressInvalid {
            get {
                return ResourceManager.GetString("TcpV4AddressInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IPv6 address was specified ({0}), but IPv6 is not enabled on this machine. .
        /// </summary>
        internal static string TcpV6AddressInvalid {
            get {
                return ResourceManager.GetString("TcpV6AddressInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory {0} not found..
        /// </summary>
        internal static string TempDirectoryNotFound {
            get {
                return ResourceManager.GetString("TempDirectoryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DeliveryRequirementsAttribute on contract &apos;{0}&apos; specifies a QueuedDeliveryRequirements value of NotAllowed.  However, the configured binding for this contract specifies that it does support queued delivery.  A queued binding may not be used with this contract..
        /// </summary>
        internal static string TheBindingForDoesnTSupportOrderedDelivery1 {
            get {
                return ResourceManager.GetString("TheBindingForDoesnTSupportOrderedDelivery1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceMetadataExtension instance could not be added to the ServiceHost instance because it has already been added to another ServiceHost instance..
        /// </summary>
        internal static string TheServiceMetadataExtensionInstanceCouldNot2_0 {
            get {
                return ResourceManager.GetString("TheServiceMetadataExtensionInstanceCouldNot2_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceMetadataExtension instance could not be removed from the ServiceHost instance because it has not been added to any ServiceHost instance..
        /// </summary>
        internal static string TheServiceMetadataExtensionInstanceCouldNot3_0 {
            get {
                return ResourceManager.GetString("TheServiceMetadataExtensionInstanceCouldNot3_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceMetadataExtension instance could not be removed from the ServiceHost instance because it has already been added to a different ServiceHost instance..
        /// </summary>
        internal static string TheServiceMetadataExtensionInstanceCouldNot4_0 {
            get {
                return ResourceManager.GetString("TheServiceMetadataExtensionInstanceCouldNot4_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message could not be transferred within the allotted timeout of {0}. There was no space available in the reliable channel&apos;s transfer window. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnAddToWindow {
            get {
                return ResourceManager.GetString("TimeoutOnAddToWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The close operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnClose {
            get {
                return ResourceManager.GetString("TimeoutOnClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The open operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnOpen {
            get {
                return ResourceManager.GetString("TimeoutOnOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnOperation {
            get {
                return ResourceManager.GetString("TimeoutOnOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnRequest {
            get {
                return ResourceManager.GetString("TimeoutOnRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The send operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnSend {
            get {
                return ResourceManager.GetString("TimeoutOnSend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opening the channel timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutServiceChannelConcurrentOpen1 {
            get {
                return ResourceManager.GetString("TimeoutServiceChannelConcurrentOpen1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opening the {0} channel timed out after {1}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutServiceChannelConcurrentOpen2 {
            get {
                return ResourceManager.GetString("TimeoutServiceChannelConcurrentOpen2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeSpan cannot be less than TimeSpan.Zero..
        /// </summary>
        internal static string TimeSpanCannotBeLessThanTimeSpanZero {
            get {
                return ResourceManager.GetString("TimeSpanCannotBeLessThanTimeSpanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimeSpan must be greater than TimeSpan.Zero..
        /// </summary>
        internal static string TimeSpanMustbeGreaterThanTimeSpanZero {
            get {
                return ResourceManager.GetString("TimeSpanMustbeGreaterThanTimeSpanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A timestamp element has already been set for this security header..
        /// </summary>
        internal static string TimestampAlreadySetForSecurityHeader {
            get {
                return ResourceManager.GetString("TimestampAlreadySetForSecurityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is invalid because its creation time (&apos;{0}&apos;) is greater than or equal to its expiration time (&apos;{1}&apos;)..
        /// </summary>
        internal static string TimeStampHasCreationAheadOfExpiry {
            get {
                return ResourceManager.GetString("TimeStampHasCreationAheadOfExpiry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is invalid because its creation time (&apos;{0}&apos;) is in the future. Current time is &apos;{1}&apos; and allowed clock skew is &apos;{2}&apos;..
        /// </summary>
        internal static string TimeStampHasCreationTimeInFuture {
            get {
                return ResourceManager.GetString("TimeStampHasCreationTimeInFuture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is stale because its expiration time (&apos;{0}&apos;) is in the past. Current time is &apos;{1}&apos; and allowed clock skew is &apos;{2}&apos;..
        /// </summary>
        internal static string TimeStampHasExpiryTimeInPast {
            get {
                return ResourceManager.GetString("TimeStampHasExpiryTimeInPast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timestamp must occur first in this security header layout..
        /// </summary>
        internal static string TimestampMustOccurFirstInSecurityHeaderLayout {
            get {
                return ResourceManager.GetString("TimestampMustOccurFirstInSecurityHeaderLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timestamp must occur last in this security header layout..
        /// </summary>
        internal static string TimestampMustOccurLastInSecurityHeaderLayout {
            get {
                return ResourceManager.GetString("TimestampMustOccurLastInSecurityHeaderLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timestamp element added to security header to sign has no id..
        /// </summary>
        internal static string TimestampToSignHasNoId {
            get {
                return ResourceManager.GetString("TimestampToSignHasNoId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security timestamp is stale because its creation time (&apos;{0}&apos;) is too far back in the past. Current time is &apos;{1}&apos;, maximum timestamp lifetime is &apos;{2}&apos; and allowed clock skew is &apos;{3}&apos;..
        /// </summary>
        internal static string TimeStampWasCreatedTooLongAgo {
            get {
                return ResourceManager.GetString("TimeStampWasCreatedTooLongAgo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred communicating with the distributed transaction manager..
        /// </summary>
        internal static string TMCommunicationError {
            get {
                return ResourceManager.GetString("TMCommunicationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token manager requires the security binding element to be specified in order to create a token authenticator for requirement &apos;{0}&apos;..
        /// </summary>
        internal static string TokenAuthenticatorRequiresSecurityBindingElement {
            get {
                return ResourceManager.GetString("TokenAuthenticatorRequiresSecurityBindingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A symmetric crypto could not be created from token &apos;{0}&apos;..
        /// </summary>
        internal static string TokenCannotCreateSymmetricCrypto {
            get {
                return ResourceManager.GetString("TokenCannotCreateSymmetricCrypto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key size requirements for the &apos;{0}&apos; algorithm suite are not met by the &apos;{1}&apos; token which has key size of &apos;{2}&apos;..
        /// </summary>
        internal static string TokenDoesNotMeetKeySizeRequirements {
            get {
                return ResourceManager.GetString("TokenDoesNotMeetKeySizeRequirements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not support &apos;{1}&apos; creation..
        /// </summary>
        internal static string TokenDoesNotSupportKeyIdentifierClauseCreation {
            get {
                return ResourceManager.GetString("TokenDoesNotSupportKeyIdentifierClauseCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied token manager cannot create a token reference..
        /// </summary>
        internal static string TokenManagerCannotCreateTokenReference {
            get {
                return ResourceManager.GetString("TokenManagerCannotCreateTokenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security token manager could not parse token with name &apos;{0}&apos;, namespace &apos;{1}&apos;, valueType &apos;{2}&apos;..
        /// </summary>
        internal static string TokenManagerCouldNotReadToken {
            get {
                return ResourceManager.GetString("TokenManagerCouldNotReadToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityTokenParameters and SecurityToken tuple specified for use in the security header must both be null or must both be non-null..
        /// </summary>
        internal static string TokenMustBeNullWhenTokenParametersAre {
            get {
                return ResourceManager.GetString("TokenMustBeNullWhenTokenParametersAre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received security header contains unexpected token &apos;{0}&apos;..
        /// </summary>
        internal static string TokenNotExpectedInSecurityHeader {
            get {
                return ResourceManager.GetString("TokenNotExpectedInSecurityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token provider cannot get tokens for target &apos;{0}&apos;..
        /// </summary>
        internal static string TokenProviderCannotGetTokensForTarget {
            get {
                return ResourceManager.GetString("TokenProviderCannotGetTokensForTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token manager requires the security binding element to be specified in order to create a token provider for requirement &apos;{0}&apos;..
        /// </summary>
        internal static string TokenProviderRequiresSecurityBindingElement {
            get {
                return ResourceManager.GetString("TokenProviderRequiresSecurityBindingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TokenProvider returned token of incorrect type &apos;{0}&apos;..
        /// </summary>
        internal static string TokenProviderReturnedBadToken {
            get {
                return ResourceManager.GetString("TokenProviderReturnedBadToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token requirement &apos;{0}&apos; does not specify the target address. This is required by the token manager for creating the corresponding security token provider..
        /// </summary>
        internal static string TokenRequirementDoesNotSpecifyTargetAddress {
            get {
                return ResourceManager.GetString("TokenRequirementDoesNotSpecifyTargetAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security token serializer must be specified on the security token provider..
        /// </summary>
        internal static string TokenSerializerNotSetonFederationProvider {
            get {
                return ResourceManager.GetString("TokenSerializerNotSetonFederationProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed after the communications channel has been created..
        /// </summary>
        internal static string TooLate {
            get {
                return ResourceManager.GetString("TooLate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many attributes of type {0} on {1}..
        /// </summary>
        internal static string tooManyAttributesOfTypeOn2 {
            get {
                return ResourceManager.GetString("tooManyAttributesOfTypeOn2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A leg of the federated security chain contains multiple IssuedSecurityTokenParameters. The InfoCard system only supports one IssuedSecurityTokenParameters for each leg..
        /// </summary>
        internal static string TooManyIssuedSecurityTokenParameters {
            get {
                return ResourceManager.GetString("TooManyIssuedSecurityTokenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are too many renewed session keys that have not been used..
        /// </summary>
        internal static string TooManyPendingSessionKeys {
            get {
                return ResourceManager.GetString("TooManyPendingSessionKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authorize.
        /// </summary>
        internal static string TraceAuthorize {
            get {
                return ResourceManager.GetString("TraceAuthorize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activating message received..
        /// </summary>
        internal static string TraceCodeActivatingMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodeActivatingMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An async callback threw an exception!.
        /// </summary>
        internal static string TraceCodeAsyncCallbackThrewException {
            get {
                return ResourceManager.GetString("TraceCodeAsyncCallbackThrewException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Begin method execution..
        /// </summary>
        internal static string TraceCodeBeginExecuteMethod {
            get {
                return ResourceManager.GetString("TraceCodeBeginExecuteMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given schema cannot be imported in this format..
        /// </summary>
        internal static string TraceCodeCannotBeImportedInCurrentFormat {
            get {
                return ResourceManager.GetString("TraceCodeCannotBeImportedInCurrentFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channel connection was dropped.
        /// </summary>
        internal static string TraceCodeChannelConnectionDropped {
            get {
                return ResourceManager.GetString("TraceCodeChannelConnectionDropped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Created: {0}.
        /// </summary>
        internal static string TraceCodeChannelCreated {
            get {
                return ResourceManager.GetString("TraceCodeChannelCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposed: {0}.
        /// </summary>
        internal static string TraceCodeChannelDisposed {
            get {
                return ResourceManager.GetString("TraceCodeChannelDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sent a message over a channel.
        /// </summary>
        internal static string TraceCodeChannelMessageSent {
            get {
                return ResourceManager.GetString("TraceCodeChannelMessageSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prepared message for sending over a channel.
        /// </summary>
        internal static string TraceCodeChannelPreparedMessage {
            get {
                return ResourceManager.GetString("TraceCodeChannelPreparedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:channel created..
        /// </summary>
        internal static string TraceCodeComIntegrationChannelCreated {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationChannelCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Dispatch method details..
        /// </summary>
        internal static string TraceCodeComIntegrationDispatchMethod {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationDispatchMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:DllHost initializer:Adding host..
        /// </summary>
        internal static string TraceCodeComIntegrationDllHostInitializerAddingHost {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationDllHostInitializerAddingHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Started DllHost initializer..
        /// </summary>
        internal static string TraceCodeComIntegrationDllHostInitializerStarted {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationDllHostInitializerStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Starting DllHost initializer..
        /// </summary>
        internal static string TraceCodeComIntegrationDllHostInitializerStarting {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationDllHostInitializerStarting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Stopped DllHost initializer..
        /// </summary>
        internal static string TraceCodeComIntegrationDllHostInitializerStopped {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationDllHostInitializerStopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Stopping DllHost initializer..
        /// </summary>
        internal static string TraceCodeComIntegrationDllHostInitializerStopping {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationDllHostInitializerStopping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Entering COM+ activity..
        /// </summary>
        internal static string TraceCodeComIntegrationEnteringActivity {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationEnteringActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Executing COM call..
        /// </summary>
        internal static string TraceCodeComIntegrationExecutingCall {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationExecutingCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Received instance creation request..
        /// </summary>
        internal static string TraceCodeComIntegrationInstanceCreationRequest {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationInstanceCreationRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Created instance..
        /// </summary>
        internal static string TraceCodeComIntegrationInstanceCreationSuccess {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationInstanceCreationSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Released instance..
        /// </summary>
        internal static string TraceCodeComIntegrationInstanceReleased {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationInstanceReleased", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Invoked method..
        /// </summary>
        internal static string TraceCodeComIntegrationInvokedMethod {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationInvokedMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Invoking method..
        /// </summary>
        internal static string TraceCodeComIntegrationInvokingMethod {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationInvokingMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complus:Invoking method with transaction in COM+ context..
        /// </summary>
        internal static string TraceCodeComIntegrationInvokingMethodContextTransaction {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationInvokingMethodContextTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complus:Invoking method with new incoming transaction..
        /// </summary>
        internal static string TraceCodeComIntegrationInvokingMethodNewTransaction {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationInvokingMethodNewTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Left COM+ activity..
        /// </summary>
        internal static string TraceCodeComIntegrationLeftActivity {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationLeftActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complus:Mex channel loader loaded..
        /// </summary>
        internal static string TraceCodeComIntegrationMexChannelBuilderLoaded {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationMexChannelBuilderLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complus:Metadata exchange completed successfully..
        /// </summary>
        internal static string TraceCodeComIntegrationMexMonikerMetadataExchangeComplete {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationMexMonikerMetadataExchangeComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Created service contract..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceHostCreatedServiceContract {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceHostCreatedServiceContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Created service endpoint..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceHostCreatedServiceEndpoint {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceHostCreatedServiceEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Started service..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceHostStartedService {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceHostStartedService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Started service:details..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceHostStartedServiceDetails {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceHostStartedServiceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Starting service..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceHostStartingService {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceHostStartingService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Stopped service..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceHostStoppedService {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceHostStoppedService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Stopping service..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceHostStoppingService {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceHostStoppingService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Service moniker parsed..
        /// </summary>
        internal static string TraceCodeComIntegrationServiceMonikerParsed {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationServiceMonikerParsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Type library converter event..
        /// </summary>
        internal static string TraceCodeComIntegrationTLBImportConverterEvent {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTLBImportConverterEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Finished type library import..
        /// </summary>
        internal static string TraceCodeComIntegrationTLBImportFinished {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTLBImportFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Type library import: using assembly..
        /// </summary>
        internal static string TraceCodeComIntegrationTLBImportFromAssembly {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTLBImportFromAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Type library import: using type library..
        /// </summary>
        internal static string TraceCodeComIntegrationTLBImportFromTypelib {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTLBImportFromTypelib", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Starting type library import..
        /// </summary>
        internal static string TraceCodeComIntegrationTLBImportStarting {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTLBImportStarting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Transaction aborted by COM+ context..
        /// </summary>
        internal static string TraceCodeComIntegrationTxProxyTxAbortedByContext {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTxProxyTxAbortedByContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Transaction aborted by Transaction Manager..
        /// </summary>
        internal static string TraceCodeComIntegrationTxProxyTxAbortedByTM {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTxProxyTxAbortedByTM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Transaction committed..
        /// </summary>
        internal static string TraceCodeComIntegrationTxProxyTxCommitted {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTxProxyTxCommitted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:Typed channel builder loaded..
        /// </summary>
        internal static string TraceCodeComIntegrationTypedChannelBuilderLoaded {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationTypedChannelBuilderLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ComPlus:WSDL channel builder loaded..
        /// </summary>
        internal static string TraceCodeComIntegrationWsdlChannelBuilderLoaded {
            get {
                return ResourceManager.GetString("TraceCodeComIntegrationWsdlChannelBuilderLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aborted &apos;{0}&apos;..
        /// </summary>
        internal static string TraceCodeCommunicationObjectAborted {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to abort {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectAbortFailed {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectAbortFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closed {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectClosed {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to close {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectCloseFailed {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectCloseFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closing {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectClosing {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectClosing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Created {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectCreated {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposing {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectDisposing {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectDisposing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Faulted {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectFaulted {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CommunicationObject faulted due to exception..
        /// </summary>
        internal static string TraceCodeCommunicationObjectFaultReason {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opened {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectOpened {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to open {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectOpenFailed {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectOpenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opening {0}.
        /// </summary>
        internal static string TraceCodeCommunicationObjectOpening {
            get {
                return ResourceManager.GetString("TraceCodeCommunicationObjectOpening", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration is read-only..
        /// </summary>
        internal static string TraceCodeConfigurationIsReadOnly {
            get {
                return ResourceManager.GetString("TraceCodeConfigurationIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension type is not configured..
        /// </summary>
        internal static string TraceCodeConfiguredExtensionTypeNotFound {
            get {
                return ResourceManager.GetString("TraceCodeConfiguredExtensionTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection has been abandoned..
        /// </summary>
        internal static string TraceCodeConnectionAbandoned {
            get {
                return ResourceManager.GetString("TraceCodeConnectionAbandoned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occurred while closing the connections in this connection pool..
        /// </summary>
        internal static string TraceCodeConnectionPoolCloseException {
            get {
                return ResourceManager.GetString("TraceCodeConnectionPoolCloseException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection has exceeded the idle timeout of this connection pool ({0}) and been closed..
        /// </summary>
        internal static string TraceCodeConnectionPoolIdleTimeoutReached {
            get {
                return ResourceManager.GetString("TraceCodeConnectionPoolIdleTimeoutReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection has exceeded the connection lease timeout of this connection pool ({0}) and been closed..
        /// </summary>
        internal static string TraceCodeConnectionPoolLeaseTimeoutReached {
            get {
                return ResourceManager.GetString("TraceCodeConnectionPoolLeaseTimeoutReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MaxOutboundConnectionsPerEndpoint quota ({0}) has been reached, so connection was closed and not stored in this connection pool..
        /// </summary>
        internal static string TraceCodeConnectionPoolMaxOutboundConnectionsPerEndpointQuotaReached {
            get {
                return ResourceManager.GetString("TraceCodeConnectionPoolMaxOutboundConnectionsPerEndpointQuotaReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection information..
        /// </summary>
        internal static string TraceCodeConnectToIPEndpoint {
            get {
                return ResourceManager.GetString("TraceCodeConnectToIPEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContextChannel created..
        /// </summary>
        internal static string TraceCodeContextChannelFactoryChannelCreated {
            get {
                return ResourceManager.GetString("TraceCodeContextChannelFactoryChannelCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new ContextChannel was accepted..
        /// </summary>
        internal static string TraceCodeContextChannelListenerChannelAccepted {
            get {
                return ResourceManager.GetString("TraceCodeContextChannelListenerChannelAccepted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context added to Message..
        /// </summary>
        internal static string TraceCodeContextProtocolContextAddedToMessage {
            get {
                return ResourceManager.GetString("TraceCodeContextProtocolContextAddedToMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context retrieved from Message..
        /// </summary>
        internal static string TraceCodeContextProtocolContextRetrievedFromMessage {
            get {
                return ResourceManager.GetString("TraceCodeContextProtocolContextRetrievedFromMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No matching &lt;service&gt; tag was found. Default endpoints added..
        /// </summary>
        internal static string TraceCodeDefaultEndpointsAdded {
            get {
                return ResourceManager.GetString("TraceCodeDefaultEndpointsAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to trace a message.
        /// </summary>
        internal static string TraceCodeDiagnosticsFailedMessageTrace {
            get {
                return ResourceManager.GetString("TraceCodeDiagnosticsFailedMessageTrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InstanceContext cached for InstanceId {0}..
        /// </summary>
        internal static string TraceCodeDICPInstanceContextCached {
            get {
                return ResourceManager.GetString("TraceCodeDICPInstanceContextCached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InstanceContext for InstanceId {0} removed from cache..
        /// </summary>
        internal static string TraceCodeDICPInstanceContextRemovedFromCache {
            get {
                return ResourceManager.GetString("TraceCodeDICPInstanceContextRemovedFromCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Did not understand message header..
        /// </summary>
        internal static string TraceCodeDidNotUnderstandMessageHeader {
            get {
                return ResourceManager.GetString("TraceCodeDidNotUnderstandMessageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A response message was received, but there are no outstanding requests waiting for this message. The message is being dropped..
        /// </summary>
        internal static string TraceCodeDroppedAMessage {
            get {
                return ResourceManager.GetString("TraceCodeDroppedAMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the element does not match the configuration type..
        /// </summary>
        internal static string TraceCodeElementTypeDoesntMatchConfiguredType {
            get {
                return ResourceManager.GetString("TraceCodeElementTypeDoesntMatchConfiguredType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End method execution..
        /// </summary>
        internal static string TraceCodeEndExecuteMethod {
            get {
                return ResourceManager.GetString("TraceCodeEndExecuteMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint listener closed..
        /// </summary>
        internal static string TraceCodeEndpointListenerClose {
            get {
                return ResourceManager.GetString("TraceCodeEndpointListenerClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint listener opened..
        /// </summary>
        internal static string TraceCodeEndpointListenerOpen {
            get {
                return ResourceManager.GetString("TraceCodeEndpointListenerOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error invoking user code.
        /// </summary>
        internal static string TraceCodeErrorInvokingUserCode {
            get {
                return ResourceManager.GetString("TraceCodeErrorInvokingUserCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration evaluation context not found..
        /// </summary>
        internal static string TraceCodeEvaluationContextNotFound {
            get {
                return ResourceManager.GetString("TraceCodeEvaluationContextNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting Security ExportChannelBinding.
        /// </summary>
        internal static string TraceCodeExportSecurityChannelBindingEntry {
            get {
                return ResourceManager.GetString("TraceCodeExportSecurityChannelBindingEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished Security ExportChannelBinding.
        /// </summary>
        internal static string TraceCodeExportSecurityChannelBindingExit {
            get {
                return ResourceManager.GetString("TraceCodeExportSecurityChannelBindingExit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extension collection does not exist..
        /// </summary>
        internal static string TraceCodeExtensionCollectionDoesNotExist {
            get {
                return ResourceManager.GetString("TraceCodeExtensionCollectionDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extension collection is empty..
        /// </summary>
        internal static string TraceCodeExtensionCollectionIsEmpty {
            get {
                return ResourceManager.GetString("TraceCodeExtensionCollectionIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension element not associated with an extension collection..
        /// </summary>
        internal static string TraceCodeExtensionCollectionNameNotFound {
            get {
                return ResourceManager.GetString("TraceCodeExtensionCollectionNameNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extension element already exists in the collection..
        /// </summary>
        internal static string TraceCodeExtensionElementAlreadyExistsInCollection {
            get {
                return ResourceManager.GetString("TraceCodeExtensionElementAlreadyExistsInCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension type not found..
        /// </summary>
        internal static string TraceCodeExtensionTypeNotFound {
            get {
                return ResourceManager.GetString("TraceCodeExtensionTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to reuse a pooled connection failed. Another attempt will be made with {0} remaining in the overall timeout..
        /// </summary>
        internal static string TraceCodeFailedAcceptFromPool {
            get {
                return ResourceManager.GetString("TraceCodeFailedAcceptFromPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to connect to the named pipe endpoint at &apos;{1}&apos; failed. Another attempt will be made with {0} remaining in the overall timeout..
        /// </summary>
        internal static string TraceCodeFailedPipeConnect {
            get {
                return ResourceManager.GetString("TraceCodeFailedPipeConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to set an activity id header on an outgoing message.
        /// </summary>
        internal static string TraceCodeFailedToAddAnActivityIdHeader {
            get {
                return ResourceManager.GetString("TraceCodeFailedToAddAnActivityIdHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incoming channel was disposed because there was an error while attempting to open it..
        /// </summary>
        internal static string TraceCodeFailedToOpenIncomingChannel {
            get {
                return ResourceManager.GetString("TraceCodeFailedToOpenIncomingChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to read an activity id header on a message.
        /// </summary>
        internal static string TraceCodeFailedToReadAnActivityIdHeader {
            get {
                return ResourceManager.GetString("TraceCodeFailedToReadAnActivityIdHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Evaluating message logging filter against the message exceeded the node quota set on the filter..
        /// </summary>
        internal static string TraceCodeFilterNotMatchedNodeQuotaExceeded {
            get {
                return ResourceManager.GetString("TraceCodeFilterNotMatchedNodeQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get BehaviorElement..
        /// </summary>
        internal static string TraceCodeGetBehaviorElement {
            get {
                return ResourceManager.GetString("TraceCodeGetBehaviorElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get ChannelEndpointElement..
        /// </summary>
        internal static string TraceCodeGetChannelEndpointElement {
            get {
                return ResourceManager.GetString("TraceCodeGetChannelEndpointElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get machine.config common behaviors..
        /// </summary>
        internal static string TraceCodeGetCommonBehaviors {
            get {
                return ResourceManager.GetString("TraceCodeGetCommonBehaviors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get configuration section..
        /// </summary>
        internal static string TraceCodeGetConfigurationSection {
            get {
                return ResourceManager.GetString("TraceCodeGetConfigurationSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get configured binding..
        /// </summary>
        internal static string TraceCodeGetConfiguredBinding {
            get {
                return ResourceManager.GetString("TraceCodeGetConfiguredBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get configured endpoint..
        /// </summary>
        internal static string TraceCodeGetConfiguredEndpoint {
            get {
                return ResourceManager.GetString("TraceCodeGetConfiguredEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get default configured binding..
        /// </summary>
        internal static string TraceCodeGetDefaultConfiguredBinding {
            get {
                return ResourceManager.GetString("TraceCodeGetDefaultConfiguredBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get default configured endpoint..
        /// </summary>
        internal static string TraceCodeGetDefaultConfiguredEndpoint {
            get {
                return ResourceManager.GetString("TraceCodeGetDefaultConfiguredEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get ServiceElement..
        /// </summary>
        internal static string TraceCodeGetServiceElement {
            get {
                return ResourceManager.GetString("TraceCodeGetServiceElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP SOAPAction header and the wsa:Action SOAP header did not match. .
        /// </summary>
        internal static string TraceCodeHttpActionMismatch {
            get {
                return ResourceManager.GetString("TraceCodeHttpActionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authentication failed for HTTP(S) connection.
        /// </summary>
        internal static string TraceCodeHttpAuthFailed {
            get {
                return ResourceManager.GetString("TraceCodeHttpAuthFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP concurrent receive quota was reached..
        /// </summary>
        internal static string TraceCodeHttpChannelConcurrentReceiveQuotaReached {
            get {
                return ResourceManager.GetString("TraceCodeHttpChannelConcurrentReceiveQuotaReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to lookup a channel to receive an incoming message. Either the endpoint or the SOAP action was not found..
        /// </summary>
        internal static string TraceCodeHttpChannelMessageReceiveFailed {
            get {
                return ResourceManager.GetString("TraceCodeHttpChannelMessageReceiveFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to send request message over HTTP.
        /// </summary>
        internal static string TraceCodeHttpChannelRequestAborted {
            get {
                return ResourceManager.GetString("TraceCodeHttpChannelRequestAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to send response message over HTTP.
        /// </summary>
        internal static string TraceCodeHttpChannelResponseAborted {
            get {
                return ResourceManager.GetString("TraceCodeHttpChannelResponseAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received bad HTTP response.
        /// </summary>
        internal static string TraceCodeHttpChannelUnexpectedResponse {
            get {
                return ResourceManager.GetString("TraceCodeHttpChannelUnexpectedResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP response was received.
        /// </summary>
        internal static string TraceCodeHttpResponseReceived {
            get {
                return ResourceManager.GetString("TraceCodeHttpResponseReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client certificate is invalid..
        /// </summary>
        internal static string TraceCodeHttpsClientCertificateInvalid {
            get {
                return ResourceManager.GetString("TraceCodeHttpsClientCertificateInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client certificate is invalid with native error code {0} (see http://go.microsoft.com/fwlink/?LinkId=187517 for details)..
        /// </summary>
        internal static string TraceCodeHttpsClientCertificateInvalid1 {
            get {
                return ResourceManager.GetString("TraceCodeHttpsClientCertificateInvalid1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client certificate is required.  No certificate was found in the request.  This might be because the client certificate could not be successfully validated by the operating system or IIS.  For information on how to bypass those validations and use a custom X509CertificateValidator in WCF please see http://go.microsoft.com/fwlink/?LinkId=208540..
        /// </summary>
        internal static string TraceCodeHttpsClientCertificateNotPresent {
            get {
                return ResourceManager.GetString("TraceCodeHttpsClientCertificateNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting Security ImportChannelBinding.
        /// </summary>
        internal static string TraceCodeImportSecurityChannelBindingEntry {
            get {
                return ResourceManager.GetString("TraceCodeImportSecurityChannelBindingEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished Security ImportChannelBinding.
        /// </summary>
        internal static string TraceCodeImportSecurityChannelBindingExit {
            get {
                return ResourceManager.GetString("TraceCodeImportSecurityChannelBindingExit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An existing incompatible transport manager was found for the specified URI..
        /// </summary>
        internal static string TraceCodeIncompatibleExistingTransportManager {
            get {
                return ResourceManager.GetString("TraceCodeIncompatibleExistingTransportManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initiating Named Pipe connection..
        /// </summary>
        internal static string TraceCodeInitiatingNamedPipeConnection {
            get {
                return ResourceManager.GetString("TraceCodeInitiatingNamedPipeConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initiating TCP connection..
        /// </summary>
        internal static string TraceCodeInitiatingTcpConnection {
            get {
                return ResourceManager.GetString("TraceCodeInitiatingTcpConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DurableInstance&apos;s InstanceContext refcount incremented..
        /// </summary>
        internal static string TraceCodeInstanceContextBoundToDurableInstance {
            get {
                return ResourceManager.GetString("TraceCodeInstanceContextBoundToDurableInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DurableInstance&apos;s InstanceContext refcount decremented..
        /// </summary>
        internal static string TraceCodeInstanceContextDetachedFromDurableInstance {
            get {
                return ResourceManager.GetString("TraceCodeInstanceContextDetachedFromDurableInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuanceTokenProvider has started a new security negotiation..
        /// </summary>
        internal static string TraceCodeIssuanceTokenProviderBeginSecurityNegotiation {
            get {
                return ResourceManager.GetString("TraceCodeIssuanceTokenProviderBeginSecurityNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuanceTokenProvider has completed the security negotiation..
        /// </summary>
        internal static string TraceCodeIssuanceTokenProviderEndSecurityNegotiation {
            get {
                return ResourceManager.GetString("TraceCodeIssuanceTokenProviderEndSecurityNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuanceTokenProvider applied a redirection header..
        /// </summary>
        internal static string TraceCodeIssuanceTokenProviderRedirectApplied {
            get {
                return ResourceManager.GetString("TraceCodeIssuanceTokenProviderRedirectApplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuanceTokenProvider removed the expired service token..
        /// </summary>
        internal static string TraceCodeIssuanceTokenProviderRemovedCachedToken {
            get {
                return ResourceManager.GetString("TraceCodeIssuanceTokenProviderRemovedCachedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IssuanceTokenProvider pruned service token cache..
        /// </summary>
        internal static string TraceCodeIssuanceTokenProviderServiceTokenCacheFull {
            get {
                return ResourceManager.GetString("TraceCodeIssuanceTokenProviderServiceTokenCacheFull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IssuanceTokenProvider used the cached service token..
        /// </summary>
        internal static string TraceCodeIssuanceTokenProviderUsingCachedToken {
            get {
                return ResourceManager.GetString("TraceCodeIssuanceTokenProviderUsingCachedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Listener created.
        /// </summary>
        internal static string TraceCodeListenerCreated {
            get {
                return ResourceManager.GetString("TraceCodeListenerCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Listener disposed.
        /// </summary>
        internal static string TraceCodeListenerDisposed {
            get {
                return ResourceManager.GetString("TraceCodeListenerDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system hit the limit set for the &apos;{0}&apos; throttle. Throttle value can be changed by modifying {0} property on {1}..
        /// </summary>
        internal static string TraceCodeManualFlowThrottleLimitReached {
            get {
                return ResourceManager.GetString("TraceCodeManualFlowThrottleLimitReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of inbound session channel has been reached. .
        /// </summary>
        internal static string TraceCodeMaxAcceptedChannelsReached {
            get {
                return ResourceManager.GetString("TraceCodeMaxAcceptedChannelsReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of pending connections has been reached. .
        /// </summary>
        internal static string TraceCodeMaxPendingConnectionsReached {
            get {
                return ResourceManager.GetString("TraceCodeMaxPendingConnectionsReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was closed.
        /// </summary>
        internal static string TraceCodeMessageClosed {
            get {
                return ResourceManager.GetString("TraceCodeMessageClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was closed again.
        /// </summary>
        internal static string TraceCodeMessageClosedAgain {
            get {
                return ResourceManager.GetString("TraceCodeMessageClosedAgain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was copied.
        /// </summary>
        internal static string TraceCodeMessageCopied {
            get {
                return ResourceManager.GetString("TraceCodeMessageCopied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reached the limit of messages to log. Message logging is stopping. .
        /// </summary>
        internal static string TraceCodeMessageCountLimitExceeded {
            get {
                return ResourceManager.GetString("TraceCodeMessageCountLimitExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message not logged because its size exceeds configured quota.
        /// </summary>
        internal static string TraceCodeMessageNotLoggedQuotaExceeded {
            get {
                return ResourceManager.GetString("TraceCodeMessageNotLoggedQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switched threads while processing a message..
        /// </summary>
        internal static string TraceCodeMessageProcessingPaused {
            get {
                return ResourceManager.GetString("TraceCodeMessageProcessingPaused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was read.
        /// </summary>
        internal static string TraceCodeMessageRead {
            get {
                return ResourceManager.GetString("TraceCodeMessageRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received a message over a channel..
        /// </summary>
        internal static string TraceCodeMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodeMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sent a message over a channel..
        /// </summary>
        internal static string TraceCodeMessageSent {
            get {
                return ResourceManager.GetString("TraceCodeMessageSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was written.
        /// </summary>
        internal static string TraceCodeMessageWritten {
            get {
                return ResourceManager.GetString("TraceCodeMessageWritten", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient received a reply..
        /// </summary>
        internal static string TraceCodeMetadataExchangeClientReceiveReply {
            get {
                return ResourceManager.GetString("TraceCodeMetadataExchangeClientReceiveReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MetadataExchangeClient is sending a request for metadata..
        /// </summary>
        internal static string TraceCodeMetadataExchangeClientSendRequest {
            get {
                return ResourceManager.GetString("TraceCodeMetadataExchangeClientSendRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MsmqActivation service cannot peek on the queue..
        /// </summary>
        internal static string TraceCodeMsmqCannotPeekOnQueue {
            get {
                return ResourceManager.GetString("TraceCodeMsmqCannotPeekOnQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MsmqActivation service cannot discover queues..
        /// </summary>
        internal static string TraceCodeMsmqCannotReadQueues {
            get {
                return ResourceManager.GetString("TraceCodeMsmqCannotReadQueues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ datagram message received..
        /// </summary>
        internal static string TraceCodeMsmqDatagramReceived {
            get {
                return ResourceManager.GetString("TraceCodeMsmqDatagramReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ datagram message sent..
        /// </summary>
        internal static string TraceCodeMsmqDatagramSent {
            get {
                return ResourceManager.GetString("TraceCodeMsmqDatagramSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ detected successfully..
        /// </summary>
        internal static string TraceCodeMsmqDetected {
            get {
                return ResourceManager.GetString("TraceCodeMsmqDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entered batching mode..
        /// </summary>
        internal static string TraceCodeMsmqEnteredBatch {
            get {
                return ResourceManager.GetString("TraceCodeMsmqEnteredBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected exception caught..
        /// </summary>
        internal static string TraceCodeMsmqExpectedException {
            get {
                return ResourceManager.GetString("TraceCodeMsmqExpectedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hosting environment found the base address for the service..
        /// </summary>
        internal static string TraceCodeMsmqFoundBaseAddress {
            get {
                return ResourceManager.GetString("TraceCodeMsmqFoundBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Left batching mode..
        /// </summary>
        internal static string TraceCodeMsmqLeftBatch {
            get {
                return ResourceManager.GetString("TraceCodeMsmqLeftBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MsmqActivation service found application matching queue..
        /// </summary>
        internal static string TraceCodeMsmqMatchedApplicationFound {
            get {
                return ResourceManager.GetString("TraceCodeMsmqMatchedApplicationFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message was dropped..
        /// </summary>
        internal static string TraceCodeMsmqMessageDropped {
            get {
                return ResourceManager.GetString("TraceCodeMsmqMessageDropped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot move or delete message because it is still locked under the transaction..
        /// </summary>
        internal static string TraceCodeMsmqMessageLockedUnderTheTransaction {
            get {
                return ResourceManager.GetString("TraceCodeMsmqMessageLockedUnderTheTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message was rejected..
        /// </summary>
        internal static string TraceCodeMsmqMessageRejected {
            get {
                return ResourceManager.GetString("TraceCodeMsmqMessageRejected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot move or delete message..
        /// </summary>
        internal static string TraceCodeMsmqMoveOrDeleteAttemptFailed {
            get {
                return ResourceManager.GetString("TraceCodeMsmqMoveOrDeleteAttemptFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Poison message moved to the poison subqueue..
        /// </summary>
        internal static string TraceCodeMsmqPoisonMessageMovedPoison {
            get {
                return ResourceManager.GetString("TraceCodeMsmqPoisonMessageMovedPoison", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Poison message moved to the retry subqueue..
        /// </summary>
        internal static string TraceCodeMsmqPoisonMessageMovedRetry {
            get {
                return ResourceManager.GetString("TraceCodeMsmqPoisonMessageMovedRetry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Poison message rejected..
        /// </summary>
        internal static string TraceCodeMsmqPoisonMessageRejected {
            get {
                return ResourceManager.GetString("TraceCodeMsmqPoisonMessageRejected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pool of the native MSMQ messages is full. This may affect performance..
        /// </summary>
        internal static string TraceCodeMsmqPoolFull {
            get {
                return ResourceManager.GetString("TraceCodeMsmqPoolFull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transaction which received this message was aborted at least once..
        /// </summary>
        internal static string TraceCodeMsmqPotentiallyPoisonMessageDetected {
            get {
                return ResourceManager.GetString("TraceCodeMsmqPotentiallyPoisonMessageDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ queue closed..
        /// </summary>
        internal static string TraceCodeMsmqQueueClosed {
            get {
                return ResourceManager.GetString("TraceCodeMsmqQueueClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ queue opened..
        /// </summary>
        internal static string TraceCodeMsmqQueueOpened {
            get {
                return ResourceManager.GetString("TraceCodeMsmqQueueOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot detect if the queue is transactional..
        /// </summary>
        internal static string TraceCodeMsmqQueueTransactionalStatusUnknown {
            get {
                return ResourceManager.GetString("TraceCodeMsmqQueueTransactionalStatusUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MsmqActivation service started scan for queues..
        /// </summary>
        internal static string TraceCodeMsmqScanStarted {
            get {
                return ResourceManager.GetString("TraceCodeMsmqScanStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ transport session received..
        /// </summary>
        internal static string TraceCodeMsmqSessiongramReceived {
            get {
                return ResourceManager.GetString("TraceCodeMsmqSessiongramReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ transport session sent..
        /// </summary>
        internal static string TraceCodeMsmqSessiongramSent {
            get {
                return ResourceManager.GetString("TraceCodeMsmqSessiongramSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MSMQ Activation service started application..
        /// </summary>
        internal static string TraceCodeMsmqStartingApplication {
            get {
                return ResourceManager.GetString("TraceCodeMsmqStartingApplication", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hosting environment started service..
        /// </summary>
        internal static string TraceCodeMsmqStartingService {
            get {
                return ResourceManager.GetString("TraceCodeMsmqStartingService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected acknowledgment value..
        /// </summary>
        internal static string TraceCodeMsmqUnexpectedAcknowledgment {
            get {
                return ResourceManager.GetString("TraceCodeMsmqUnexpectedAcknowledgment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received a message over a named pipe channel..
        /// </summary>
        internal static string TraceCodeNamedPipeChannelMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodeNamedPipeChannelMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to receive a message over a named pipe channel..
        /// </summary>
        internal static string TraceCodeNamedPipeChannelMessageReceiveFailed {
            get {
                return ResourceManager.GetString("TraceCodeNamedPipeChannelMessageReceiveFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NegotiationTokenAuthenticator was attached..
        /// </summary>
        internal static string TraceCodeNegotiationAuthenticatorAttached {
            get {
                return ResourceManager.GetString("TraceCodeNegotiationAuthenticatorAttached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NegotiationTokenProvider was attached..
        /// </summary>
        internal static string TraceCodeNegotiationTokenProviderAttached {
            get {
                return ResourceManager.GetString("TraceCodeNegotiationTokenProviderAttached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No existing transport manager was found for the specified URI..
        /// </summary>
        internal static string TraceCodeNoExistingTransportManager {
            get {
                return ResourceManager.GetString("TraceCodeNoExistingTransportManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport is listening at base URI..
        /// </summary>
        internal static string TraceCodeOpenedListener {
            get {
                return ResourceManager.GetString("TraceCodeOpenedListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration system has detected a duplicate key in a different configuration scope and is overriding with the more recent value..
        /// </summary>
        internal static string TraceCodeOverridingDuplicateConfigurationKey {
            get {
                return ResourceManager.GetString("TraceCodeOverridingDuplicateConfigurationKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was received by a peer channel..
        /// </summary>
        internal static string TraceCodePeerChannelMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodePeerChannelMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was sent on a peer channel..
        /// </summary>
        internal static string TraceCodePeerChannelMessageSent {
            get {
                return ResourceManager.GetString("TraceCodePeerChannelMessageSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode received a message that did not match any local channels..
        /// </summary>
        internal static string TraceCodePeerFloodedMessageNotMatched {
            get {
                return ResourceManager.GetString("TraceCodePeerFloodedMessageNotMatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode received a flooded message that was not propagated further..
        /// </summary>
        internal static string TraceCodePeerFloodedMessageNotPropagated {
            get {
                return ResourceManager.GetString("TraceCodePeerFloodedMessageNotPropagated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode received a flooded message..
        /// </summary>
        internal static string TraceCodePeerFloodedMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodePeerFloodedMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received message could not be forwarded to other neighbors since it exceeded the quota set for the peer node..
        /// </summary>
        internal static string TraceCodePeerFlooderReceiveMessageQuotaExceeded {
            get {
                return ResourceManager.GetString("TraceCodePeerFlooderReceiveMessageQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PeerMaintainer Activity..
        /// </summary>
        internal static string TraceCodePeerMaintainerActivity {
            get {
                return ResourceManager.GetString("TraceCodePeerMaintainerActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor close has failed..
        /// </summary>
        internal static string TraceCodePeerNeighborCloseFailed {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborCloseFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor closing has failed..
        /// </summary>
        internal static string TraceCodePeerNeighborClosingFailed {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborClosingFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor Manager is offline..
        /// </summary>
        internal static string TraceCodePeerNeighborManagerOffline {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborManagerOffline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor Manager is online..
        /// </summary>
        internal static string TraceCodePeerNeighborManagerOnline {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborManagerOnline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message was received by a Peer Neighbor..
        /// </summary>
        internal static string TraceCodePeerNeighborMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor was not accepted..
        /// </summary>
        internal static string TraceCodePeerNeighborNotAccepted {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborNotAccepted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor was not found..
        /// </summary>
        internal static string TraceCodePeerNeighborNotFound {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor open has failed..
        /// </summary>
        internal static string TraceCodePeerNeighborOpenFailed {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborOpenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor state has changed..
        /// </summary>
        internal static string TraceCodePeerNeighborStateChanged {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborStateChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Peer Neighbor state change has failed..
        /// </summary>
        internal static string TraceCodePeerNeighborStateChangeFailed {
            get {
                return ResourceManager.GetString("TraceCodePeerNeighborStateChangeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode address has changed..
        /// </summary>
        internal static string TraceCodePeerNodeAddressChanged {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeAddressChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A neighbor connection could not be established due to insufficient or wrong credentials..
        /// </summary>
        internal static string TraceCodePeerNodeAuthenticationFailure {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeAuthenticationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A neighbor security handshake as timed out..
        /// </summary>
        internal static string TraceCodePeerNodeAuthenticationTimeout {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeAuthenticationTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode was closed..
        /// </summary>
        internal static string TraceCodePeerNodeClosed {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode is closing..
        /// </summary>
        internal static string TraceCodePeerNodeClosing {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeClosing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode was opened..
        /// </summary>
        internal static string TraceCodePeerNodeOpened {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Peer node open failed..
        /// </summary>
        internal static string TraceCodePeerNodeOpenFailed {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeOpenFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PeerNode is opening..
        /// </summary>
        internal static string TraceCodePeerNodeOpening {
            get {
                return ResourceManager.GetString("TraceCodePeerNodeOpening", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message source could not be authenticated..
        /// </summary>
        internal static string TraceCodePeerReceiveMessageAuthenticationFailure {
            get {
                return ResourceManager.GetString("TraceCodePeerReceiveMessageAuthenticationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PeerService Opened and listening at &apos;{0}&apos;..
        /// </summary>
        internal static string TraceCodePeerServiceOpened {
            get {
                return ResourceManager.GetString("TraceCodePeerServiceOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A performance counter failed to load. Some performance counters will not be available..
        /// </summary>
        internal static string TraceCodePerformanceCounterFailedToLoad {
            get {
                return ResourceManager.GetString("TraceCodePerformanceCounterFailedToLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load the performance counter &apos;{0}&apos;. Some performance counters will not be available.
        /// </summary>
        internal static string TraceCodePerformanceCountersFailed {
            get {
                return ResourceManager.GetString("TraceCodePerformanceCountersFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while updating the performance counter &apos;{0}&apos;. This performance counter will be disabled..
        /// </summary>
        internal static string TraceCodePerformanceCountersFailedDuringUpdate {
            get {
                return ResourceManager.GetString("TraceCodePerformanceCountersFailedDuringUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading performance counters for the service failed. Performance counters will not be available for this service..
        /// </summary>
        internal static string TraceCodePerformanceCountersFailedForService {
            get {
                return ResourceManager.GetString("TraceCodePerformanceCountersFailedForService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unloading the performance counters failed..
        /// </summary>
        internal static string TraceCodePerformanceCountersFailedOnRelease {
            get {
                return ResourceManager.GetString("TraceCodePerformanceCountersFailedOnRelease", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PipeConnection aborted.
        /// </summary>
        internal static string TraceCodePipeConnectionAbort {
            get {
                return ResourceManager.GetString("TraceCodePipeConnectionAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registered addresses in PNRP..
        /// </summary>
        internal static string TraceCodePnrpRegisteredAddresses {
            get {
                return ResourceManager.GetString("TraceCodePnrpRegisteredAddresses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolved addresses in PNRP..
        /// </summary>
        internal static string TraceCodePnrpResolvedAddresses {
            get {
                return ResourceManager.GetString("TraceCodePnrpResolvedAddresses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected Exception during PNRP resolve operation..
        /// </summary>
        internal static string TraceCodePnrpResolveException {
            get {
                return ResourceManager.GetString("TraceCodePnrpResolveException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unregistered addresses in PNRP..
        /// </summary>
        internal static string TraceCodePnrpUnregisteredAddresses {
            get {
                return ResourceManager.GetString("TraceCodePnrpUnregisteredAddresses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransportManager was successfully closed..
        /// </summary>
        internal static string TraceCodePortSharingClosed {
            get {
                return ResourceManager.GetString("TraceCodePortSharingClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PROCESS_DUP_HANDLE access right has been granted to the {0} service&apos;s account with SID &apos;{1}&apos;..
        /// </summary>
        internal static string TraceCodePortSharingDupHandleGranted {
            get {
                return ResourceManager.GetString("TraceCodePortSharingDupHandleGranted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A named pipe was successfully duplicated..
        /// </summary>
        internal static string TraceCodePortSharingDuplicatedPipe {
            get {
                return ResourceManager.GetString("TraceCodePortSharingDuplicatedPipe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A socket was successfully duplicated..
        /// </summary>
        internal static string TraceCodePortSharingDuplicatedSocket {
            get {
                return ResourceManager.GetString("TraceCodePortSharingDuplicatedSocket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransportManager is now successfully listening..
        /// </summary>
        internal static string TraceCodePortSharingListening {
            get {
                return ResourceManager.GetString("TraceCodePortSharingListening", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null Message (signalling end of channel) was received from a datagram channel, but the channel is still in the Opened state. This indicates a bug in the datagram channel, and the demuxer receive loop has been prematurely stalled. .
        /// </summary>
        internal static string TraceCodePrematureDatagramEof {
            get {
                return ResourceManager.GetString("TraceCodePrematureDatagramEof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switched threads while processing a message for Contract &apos;{0}&apos; at Address &apos;{1}&apos;. ConcurrencyMode for service is set to Single/Reentrant and the service is currently processing another message..
        /// </summary>
        internal static string TraceCodeProcessMessage2Paused {
            get {
                return ResourceManager.GetString("TraceCodeProcessMessage2Paused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switched threads while processing a message for Contract &apos;{0}&apos; at Address &apos;{1}&apos;. Waiting for the completion of ReceiveContext acknowledgement. If your service seems to be not processing the message ensure that the channel implementation of receive context completes the operation..
        /// </summary>
        internal static string TraceCodeProcessMessage31Paused {
            get {
                return ResourceManager.GetString("TraceCodeProcessMessage31Paused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switched threads while processing a message for Contract &apos;{0}&apos; at Address &apos;{1}&apos;. Cannot process more than one transaction at a time and the transaction associated with the previous message is not yet complete. Ensure that the caller has committed the transaction..
        /// </summary>
        internal static string TraceCodeProcessMessage3Paused {
            get {
                return ResourceManager.GetString("TraceCodeProcessMessage3Paused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switched threads while processing a message for Contract &apos;{0}&apos; at Address &apos;{1}&apos;. UseSynchronizationContext property on ServiceBehaviorAttribute is set to true, and SynchronizationContext.Current was non-null when opening ServiceHost.  If your service seems to be not processing messages, consider setting UseSynchronizationContext to false..
        /// </summary>
        internal static string TraceCodeProcessMessage4Paused {
            get {
                return ResourceManager.GetString("TraceCodeProcessMessage4Paused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reliable channel has been opened..
        /// </summary>
        internal static string TraceCodeReliableChannelOpened {
            get {
                return ResourceManager.GetString("TraceCodeReliableChannelOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Behavior type already exists in the collection.
        /// </summary>
        internal static string TraceCodeRemoveBehavior {
            get {
                return ResourceManager.GetString("TraceCodeRemoveBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received reply over request channel.
        /// </summary>
        internal static string TraceCodeRequestChannelReplyReceived {
            get {
                return ResourceManager.GetString("TraceCodeRequestChannelReplyReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RequestContext aborted.
        /// </summary>
        internal static string TraceCodeRequestContextAbort {
            get {
                return ResourceManager.GetString("TraceCodeRequestContextAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure occured while performing a security related operation..
        /// </summary>
        internal static string TraceCodeSecurity {
            get {
                return ResourceManager.GetString("TraceCodeSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An active security session was removed by the server..
        /// </summary>
        internal static string TraceCodeSecurityActiveServerSessionRemoved {
            get {
                return ResourceManager.GetString("TraceCodeSecurityActiveServerSessionRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure occurred while writing to the security audit log..
        /// </summary>
        internal static string TraceCodeSecurityAuditWrittenFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityAuditWrittenFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security audit log is written successfully..
        /// </summary>
        internal static string TraceCodeSecurityAuditWrittenSuccess {
            get {
                return ResourceManager.GetString("TraceCodeSecurityAuditWrittenSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security protocol verified the incoming message..
        /// </summary>
        internal static string TraceCodeSecurityBindingIncomingMessageVerified {
            get {
                return ResourceManager.GetString("TraceCodeSecurityBindingIncomingMessageVerified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security protocol secured the outgoing message..
        /// </summary>
        internal static string TraceCodeSecurityBindingOutgoingMessageSecured {
            get {
                return ResourceManager.GetString("TraceCodeSecurityBindingOutgoingMessageSecured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security protocol cannot secure the outgoing message..
        /// </summary>
        internal static string TraceCodeSecurityBindingSecureOutgoingMessageFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityBindingSecureOutgoingMessageFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security protocol cannot verify the incoming message..
        /// </summary>
        internal static string TraceCodeSecurityBindingVerifyIncomingMessageFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityBindingVerifyIncomingMessageFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close message was received by client security session.TraceCodeSecurityClientSessionKeyRenewed=Client security session renewed session key..
        /// </summary>
        internal static string TraceCodeSecurityClientSessionCloseMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodeSecurityClientSessionCloseMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close response message was sent by client security session..
        /// </summary>
        internal static string TraceCodeSecurityClientSessionCloseResponseSent {
            get {
                return ResourceManager.GetString("TraceCodeSecurityClientSessionCloseResponseSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Close message was sent by the client security session..
        /// </summary>
        internal static string TraceCodeSecurityClientSessionCloseSent {
            get {
                return ResourceManager.GetString("TraceCodeSecurityClientSessionCloseSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client security session renewed the session key..
        /// </summary>
        internal static string TraceCodeSecurityClientSessionKeyRenewed {
            get {
                return ResourceManager.GetString("TraceCodeSecurityClientSessionKeyRenewed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client security session discarded the previous session key..
        /// </summary>
        internal static string TraceCodeSecurityClientSessionPreviousKeyDiscarded {
            get {
                return ResourceManager.GetString("TraceCodeSecurityClientSessionPreviousKeyDiscarded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SecurityContextSecurityToken cache is full..
        /// </summary>
        internal static string TraceCodeSecurityContextTokenCacheFull {
            get {
                return ResourceManager.GetString("TraceCodeSecurityContextTokenCacheFull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity cannot be determined for an EndpointReference..
        /// </summary>
        internal static string TraceCodeSecurityIdentityDeterminationFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityIdentityDeterminationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity was determined for an EndpointReference..
        /// </summary>
        internal static string TraceCodeSecurityIdentityDeterminationSuccess {
            get {
                return ResourceManager.GetString("TraceCodeSecurityIdentityDeterminationSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HostName portion of an endpoint address cannot be normalized..
        /// </summary>
        internal static string TraceCodeSecurityIdentityHostNameNormalizationFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityIdentityHostNameNormalizationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity verification failed..
        /// </summary>
        internal static string TraceCodeSecurityIdentityVerificationFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityIdentityVerificationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity verification succeeded..
        /// </summary>
        internal static string TraceCodeSecurityIdentityVerificationSuccess {
            get {
                return ResourceManager.GetString("TraceCodeSecurityIdentityVerificationSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security impersonation failed at the server..
        /// </summary>
        internal static string TraceCodeSecurityImpersonationFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityImpersonationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Impersonation succeeded at the server..
        /// </summary>
        internal static string TraceCodeSecurityImpersonationSuccess {
            get {
                return ResourceManager.GetString("TraceCodeSecurityImpersonationSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An inactive security session was faulted by the server..
        /// </summary>
        internal static string TraceCodeSecurityInactiveSessionFaulted {
            get {
                return ResourceManager.GetString("TraceCodeSecurityInactiveSessionFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service security negotiation processing failure..
        /// </summary>
        internal static string TraceCodeSecurityNegotiationProcessingFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecurityNegotiationProcessingFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new security session key was issued by the server..
        /// </summary>
        internal static string TraceCodeSecurityNewServerSessionKeyIssued {
            get {
                return ResourceManager.GetString("TraceCodeSecurityNewServerSessionKeyIssued", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A pending security session was activated by the server..
        /// </summary>
        internal static string TraceCodeSecurityPendingServerSessionActivated {
            get {
                return ResourceManager.GetString("TraceCodeSecurityPendingServerSessionActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A pending security session was added to the server..
        /// </summary>
        internal static string TraceCodeSecurityPendingServerSessionAdded {
            get {
                return ResourceManager.GetString("TraceCodeSecurityPendingServerSessionAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pending security session was closed by the server..
        /// </summary>
        internal static string TraceCodeSecurityPendingServerSessionClosed {
            get {
                return ResourceManager.GetString("TraceCodeSecurityPendingServerSessionClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server security session sent session aborted fault to client..
        /// </summary>
        internal static string TraceCodeSecurityServerSessionAbortedFaultSent {
            get {
                return ResourceManager.GetString("TraceCodeSecurityServerSessionAbortedFaultSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server security session received a close message from the client..
        /// </summary>
        internal static string TraceCodeSecurityServerSessionCloseReceived {
            get {
                return ResourceManager.GetString("TraceCodeSecurityServerSessionCloseReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server security session received Close response message from client..
        /// </summary>
        internal static string TraceCodeSecurityServerSessionCloseResponseReceived {
            get {
                return ResourceManager.GetString("TraceCodeSecurityServerSessionCloseResponseReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session key was updated by the server..
        /// </summary>
        internal static string TraceCodeSecurityServerSessionKeyUpdated {
            get {
                return ResourceManager.GetString("TraceCodeSecurityServerSessionKeyUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server security session sent a key renewal fault to the client..
        /// </summary>
        internal static string TraceCodeSecurityServerSessionRenewalFaultSent {
            get {
                return ResourceManager.GetString("TraceCodeSecurityServerSessionRenewalFaultSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client security session received session aborted fault from server..
        /// </summary>
        internal static string TraceCodeSecuritySessionAbortedFaultReceived {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionAbortedFaultReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure sending security session aborted fault to client..
        /// </summary>
        internal static string TraceCodeSecuritySessionAbortedFaultSendFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionAbortedFaultSendFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client security session received a closed reponse from the server..
        /// </summary>
        internal static string TraceCodeSecuritySessionClosedResponseReceived {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionClosedResponseReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure occurred when sending a security session Close response to the client..
        /// </summary>
        internal static string TraceCodeSecuritySessionClosedResponseSendFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionClosedResponseSendFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server security session sent a close response to the client..
        /// </summary>
        internal static string TraceCodeSecuritySessionCloseResponseSent {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionCloseResponseSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message is not part of an existing security session..
        /// </summary>
        internal static string TraceCodeSecuritySessionDemuxFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionDemuxFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client security session received a key renewal fault from the server..
        /// </summary>
        internal static string TraceCodeSecuritySessionKeyRenewalFaultReceived {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionKeyRenewalFaultReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client security session was redirected..
        /// </summary>
        internal static string TraceCodeSecuritySessionRedirectApplied {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionRedirectApplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure occurred when sending a renewal fault on the security session key to the client..
        /// </summary>
        internal static string TraceCodeSecuritySessionRenewFaultSendFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionRenewFaultSendFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client security session operation failed..
        /// </summary>
        internal static string TraceCodeSecuritySessionRequestorOperationFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionRequestorOperationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session operation completed successfully at the client..
        /// </summary>
        internal static string TraceCodeSecuritySessionRequestorOperationSuccess {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionRequestorOperationSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security session operation was started at the client..
        /// </summary>
        internal static string TraceCodeSecuritySessionRequestorStartOperation {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionRequestorStartOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session operation failed at the server..
        /// </summary>
        internal static string TraceCodeSecuritySessionResponderOperationFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionResponderOperationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failure sending security session Close to client..
        /// </summary>
        internal static string TraceCodeSecuritySessionServerCloseSendFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionServerCloseSendFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server security session sent Close to client..
        /// </summary>
        internal static string TraceCodeSecuritySessionServerCloseSent {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySessionServerCloseSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServicePrincipalName could not be mapped to a SecurityIdentifier..
        /// </summary>
        internal static string TraceCodeSecuritySpnToSidMappingFailure {
            get {
                return ResourceManager.GetString("TraceCodeSecuritySpnToSidMappingFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Token Authenticator was closed..
        /// </summary>
        internal static string TraceCodeSecurityTokenAuthenticatorClosed {
            get {
                return ResourceManager.GetString("TraceCodeSecurityTokenAuthenticatorClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Token Authenticator was opened..
        /// </summary>
        internal static string TraceCodeSecurityTokenAuthenticatorOpened {
            get {
                return ResourceManager.GetString("TraceCodeSecurityTokenAuthenticatorOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Token Provider was closed..
        /// </summary>
        internal static string TraceCodeSecurityTokenProviderClosed {
            get {
                return ResourceManager.GetString("TraceCodeSecurityTokenProviderClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Token Provider was opened..
        /// </summary>
        internal static string TraceCodeSecurityTokenProviderOpened {
            get {
                return ResourceManager.GetString("TraceCodeSecurityTokenProviderOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MaxOutboundConnectionsPerEndpoint quota ({0}) has been reached, so the connection was closed and not reused by the listener..
        /// </summary>
        internal static string TraceCodeServerMaxPooledConnectionsQuotaReached {
            get {
                return ResourceManager.GetString("TraceCodeServerMaxPooledConnectionsQuotaReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceChannel information..
        /// </summary>
        internal static string TraceCodeServiceChannelLifetime {
            get {
                return ResourceManager.GetString("TraceCodeServiceChannelLifetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceDurableInstance &apos;{0}&apos; deleted from persistence store..
        /// </summary>
        internal static string TraceCodeServiceDurableInstanceDeleted {
            get {
                return ResourceManager.GetString("TraceCodeServiceDurableInstanceDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceDurableInstance &apos;{0}&apos; disposed..
        /// </summary>
        internal static string TraceCodeServiceDurableInstanceDisposed {
            get {
                return ResourceManager.GetString("TraceCodeServiceDurableInstanceDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceDurableInstance loaded from persistence store..
        /// </summary>
        internal static string TraceCodeServiceDurableInstanceLoaded {
            get {
                return ResourceManager.GetString("TraceCodeServiceDurableInstanceLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceDurableInstance saved to persistence store..
        /// </summary>
        internal static string TraceCodeServiceDurableInstanceSaved {
            get {
                return ResourceManager.GetString("TraceCodeServiceDurableInstanceSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceHost base addresses..
        /// </summary>
        internal static string TraceCodeServiceHostBaseAddresses {
            get {
                return ResourceManager.GetString("TraceCodeServiceHostBaseAddresses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create ServiceHost..
        /// </summary>
        internal static string TraceCodeServiceHostCreation {
            get {
                return ResourceManager.GetString("TraceCodeServiceHostCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceHost error on calling ReleasePerformanceCounters..
        /// </summary>
        internal static string TraceCodeServiceHostErrorOnReleasePerformanceCounter {
            get {
                return ResourceManager.GetString("TraceCodeServiceHostErrorOnReleasePerformanceCounter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceHost faulted..
        /// </summary>
        internal static string TraceCodeServiceHostFaulted {
            get {
                return ResourceManager.GetString("TraceCodeServiceHostFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceHost close operation timedout..
        /// </summary>
        internal static string TraceCodeServiceHostTimeoutOnClose {
            get {
                return ResourceManager.GetString("TraceCodeServiceHostTimeoutOnClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replying to an operation threw a exception..
        /// </summary>
        internal static string TraceCodeServiceOperationExceptionOnReply {
            get {
                return ResourceManager.GetString("TraceCodeServiceOperationExceptionOnReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Request/Reply operation {0} has no Reply Message..
        /// </summary>
        internal static string TraceCodeServiceOperationMissingReply {
            get {
                return ResourceManager.GetString("TraceCodeServiceOperationMissingReply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Request/Reply operation {0} has no IRequestContext to use for the reply..
        /// </summary>
        internal static string TraceCodeServiceOperationMissingReplyContext {
            get {
                return ResourceManager.GetString("TraceCodeServiceOperationMissingReplyContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service security negotiation completed..
        /// </summary>
        internal static string TraceCodeServiceSecurityNegotiationCompleted {
            get {
                return ResourceManager.GetString("TraceCodeServiceSecurityNegotiationCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system hit the limit set for throttle &apos;{0}&apos;. Limit for this throttle was set to {1}. Throttle value can be changed by modifying attribute &apos;{2}&apos; in serviceThrottle element or by modifying &apos;{0}&apos; property on behavior ServiceThrottlingBehavior..
        /// </summary>
        internal static string TraceCodeServiceThrottleLimitReached {
            get {
                return ResourceManager.GetString("TraceCodeServiceThrottleLimitReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system hit an internal throttle limit. Limit for this throttle was set to {0}. This throttle cannot be configured..
        /// </summary>
        internal static string TraceCodeServiceThrottleLimitReachedInternal {
            get {
                return ResourceManager.GetString("TraceCodeServiceThrottleLimitReachedInternal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The shared memory for the endpoint of the service &apos;{0}&apos; does not exist. The service may not be started..
        /// </summary>
        internal static string TraceCodeSharedManagerServiceEndpointNotExist {
            get {
                return ResourceManager.GetString("TraceCodeSharedManagerServiceEndpointNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Behavior type is not of expected type.
        /// </summary>
        internal static string TraceCodeSkipBehavior {
            get {
                return ResourceManager.GetString("TraceCodeSkipBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SocketConnection aborted.
        /// </summary>
        internal static string TraceCodeSocketConnectionAbort {
            get {
                return ResourceManager.GetString("TraceCodeSocketConnectionAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SocketConnection aborted under Close.
        /// </summary>
        internal static string TraceCodeSocketConnectionAbortClose {
            get {
                return ResourceManager.GetString("TraceCodeSocketConnectionAbortClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SocketConnection close.
        /// </summary>
        internal static string TraceCodeSocketConnectionClose {
            get {
                return ResourceManager.GetString("TraceCodeSocketConnectionClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SocketConnection create.
        /// </summary>
        internal static string TraceCodeSocketConnectionCreate {
            get {
                return ResourceManager.GetString("TraceCodeSocketConnectionCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client&apos;s outgoing SSPI negotiation..
        /// </summary>
        internal static string TraceCodeSpnegoClientNegotiation {
            get {
                return ResourceManager.GetString("TraceCodeSpnegoClientNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SpnegoTokenProvider completed SSPI negotiation..
        /// </summary>
        internal static string TraceCodeSpnegoClientNegotiationCompleted {
            get {
                return ResourceManager.GetString("TraceCodeSpnegoClientNegotiationCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service&apos;s outgoing SSPI negotiation..
        /// </summary>
        internal static string TraceCodeSpnegoServiceNegotiation {
            get {
                return ResourceManager.GetString("TraceCodeSpnegoServiceNegotiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SpnegoTokenAuthenticator completed SSPI negotiation..
        /// </summary>
        internal static string TraceCodeSpnegoServiceNegotiationCompleted {
            get {
                return ResourceManager.GetString("TraceCodeSpnegoServiceNegotiationCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SqlPersistenceProvider.Open() parameters..
        /// </summary>
        internal static string TraceCodeSqlPersistenceProviderOpenParameters {
            get {
                return ResourceManager.GetString("TraceCodeSqlPersistenceProviderOpenParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sql execution complete..
        /// </summary>
        internal static string TraceCodeSqlPersistenceProviderSQLCallEnd {
            get {
                return ResourceManager.GetString("TraceCodeSqlPersistenceProviderSQLCallEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sql execution started..
        /// </summary>
        internal static string TraceCodeSqlPersistenceProviderSQLCallStart {
            get {
                return ResourceManager.GetString("TraceCodeSqlPersistenceProviderSQLCallStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote SSL client failed to provide a required certificate..
        /// </summary>
        internal static string TraceCodeSslClientCertMissing {
            get {
                return ResourceManager.GetString("TraceCodeSslClientCertMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream security upgrade was accepted successfully..
        /// </summary>
        internal static string TraceCodeStreamSecurityUpgradeAccepted {
            get {
                return ResourceManager.GetString("TraceCodeStreamSecurityUpgradeAccepted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SynchronizationContextWorkflowSchedulerService - Timer {0} cancelled..
        /// </summary>
        internal static string TraceCodeSyncContextSchedulerServiceTimerCancelled {
            get {
                return ResourceManager.GetString("TraceCodeSyncContextSchedulerServiceTimerCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SynchronizationContextWorkflowSchedulerService - Timer {0} created for InstanceId {1}..
        /// </summary>
        internal static string TraceCodeSyncContextSchedulerServiceTimerCreated {
            get {
                return ResourceManager.GetString("TraceCodeSyncContextSchedulerServiceTimerCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication feed started..
        /// </summary>
        internal static string TraceCodeSyndicationFeedReadBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationFeedReadBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication feed completed..
        /// </summary>
        internal static string TraceCodeSyndicationFeedReadEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationFeedReadEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication feed started..
        /// </summary>
        internal static string TraceCodeSyndicationFeedWriteBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationFeedWriteBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication feed completed..
        /// </summary>
        internal static string TraceCodeSyndicationFeedWriteEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationFeedWriteEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication item started..
        /// </summary>
        internal static string TraceCodeSyndicationItemReadBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationItemReadBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication item completed..
        /// </summary>
        internal static string TraceCodeSyndicationItemReadEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationItemReadEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication item started..
        /// </summary>
        internal static string TraceCodeSyndicationItemWriteBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationItemWriteBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication item completed..
        /// </summary>
        internal static string TraceCodeSyndicationItemWriteEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationItemWriteEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syndication XML node of type &apos;{0}&apos; with name &apos;{1}&apos; and namespace &apos;{2}&apos; ignored on read..
        /// </summary>
        internal static string TraceCodeSyndicationProtocolElementIgnoredOnRead {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationProtocolElementIgnoredOnRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syndication element with name &apos;{0}&apos; and namespace &apos;{1}&apos; was not written..
        /// </summary>
        internal static string TraceCodeSyndicationProtocolElementIgnoredOnWrite {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationProtocolElementIgnoredOnWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syndication element with name &apos;{0}&apos; and namespace &apos;{1}&apos; is invalid..
        /// </summary>
        internal static string TraceCodeSyndicationProtocolElementInvalid {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationProtocolElementInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a categories document started..
        /// </summary>
        internal static string TraceCodeSyndicationReadCategoriesDocumentBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadCategoriesDocumentBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a categories document completed..
        /// </summary>
        internal static string TraceCodeSyndicationReadCategoriesDocumentEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadCategoriesDocumentEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication feed started..
        /// </summary>
        internal static string TraceCodeSyndicationReadFeedBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadFeedBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication feed completed..
        /// </summary>
        internal static string TraceCodeSyndicationReadFeedEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadFeedEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication item started..
        /// </summary>
        internal static string TraceCodeSyndicationReadItemBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadItemBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a syndication item completed..
        /// </summary>
        internal static string TraceCodeSyndicationReadItemEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadItemEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a service document started..
        /// </summary>
        internal static string TraceCodeSyndicationReadServiceDocumentBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadServiceDocumentBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading of a service document completed..
        /// </summary>
        internal static string TraceCodeSyndicationReadServiceDocumentEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationReadServiceDocumentEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a categories document started..
        /// </summary>
        internal static string TraceCodeSyndicationWriteCategoriesDocumentBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteCategoriesDocumentBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a categories document completed..
        /// </summary>
        internal static string TraceCodeSyndicationWriteCategoriesDocumentEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteCategoriesDocumentEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication feed started..
        /// </summary>
        internal static string TraceCodeSyndicationWriteFeedBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteFeedBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication feed completed..
        /// </summary>
        internal static string TraceCodeSyndicationWriteFeedEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteFeedEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication item started..
        /// </summary>
        internal static string TraceCodeSyndicationWriteItemBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteItemBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a syndication item completed..
        /// </summary>
        internal static string TraceCodeSyndicationWriteItemEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteItemEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a service document started..
        /// </summary>
        internal static string TraceCodeSyndicationWriteServiceDocumentBegin {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteServiceDocumentBegin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing of a service document completed..
        /// </summary>
        internal static string TraceCodeSyndicationWriteServiceDocumentEnd {
            get {
                return ResourceManager.GetString("TraceCodeSyndicationWriteServiceDocumentEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system&apos;s timer resolution was detected as {0} ticks, which is about {1} milliseconds..
        /// </summary>
        internal static string TraceCodeSystemTimeResolution {
            get {
                return ResourceManager.GetString("TraceCodeSystemTimeResolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received a message over TCP channel.
        /// </summary>
        internal static string TraceCodeTcpChannelMessageReceived {
            get {
                return ResourceManager.GetString("TraceCodeTcpChannelMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to receive a message over TCP channel.
        /// </summary>
        internal static string TraceCodeTcpChannelMessageReceiveFailed {
            get {
                return ResourceManager.GetString("TraceCodeTcpChannelMessageReceiveFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TCP connect operation failed..
        /// </summary>
        internal static string TraceCodeTcpConnectError {
            get {
                return ResourceManager.GetString("TraceCodeTcpConnectError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Listen at &apos;{0}&apos;..
        /// </summary>
        internal static string TraceCodeTransportListen {
            get {
                return ResourceManager.GetString("TraceCodeTransportListen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; was asynchronously aborted..
        /// </summary>
        internal static string TraceCodeTxAsyncAbort {
            get {
                return ResourceManager.GetString("TraceCodeTxAsyncAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; was aborted because it was uncompleted when the session was closed and the TransactionAutoCompleteOnSessionClose OperationBehaviorAttribute was set to false..
        /// </summary>
        internal static string TraceCodeTxCompletionStatusAbortedOnSessionClose {
            get {
                return ResourceManager.GetString("TraceCodeTxCompletionStatusAbortedOnSessionClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; for operation &apos;{1}&apos; was completed due to asynchronous abort..
        /// </summary>
        internal static string TraceCodeTxCompletionStatusCompletedForAsyncAbort {
            get {
                return ResourceManager.GetString("TraceCodeTxCompletionStatusCompletedForAsyncAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; for operation &apos;{1}&apos; was completed due to the TransactionAutoComplete OperationBehaviorAttribute member being set to true..
        /// </summary>
        internal static string TraceCodeTxCompletionStatusCompletedForAutocomplete {
            get {
                return ResourceManager.GetString("TraceCodeTxCompletionStatusCompletedForAutocomplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; for operation &apos;{1}&apos; was completed due to an unhandled execution exception..
        /// </summary>
        internal static string TraceCodeTxCompletionStatusCompletedForError {
            get {
                return ResourceManager.GetString("TraceCodeTxCompletionStatusCompletedForError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; for operation &apos;{1}&apos; was completed due to a call to SetTransactionComplete..
        /// </summary>
        internal static string TraceCodeTxCompletionStatusCompletedForSetComplete {
            get {
                return ResourceManager.GetString("TraceCodeTxCompletionStatusCompletedForSetComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; was completed when the session was closed due to the TransactionAutoCompleteOnSessionClose ServiceBehaviorAttribute member..
        /// </summary>
        internal static string TraceCodeTxCompletionStatusCompletedForTACOSC {
            get {
                return ResourceManager.GetString("TraceCodeTxCompletionStatusCompletedForTACOSC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; for operation &apos;{1}&apos; remains attached to the InstanceContext..
        /// </summary>
        internal static string TraceCodeTxCompletionStatusRemainsAttached {
            get {
                return ResourceManager.GetString("TraceCodeTxCompletionStatusRemainsAttached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OleTransactions protocol negotiation failed for coordination context &apos;{0}&apos;..
        /// </summary>
        internal static string TraceCodeTxFailedToNegotiateOleTx {
            get {
                return ResourceManager.GetString("TraceCodeTxFailedToNegotiateOleTx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service instance was released on the completion of the transaction &apos;{0}&apos; because the ReleaseServiceInstanceOnTransactionComplete ServiceBehaviorAttribute was set to true..
        /// </summary>
        internal static string TraceCodeTxReleaseServiceInstanceOnCompletion {
            get {
                return ResourceManager.GetString("TraceCodeTxReleaseServiceInstanceOnCompletion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; was received for operation &apos;{1}&apos; from an InstanceContext transaction..
        /// </summary>
        internal static string TraceCodeTxSourceTxScopeRequiredIsAttachedTransaction {
            get {
                return ResourceManager.GetString("TraceCodeTxSourceTxScopeRequiredIsAttachedTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; for operation &apos;{1}&apos; was newly created..
        /// </summary>
        internal static string TraceCodeTxSourceTxScopeRequiredIsCreateNewTransaction {
            get {
                return ResourceManager.GetString("TraceCodeTxSourceTxScopeRequiredIsCreateNewTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; was received for operation &apos;{1}&apos; from a transacted transport, such as MSMQ..
        /// </summary>
        internal static string TraceCodeTxSourceTxScopeRequiredIsTransactedTransport {
            get {
                return ResourceManager.GetString("TraceCodeTxSourceTxScopeRequiredIsTransactedTransport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction &apos;{0}&apos; was flowed to operation &apos;{1}&apos;..
        /// </summary>
        internal static string TraceCodeTxSourceTxScopeRequiredIsTransactionFlow {
            get {
                return ResourceManager.GetString("TraceCodeTxSourceTxScopeRequiredIsTransactionFlow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Existing transaction &apos;{0}&apos; being used for operation &apos;{1}&apos;..
        /// </summary>
        internal static string TraceCodeTxSourceTxScopeRequiredUsingExistingTransaction {
            get {
                return ResourceManager.GetString("TraceCodeTxSourceTxScopeRequiredUsingExistingTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Understood message header..
        /// </summary>
        internal static string TraceCodeUnderstoodMessageHeader {
            get {
                return ResourceManager.GetString("TraceCodeUnderstoodMessageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No service available to handle this action.
        /// </summary>
        internal static string TraceCodeUnhandledAction {
            get {
                return ResourceManager.GetString("TraceCodeUnhandledAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled exception in user operation &apos;{0}.{1}&apos;..
        /// </summary>
        internal static string TraceCodeUnhandledExceptionInUserOperation {
            get {
                return ResourceManager.GetString("TraceCodeUnhandledExceptionInUserOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceDebugBehavior Help Page is enabled at a relative address and cannot be created because there is no base address..
        /// </summary>
        internal static string TraceCodeWarnHelpPageEnabledNoBaseAddress {
            get {
                return ResourceManager.GetString("TraceCodeWarnHelpPageEnabledNoBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Webhost could not activate service.
        /// </summary>
        internal static string TraceCodeWebHostFailedToActivateService {
            get {
                return ResourceManager.GetString("TraceCodeWebHostFailedToActivateService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Webhost couldn&apos;t compile service.
        /// </summary>
        internal static string TraceCodeWebHostFailedToCompile {
            get {
                return ResourceManager.GetString("TraceCodeWebHostFailedToCompile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incoming HTTP request with URI &apos;{0}&apos; does not match any operation..
        /// </summary>
        internal static string TraceCodeWebRequestDoesNotMatchOperations {
            get {
                return ResourceManager.GetString("TraceCodeWebRequestDoesNotMatchOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incoming HTTP request with URI &apos;{0}&apos; matched operation &apos;{1}&apos;..
        /// </summary>
        internal static string TraceCodeWebRequestMatchesOperation {
            get {
                return ResourceManager.GetString("TraceCodeWebRequestMatchesOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP query string parameter with name &apos;{0}&apos; was ignored..
        /// </summary>
        internal static string TraceCodeWebUnknownQueryParameterIgnored {
            get {
                return ResourceManager.GetString("TraceCodeWebUnknownQueryParameterIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting a value via WMI..
        /// </summary>
        internal static string TraceCodeWmiPut {
            get {
                return ResourceManager.GetString("TraceCodeWmiPut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowDurableInstance aborted..
        /// </summary>
        internal static string TraceCodeWorkflowDurableInstanceAborted {
            get {
                return ResourceManager.GetString("TraceCodeWorkflowDurableInstanceAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowDurableInstance &apos;{0}&apos; activated..
        /// </summary>
        internal static string TraceCodeWorkflowDurableInstanceActivated {
            get {
                return ResourceManager.GetString("TraceCodeWorkflowDurableInstanceActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowDurableInstance &apos;{0}&apos; loaded..
        /// </summary>
        internal static string TraceCodeWorkflowDurableInstanceLoaded {
            get {
                return ResourceManager.GetString("TraceCodeWorkflowDurableInstanceLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Work item enqueued..
        /// </summary>
        internal static string TraceCodeWorkflowOperationInvokerItemQueued {
            get {
                return ResourceManager.GetString("TraceCodeWorkflowOperationInvokerItemQueued", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fault Sent for InstanceId {0}..
        /// </summary>
        internal static string TraceCodeWorkflowRequestContextFaultSent {
            get {
                return ResourceManager.GetString("TraceCodeWorkflowRequestContextFaultSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reply sent for InstanceId {0}..
        /// </summary>
        internal static string TraceCodeWorkflowRequestContextReplySent {
            get {
                return ResourceManager.GetString("TraceCodeWorkflowRequestContextReplySent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowServiceHost created..
        /// </summary>
        internal static string TraceCodeWorkflowServiceHostCreated {
            get {
                return ResourceManager.GetString("TraceCodeWorkflowServiceHostCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A non-critical error or warning occurred during WSDL Export.
        /// </summary>
        internal static string TraceCodeWsmexNonCriticalWsdlExportError {
            get {
                return ResourceManager.GetString("TraceCodeWsmexNonCriticalWsdlExportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A non-critical error or warning occurred in the MetadataExchangeClient during WSDL Import This could result in some endpoints not being imported..
        /// </summary>
        internal static string TraceCodeWsmexNonCriticalWsdlImportError {
            get {
                return ResourceManager.GetString("TraceCodeWsmexNonCriticalWsdlImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid create sequence message was received..
        /// </summary>
        internal static string TraceCodeWsrmInvalidCreateSequence {
            get {
                return ResourceManager.GetString("TraceCodeWsrmInvalidCreateSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid WS-RM message was received..
        /// </summary>
        internal static string TraceCodeWsrmInvalidMessage {
            get {
                return ResourceManager.GetString("TraceCodeWsrmInvalidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incoming create sequence request was rejected because the maximum pending channel count was reached..
        /// </summary>
        internal static string TraceCodeWsrmMaxPendingChannelsReached {
            get {
                return ResourceManager.GetString("TraceCodeWsrmMaxPendingChannelsReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A message in a WS-RM sequence has been dropped because it could not be buffered..
        /// </summary>
        internal static string TraceCodeWsrmMessageDropped {
            get {
                return ResourceManager.GetString("TraceCodeWsrmMessageDropped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reliable session infrastructure detected a system clock change. This will temporarily result in a less optimal message retry strategy..
        /// </summary>
        internal static string TraceCodeWsrmNegativeElapsedTimeDetected {
            get {
                return ResourceManager.GetString("TraceCodeWsrmNegativeElapsedTimeDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WS-RM SequenceAcknowledgement received..
        /// </summary>
        internal static string TraceCodeWsrmReceiveAcknowledgement {
            get {
                return ResourceManager.GetString("TraceCodeWsrmReceiveAcknowledgement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WS-RM Last Sequence message received..
        /// </summary>
        internal static string TraceCodeWsrmReceiveLastSequenceMessage {
            get {
                return ResourceManager.GetString("TraceCodeWsrmReceiveLastSequenceMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WS-RM Sequence message received..
        /// </summary>
        internal static string TraceCodeWsrmReceiveSequenceMessage {
            get {
                return ResourceManager.GetString("TraceCodeWsrmReceiveSequenceMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WS-RM SequenceAcknowledgement sent..
        /// </summary>
        internal static string TraceCodeWsrmSendAcknowledgement {
            get {
                return ResourceManager.GetString("TraceCodeWsrmSendAcknowledgement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WS-RM Last Sequence message sent..
        /// </summary>
        internal static string TraceCodeWsrmSendLastSequenceMessage {
            get {
                return ResourceManager.GetString("TraceCodeWsrmSendLastSequenceMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WS-RM Sequence message sent..
        /// </summary>
        internal static string TraceCodeWsrmSendSequenceMessage {
            get {
                return ResourceManager.GetString("TraceCodeWsrmSendSequenceMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A WS-RM sequence has faulted..
        /// </summary>
        internal static string TraceCodeWsrmSequenceFaulted {
            get {
                return ResourceManager.GetString("TraceCodeWsrmSequenceFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnAuthorizeRequest Failed..
        /// </summary>
        internal static string TraceOnAuthorizeRequestFailed {
            get {
                return ResourceManager.GetString("TraceOnAuthorizeRequestFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnAuthorizeRequest Succeeded..
        /// </summary>
        internal static string TraceOnAuthorizeRequestSucceed {
            get {
                return ResourceManager.GetString("TraceOnAuthorizeRequestSucceed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid TransactionFlowOption value..
        /// </summary>
        internal static string TransactionFlowBadOption {
            get {
                return ResourceManager.GetString("TransactionFlowBadOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to flow a transaction, flowing issued tokens must also be supported..
        /// </summary>
        internal static string TransactionFlowRequiredIssuedTokens {
            get {
                return ResourceManager.GetString("TransactionFlowRequiredIssuedTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transfer mode {0} is not supported by {1}..
        /// </summary>
        internal static string TransferModeNotSupported {
            get {
                return ResourceManager.GetString("TransferModeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transferring to ComPlus logical thread {0}..
        /// </summary>
        internal static string TransferringToComplus {
            get {
                return ResourceManager.GetString("TransferringToComplus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In Binding &apos;{0}&apos;, TransportBindingElement &apos;{1}&apos; does not appear last in the BindingElementCollection.  Please change the order of elements such that the TransportBindingElement is last..
        /// </summary>
        internal static string TransportBindingElementMustBeLast {
            get {
                return ResourceManager.GetString("TransportBindingElementMustBeLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding does not contain a TransportBindingElement..
        /// </summary>
        internal static string TransportBindingElementNotFound {
            get {
                return ResourceManager.GetString("TransportBindingElementNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos;.&apos;{1}&apos; binding for the &apos;{2}&apos;.&apos;{3}&apos; contract is configured with an authentication mode that requires transport level integrity and confidentiality. However the transport cannot provide integrity and confidentiality..
        /// </summary>
        internal static string TransportDoesNotProtectMessage {
            get {
                return ResourceManager.GetString("TransportDoesNotProtectMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport configured on this binding does not appear to support the CompressionFormat specified ({0}) on the message encoder.  To resolve this issue, set the CompressionFormat on the {1} to &apos;{2}&apos; or use a different transport..
        /// </summary>
        internal static string TransportDoesNotSupportCompression {
            get {
                return ResourceManager.GetString("TransportDoesNotSupportCompression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is only valid after the transport manager has been opened..
        /// </summary>
        internal static string TransportManagerNotOpen {
            get {
                return ResourceManager.GetString("TransportManagerNotOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property cannot be changed after the transport manager has been opened..
        /// </summary>
        internal static string TransportManagerOpen {
            get {
                return ResourceManager.GetString("TransportManagerOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one &apos;To&apos; header specified in a message secured by Transport Security..
        /// </summary>
        internal static string TransportSecuredMessageHasMoreThanOneToHeader {
            get {
                return ResourceManager.GetString("TransportSecuredMessageHasMoreThanOneToHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message received over Transport security was missing the &apos;To&apos; header..
        /// </summary>
        internal static string TransportSecuredMessageMissingToHeader {
            get {
                return ResourceManager.GetString("TransportSecuredMessageMissingToHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport secured messages should have the &apos;To&apos; header specified..
        /// </summary>
        internal static string TransportSecurityRequireToHeader {
            get {
                return ResourceManager.GetString("TransportSecurityRequireToHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create Attached or Unattached reference for &apos;{0}&apos;..
        /// </summary>
        internal static string TrustDriverIsUnableToCreatedNecessaryAttachedOrUnattachedReferences {
            get {
                return ResourceManager.GetString("TrustDriverIsUnableToCreatedNecessaryAttachedOrUnattachedReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured WS-Trust version does not support issued tokens. WS-Trust February 2005 or later is required..
        /// </summary>
        internal static string TrustDriverVersionDoesNotSupportIssuedTokens {
            get {
                return ResourceManager.GetString("TrustDriverVersionDoesNotSupportIssuedTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured Trust version does not support sessions. Use WSTrustFeb2005 or above..
        /// </summary>
        internal static string TrustDriverVersionDoesNotSupportSession {
            get {
                return ResourceManager.GetString("TrustDriverVersionDoesNotSupportSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not establish trust relationship for the SSL/TLS secure channel with authority &apos;{0}&apos;..
        /// </summary>
        internal static string TrustFailure {
            get {
                return ResourceManager.GetString("TrustFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type load for contract interface ID {0} failed with Error:{1}..
        /// </summary>
        internal static string TypeLoadForContractTypeIIDFailedWith {
            get {
                return ResourceManager.GetString("TypeLoadForContractTypeIIDFailedWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; user-defined type could not be found. Ensure that the correct type and type library are registered and specified..
        /// </summary>
        internal static string UdtNotFoundInAssembly {
            get {
                return ResourceManager.GetString("UdtNotFoundInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an ICrypto interface from the &apos;{0}&apos; token for signature verification..
        /// </summary>
        internal static string UnableToCreateICryptoFromTokenForSignatureVerification {
            get {
                return ResourceManager.GetString("UnableToCreateICryptoFromTokenForSignatureVerification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create Key Type element for the Key Type &apos;{0}&apos;. This might be due to a wrong version of MessageSecurityVersion set on the SecurityBindingElement..
        /// </summary>
        internal static string UnableToCreateKeyTypeElementForUnknownKeyType {
            get {
                return ResourceManager.GetString("UnableToCreateKeyTypeElementForUnknownKeyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the &apos;{0}&apos; symmetric algorithm from the token..
        /// </summary>
        internal static string UnableToCreateSymmetricAlgorithmFromToken {
            get {
                return ResourceManager.GetString("UnableToCreateSymmetricAlgorithmFromToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create token reference..
        /// </summary>
        internal static string UnableToCreateTokenReference {
            get {
                return ResourceManager.GetString("UnableToCreateTokenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no channel that could accept the message with action &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToDemuxChannel {
            get {
                return ResourceManager.GetString("UnableToDemuxChannel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KeyInfo clause &apos;{0}&apos; resolved to token &apos;{1}&apos;, which does not contain a Symmetric key that can be used for derivation..
        /// </summary>
        internal static string UnableToDeriveKeyFromKeyInfoClause {
            get {
                return ResourceManager.GetString("UnableToDeriveKeyFromKeyInfoClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy reference was ignored because the policy with ID &apos;{0}&apos; could not be found..
        /// </summary>
        internal static string UnableToFindPolicyWithId {
            get {
                return ResourceManager.GetString("UnableToFindPolicyWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security processor was unable to find a security header with actor &apos;{0}&apos; in the message. This might be because the message is an unsecured fault or because there is a binding mismatch between the communicating parties.  This can occur if the service is configured for security and the client is not using security..
        /// </summary>
        internal static string UnableToFindSecurityHeaderInMessage {
            get {
                return ResourceManager.GetString("UnableToFindSecurityHeaderInMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security processor was unable to find a security header in the message. This might be because the message is an unsecured fault or because there is a binding mismatch between the communicating parties.   This can occur if the service is configured for security and the client is not using security..
        /// </summary>
        internal static string UnableToFindSecurityHeaderInMessageNoActor {
            get {
                return ResourceManager.GetString("UnableToFindSecurityHeaderInMessageNoActor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find a token authenticator for the &apos;{0}&apos; token type. Tokens of that type cannot be accepted according to current security settings..
        /// </summary>
        internal static string UnableToFindTokenAuthenticator {
            get {
                return ResourceManager.GetString("UnableToFindTokenAuthenticator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to impersonate client identity during serialization of the response message..
        /// </summary>
        internal static string UnableToImpersonateWhileSerializingReponse {
            get {
                return ResourceManager.GetString("UnableToImpersonateWhileSerializingReponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following Policy Assertions were not Imported:
        ///.
        /// </summary>
        internal static string UnabletoImportPolicy {
            get {
                return ResourceManager.GetString("UnabletoImportPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load the X.509 certificate identity specified in the configuration..
        /// </summary>
        internal static string UnableToLoadCertificateIdentity {
            get {
                return ResourceManager.GetString("UnableToLoadCertificateIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load library {0}. Ensure that WCF is properly installed..
        /// </summary>
        internal static string UnableToLoadDll {
            get {
                return ResourceManager.GetString("UnableToLoadDll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot locate operation {0} in Contract {1}..
        /// </summary>
        internal static string UnableToLocateOperation2 {
            get {
                return ResourceManager.GetString("UnableToLocateOperation2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obtaining metadata from issuer &apos;{0}&apos; failed with error &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToObtainIssuerMetadata {
            get {
                return ResourceManager.GetString("UnableToObtainIssuerMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot renew the security session key..
        /// </summary>
        internal static string UnableToRenewSessionKey {
            get {
                return ResourceManager.GetString("UnableToRenewSessionKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data reference &apos;{0}&apos; could not be resolved in the received message..
        /// </summary>
        internal static string UnableToResolveDataReference {
            get {
                return ResourceManager.GetString("UnableToResolveDataReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve the host name of URI &quot;{0}&quot; using DNS..
        /// </summary>
        internal static string UnableToResolveHost {
            get {
                return ResourceManager.GetString("UnableToResolveHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve KeyInfo in derived key token for resolving source token: KeyInfoClause &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToResolveKeyInfoClauseInDerivedKeyToken {
            get {
                return ResourceManager.GetString("UnableToResolveKeyInfoClauseInDerivedKeyToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve KeyInfo for decryption: KeyInfo &apos;{0}&apos;, available tokens &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToResolveKeyInfoForDecryption {
            get {
                return ResourceManager.GetString("UnableToResolveKeyInfoForDecryption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve KeyInfo for unwrapping key: KeyInfo &apos;{0}&apos;, available tokens &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToResolveKeyInfoForUnwrappingToken {
            get {
                return ResourceManager.GetString("UnableToResolveKeyInfoForUnwrappingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve KeyInfo for verifying signature: KeyInfo &apos;{0}&apos;, available tokens &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToResolveKeyInfoForVerifyingSignature {
            get {
                return ResourceManager.GetString("UnableToResolveKeyInfoForVerifyingSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve reference URI &apos;{0}&apos; in signature to compute digest..
        /// </summary>
        internal static string UnableToResolveReferenceUriForSignature {
            get {
                return ResourceManager.GetString("UnableToResolveReferenceUriForSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to retrieve IUnknown for object..
        /// </summary>
        internal static string UnableToRetrievepUnk {
            get {
                return ResourceManager.GetString("UnableToRetrievepUnk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unbound prefix used in qualified name &apos;{0}&apos;..
        /// </summary>
        internal static string UnboundPrefixInQName {
            get {
                return ResourceManager.GetString("UnboundPrefixInQName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A feed containing items that are not buffered (i.e. the items are not stored in an IList) cannot clone its items. Buffer the items in the feed before calling Clone on it or pass false to the Clone method..
        /// </summary>
        internal static string UnbufferedItemsCannotBeCloned {
            get {
                return ResourceManager.GetString("UnbufferedItemsCannotBeCloned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected ack. Simplex servers do not process acks..
        /// </summary>
        internal static string UnexpectedAcknowledgement {
            get {
                return ResourceManager.GetString("UnexpectedAcknowledgement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected request for an ack. Simplex clients do not send acks and do not process requests for acks..
        /// </summary>
        internal static string UnexpectedAckRequested {
            get {
                return ResourceManager.GetString("UnexpectedAckRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected binary secret of type {0} but got secret of type {1}..
        /// </summary>
        internal static string UnexpectedBinarySecretType {
            get {
                return ResourceManager.GetString("UnexpectedBinarySecretType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected close sequence message. Simplex clients do not process this message..
        /// </summary>
        internal static string UnexpectedCloseSequence {
            get {
                return ResourceManager.GetString("UnexpectedCloseSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected close sequence response message. Simplex servers do not process this message..
        /// </summary>
        internal static string UnexpectedCloseSequenceResponse {
            get {
                return ResourceManager.GetString("UnexpectedCloseSequenceResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected request to create a sequence. Clients do not process requests for a sequence..
        /// </summary>
        internal static string UnexpectedCS {
            get {
                return ResourceManager.GetString("UnexpectedCS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent inconsistent requests to create the same sequence. The OfferId values are not identical..
        /// </summary>
        internal static string UnexpectedCSOfferId {
            get {
                return ResourceManager.GetString("UnexpectedCSOfferId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected create sequence response. Servers do not process this message..
        /// </summary>
        internal static string UnexpectedCSR {
            get {
                return ResourceManager.GetString("UnexpectedCSR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent inconsistent responses to the same create sequence request. The sequence identifiers are not identical..
        /// </summary>
        internal static string UnexpectedCSROfferId {
            get {
                return ResourceManager.GetString("UnexpectedCSROfferId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; from namespace &apos;{1}&apos; is not expected to appear more than once.
        /// </summary>
        internal static string UnexpectedDuplicateElement {
            get {
                return ResourceManager.GetString("UnexpectedDuplicateElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; from namespace &apos;{1}&apos; is not expected. Expecting element &apos;{2}&apos; from namespace &apos;{3}&apos;.
        /// </summary>
        internal static string UnexpectedElementExpectingElement {
            get {
                return ResourceManager.GetString("UnexpectedElementExpectingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; from the &apos;{1}&apos; namespace is empty and does not specify a valid identity claim. .
        /// </summary>
        internal static string UnexpectedEmptyElementExpectingClaim {
            get {
                return ResourceManager.GetString("UnexpectedEmptyElementExpectingClaim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected encrypted element in security header..
        /// </summary>
        internal static string UnexpectedEncryptedElementInSecurityHeader {
            get {
                return ResourceManager.GetString("UnexpectedEncryptedElementInSecurityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected end of file..
        /// </summary>
        internal static string UnexpectedEndOfFile {
            get {
                return ResourceManager.GetString("UnexpectedEndOfFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote server returned an unexpected response: ({0}) {1}..
        /// </summary>
        internal static string UnexpectedHttpResponseCode {
            get {
                return ResourceManager.GetString("UnexpectedHttpResponseCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session received an unexpected close from the other party..
        /// </summary>
        internal static string UnexpectedSecuritySessionClose {
            get {
                return ResourceManager.GetString("UnexpectedSecuritySessionClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security session received an unexpected close response from the other party..
        /// </summary>
        internal static string UnexpectedSecuritySessionCloseResponse {
            get {
                return ResourceManager.GetString("UnexpectedSecuritySessionCloseResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection was not accepted because the SecurityContext contained tokens that do not match the current security settings..
        /// </summary>
        internal static string UnexpectedSecurityTokensDuringHandshake {
            get {
                return ResourceManager.GetString("UnexpectedSecurityTokensDuringHandshake", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected terminate sequence message. Simplex clients do not process this message..
        /// </summary>
        internal static string UnexpectedTerminateSequence {
            get {
                return ResourceManager.GetString("UnexpectedTerminateSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent an unexpected terminate sequence response message. Simplex servers do not process this message..
        /// </summary>
        internal static string UnexpectedTerminateSequenceResponse {
            get {
                return ResourceManager.GetString("UnexpectedTerminateSequenceResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected threading model. WCF/COM+ integration only supports STA and MTA threading models..
        /// </summary>
        internal static string UnexpectedThreadingModel {
            get {
                return ResourceManager.GetString("UnexpectedThreadingModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML child node {0} of type {1} is unexpected for element {2}..
        /// </summary>
        internal static string UnexpectedXmlChildNode {
            get {
                return ResourceManager.GetString("UnexpectedXmlChildNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   XPath:{0}
        ///  Assertions:.
        /// </summary>
        internal static string UnImportedAssertionList {
            get {
                return ResourceManager.GetString("UnImportedAssertionList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find a unique port number that is available for both IPv4 and IPv6..
        /// </summary>
        internal static string UniquePortNotAvailable {
            get {
                return ResourceManager.GetString("UniquePortNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The computed key algorithm &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnknownComputedKeyAlgorithm {
            get {
                return ResourceManager.GetString("UnknownComputedKeyAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element with name &apos;{0}&apos; and namespace &apos;{1}&apos; is not an allowed document format..
        /// </summary>
        internal static string UnknownDocumentXml {
            get {
                return ResourceManager.GetString("UnknownDocumentXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized encoding occurred while reading the binary security token..
        /// </summary>
        internal static string UnknownEncodingInBinarySecurityToken {
            get {
                return ResourceManager.GetString("UnknownEncodingInBinarySecurityToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element with name &apos;{0}&apos; and namespace &apos;{1}&apos; is not an allowed feed format..
        /// </summary>
        internal static string UnknownFeedXml {
            get {
                return ResourceManager.GetString("UnknownFeedXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown filter type: &apos;{0}&apos;..
        /// </summary>
        internal static string UnknownFilterType {
            get {
                return ResourceManager.GetString("UnknownFilterType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract (&apos;{0}&apos;,&apos;{1}&apos;) contains some unknown header (&apos;{2}&apos;,&apos;{3}&apos;) which cannot be secured. Please choose ProtectionLevel.None for this header.   .
        /// </summary>
        internal static string UnknownHeaderCannotProtected {
            get {
                return ResourceManager.GetString("UnknownHeaderCannotProtected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ICrypto implementation &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnknownICryptoType {
            get {
                return ResourceManager.GetString("UnknownICryptoType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element with name &apos;{0}&apos; and namespace &apos;{1}&apos; is not an allowed item format..
        /// </summary>
        internal static string UnknownItemXml {
            get {
                return ResourceManager.GetString("UnknownItemXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The listener at Uri &apos;{0}&apos; could not be initialized because it was created for an unrecognized channel type..
        /// </summary>
        internal static string UnknownListenerType1 {
            get {
                return ResourceManager.GetString("UnknownListenerType1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find keyword {0}..
        /// </summary>
        internal static string UnknownMonikerKeyword {
            get {
                return ResourceManager.GetString("UnknownMonikerKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of wsrm:Identifier is not a known Sequence identifier..
        /// </summary>
        internal static string UnknownSequenceFaultReason {
            get {
                return ResourceManager.GetString("UnknownSequenceFaultReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint no longer recognizes this sequence. This is most likely due to an abort on the remote endpoint. {0} The reliable session was faulted..
        /// </summary>
        internal static string UnknownSequenceFaultReceived {
            get {
                return ResourceManager.GetString("UnknownSequenceFaultReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint has sent a message containing an unrecognized sequence identifier. The reliable session was faulted..
        /// </summary>
        internal static string UnknownSequenceMessageReceived {
            get {
                return ResourceManager.GetString("UnknownSequenceMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized supporting token &apos;{0}&apos; was encountered..
        /// </summary>
        internal static string UnknownSupportingToken {
            get {
                return ResourceManager.GetString("UnknownSupportingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown token attachment mode: {0}..
        /// </summary>
        internal static string UnknownTokenAttachmentMode {
            get {
                return ResourceManager.GetString("UnknownTokenAttachmentMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecognized token authenticator &apos;{0}&apos; was used for token processing..
        /// </summary>
        internal static string UnknownTokenAuthenticatorUsedInTokenProcessing {
            get {
                return ResourceManager.GetString("UnknownTokenAuthenticatorUsedInTokenProcessing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecognized WSDL extension of Type &apos;{0}&apos; was not handled..
        /// </summary>
        internal static string UnknownWSDLExtensionIgnored {
            get {
                return ResourceManager.GetString("UnknownWSDLExtensionIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-AtomicTransaction protocol service could not unmarshal the flowed transaction. The following exception occured: {0}.
        /// </summary>
        internal static string UnmarshalTransactionFaulted {
            get {
                return ResourceManager.GetString("UnmarshalTransactionFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint replied to the request for a sequence with a response that could not be parsed. See inner exception for details. The channel could not be opened..
        /// </summary>
        internal static string UnparsableCSResponse {
            get {
                return ResourceManager.GetString("UnparsableCSResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WsdlImporter encountered unrecognized policy assertions in ServiceDescription &apos;{0}&apos;:.
        /// </summary>
        internal static string UnrecognizedBindingAssertions1 {
            get {
                return ResourceManager.GetString("UnrecognizedBindingAssertions1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ClaimType &apos;{0}&apos; is not recognized. Expected ClaimType &apos;{1}&apos;..
        /// </summary>
        internal static string UnrecognizedClaimTypeForIdentity {
            get {
                return ResourceManager.GetString("UnrecognizedClaimTypeForIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint has sent an unrecognized fault with namespace, {0}, name {1}, and reason {2}. The reliable session was faulted..
        /// </summary>
        internal static string UnrecognizedFaultReceived {
            get {
                return ResourceManager.GetString("UnrecognizedFaultReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint has sent an unrecognized fault with namespace, {0}, name {1}, and reason {2}. The channel could not be opened..
        /// </summary>
        internal static string UnrecognizedFaultReceivedOnOpen {
            get {
                return ResourceManager.GetString("UnrecognizedFaultReceivedOnOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid HostNameComparisonMode value: {0}..
        /// </summary>
        internal static string UnrecognizedHostNameComparisonMode {
            get {
                return ResourceManager.GetString("UnrecognizedHostNameComparisonMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized identity property type: &apos;{0}&apos;..
        /// </summary>
        internal static string UnrecognizedIdentityPropertyType {
            get {
                return ResourceManager.GetString("UnrecognizedIdentityPropertyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized identity type Name=&apos;{0}&apos;, Namespace=&apos;{1}&apos;..
        /// </summary>
        internal static string UnrecognizedIdentityType {
            get {
                return ResourceManager.GetString("UnrecognizedIdentityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;{0}&quot; namespace is not a recognized WS-Policy namespace..
        /// </summary>
        internal static string UnrecognizedPolicyDocumentNamespace {
            get {
                return ResourceManager.GetString("UnrecognizedPolicyDocumentNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized policy element {0} in namespace {1}..
        /// </summary>
        internal static string UnrecognizedPolicyElementInNamespace {
            get {
                return ResourceManager.GetString("UnrecognizedPolicyElementInNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unsecured or incorrectly secured fault was received from the other party. See the inner FaultException for the fault code and detail..
        /// </summary>
        internal static string UnsecuredMessageFaultReceived {
            get {
                return ResourceManager.GetString("UnsecuredMessageFaultReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message received over Transport security has unsigned &apos;To&apos; header..
        /// </summary>
        internal static string UnsignedToHeaderInTransportSecuredMessage {
            get {
                return ResourceManager.GetString("UnsignedToHeaderInTransportSecuredMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binary encoding {0} is not supported..
        /// </summary>
        internal static string UnsupportedBinaryEncoding {
            get {
                return ResourceManager.GetString("UnsupportedBinaryEncoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; binding element does not support cloning..
        /// </summary>
        internal static string UnsupportedBindingElementClone {
            get {
                return ResourceManager.GetString("UnsupportedBindingElementClone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{1}&apos; is not supported in this context for the binding property &apos;{0}&apos;..
        /// </summary>
        internal static string UnsupportedBindingProperty {
            get {
                return ResourceManager.GetString("UnsupportedBindingProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import the policy. The value of the attribute &apos;{0}&apos; must be either &apos;true&apos;, &apos;false&apos;, &apos;1&apos; or &apos;0&apos;. The following error occurred: &apos;{1}&apos;..
        /// </summary>
        internal static string UnsupportedBooleanAttribute {
            get {
                return ResourceManager.GetString("UnsupportedBooleanAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Canonicalization algorithm &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnsupportedCanonicalizationAlgorithm {
            get {
                return ResourceManager.GetString("UnsupportedCanonicalizationAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Channel interface type &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnsupportedChannelInterfaceType {
            get {
                return ResourceManager.GetString("UnsupportedChannelInterfaceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint closed the sequence before message transfer was complete. This is not supported since all messages could not be transferred. The reliable session was faulted..
        /// </summary>
        internal static string UnsupportedCloseExceptionString {
            get {
                return ResourceManager.GetString("UnsupportedCloseExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The conversion between the client parameter type &apos;{0}&apos; to the required server parameter type &apos;{1}&apos; cannot be performed..
        /// </summary>
        internal static string UnsupportedConversion {
            get {
                return ResourceManager.GetString("UnsupportedConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Crypto algorithm {0} not supported in this context..
        /// </summary>
        internal static string UnsupportedCryptoAlgorithm {
            get {
                return ResourceManager.GetString("UnsupportedCryptoAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} binding element requires envelope version &apos;{1}&apos; It doesn&apos;t support &apos;{2}&apos;..
        /// </summary>
        internal static string UnsupportedEnvelopeVersion {
            get {
                return ResourceManager.GetString("UnsupportedEnvelopeVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issuer entropy is not BinarySecretSecurityToken or WrappedKeySecurityToken..
        /// </summary>
        internal static string UnsupportedIssuerEntropyType {
            get {
                return ResourceManager.GetString("UnsupportedIssuerEntropyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key derivation algorithm &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnsupportedKeyDerivationAlgorithm {
            get {
                return ResourceManager.GetString("UnsupportedKeyDerivationAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Symmetric Key length {0} is not supported by the algorithm suite &apos;{1}&apos;..
        /// </summary>
        internal static string UnsupportedKeyLength {
            get {
                return ResourceManager.GetString("UnsupportedKeyLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} is not a supported result type..
        /// </summary>
        internal static string UnsupportedMessageQueryResultType {
            get {
                return ResourceManager.GetString("UnsupportedMessageQueryResultType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; username token has an unsupported password type..
        /// </summary>
        internal static string UnsupportedPasswordType {
            get {
                return ResourceManager.GetString("UnsupportedPasswordType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a supported WS-Policy document root element..
        /// </summary>
        internal static string UnsupportedPolicyDocumentRoot {
            get {
                return ResourceManager.GetString("UnsupportedPolicyDocumentRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Rss20Serializer does not support RSS version &apos;{0}&apos;..
        /// </summary>
        internal static string UnsupportedRssVersion {
            get {
                return ResourceManager.GetString("UnsupportedRssVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import the security policy. The protection requirements for the secure conversation bootstrap binding are not supported. Protection requirements for the secure conversation bootstrap must require both the request and the response to be signed and encrypted..
        /// </summary>
        internal static string UnsupportedSecureConversationBootstrapProtectionRequirements {
            get {
                return ResourceManager.GetString("UnsupportedSecureConversationBootstrapProtectionRequirements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unsupported security policy assertion was detected during the security policy import: {0}.
        /// </summary>
        internal static string UnsupportedSecurityPolicyAssertion {
            get {
                return ResourceManager.GetString("UnsupportedSecurityPolicyAssertion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{1}&apos; is not supported in this context for the binding security property &apos;{0}&apos;..
        /// </summary>
        internal static string UnsupportedSecuritySetting {
            get {
                return ResourceManager.GetString("UnsupportedSecuritySetting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protection level &apos;{0}&apos; was specified, yet SSL transport security only supports EncryptAndSign..
        /// </summary>
        internal static string UnsupportedSslProtectionLevel {
            get {
                return ResourceManager.GetString("UnsupportedSslProtectionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint terminated the sequence before message transfer was complete. This is not supported since all messages could not be transferred. The reliable session was faulted..
        /// </summary>
        internal static string UnsupportedTerminateSequenceExceptionString {
            get {
                return ResourceManager.GetString("UnsupportedTerminateSequenceExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{1}&apos; for the &apos;{0}&apos; property is not supported in Windows Store apps..
        /// </summary>
        internal static string UnsupportedTokenImpersonationLevel {
            get {
                return ResourceManager.GetString("UnsupportedTokenImpersonationLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token inclusion mode &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnsupportedTokenInclusionMode {
            get {
                return ResourceManager.GetString("UnsupportedTokenInclusionMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TrustVersion &apos;{0}&apos;, is not supported, only &apos;TrustVersion.WSTrust13&apos; and &apos;TrustVersion.WSTrustFeb2005&apos; is supported..
        /// </summary>
        internal static string UnsupportedTrustVersion {
            get {
                return ResourceManager.GetString("UnsupportedTrustVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The StreamUpgradeAcceptor specified ({0}) is not supported by this IStreamUpgradeChannelBindingProvider  implementation.  The most likely cause of this is passing a StreamUpgradeAcceptor that was not created by the StreamUpgradeProvider associated with this IStreamUpgradeChannelBindingProvider  implementation..
        /// </summary>
        internal static string UnsupportedUpgradeAcceptor {
            get {
                return ResourceManager.GetString("UnsupportedUpgradeAcceptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The StreamUpgradeInitiator specified ({0}) is not supported by this IStreamUpgradeChannelBindingProvider  implementation.  The most likely cause of this is passing a StreamUpgradeInitiator that was not created by the StreamUpgradeProvider associated with the current IStreamUpgradeChannelBindingProvider  implementation..
        /// </summary>
        internal static string UnsupportedUpgradeInitiator {
            get {
                return ResourceManager.GetString("UnsupportedUpgradeInitiator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported WSDL, only one message part is supported for fault messages. This fault message references zero or more than one message part. If you have edit access to the WSDL file, you can fix the problem by removing the extra message parts such that fault message references just one part..
        /// </summary>
        internal static string UnsupportedWSDLOnlyOneMessage {
            get {
                return ResourceManager.GetString("UnsupportedWSDLOnlyOneMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported WSDL, the fault message part must reference an element. This fault message does not reference an element. If you have edit access to the WSDL document, you can fix the problem by referencing a schema element using the &apos;element&apos; attribute..
        /// </summary>
        internal static string UnsupportedWSDLTheFault {
            get {
                return ResourceManager.GetString("UnsupportedWSDLTheFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Protocol Type {0} was sent to a service that does not support that type of upgrade..
        /// </summary>
        internal static string UpgradeProtocolNotSupported {
            get {
                return ResourceManager.GetString("UpgradeProtocolNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .Net Framing upgrade request for {0} was sent to a service that is not setup to receive upgrades..
        /// </summary>
        internal static string UpgradeRequestToNonupgradableService {
            get {
                return ResourceManager.GetString("UpgradeRequestToNonupgradableService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The scheme parameter must not be empty..
        /// </summary>
        internal static string UriGeneratorSchemeMustNotBeEmpty {
            get {
                return ResourceManager.GetString("UriGeneratorSchemeMustNotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to URI {0} could not be set because its size ({1}) exceeds the max supported size ({2})..
        /// </summary>
        internal static string UriLengthExceedsMaxSupportedSize {
            get {
                return ResourceManager.GetString("UriLengthExceedsMaxSupportedSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given URI must be absolute..
        /// </summary>
        internal static string UriMustBeAbsolute {
            get {
                return ResourceManager.GetString("UriMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot specify an explicit Proxy Address as well as UseDefaultWebProxy=true in your HTTP Transport Binding Element..
        /// </summary>
        internal static string UseDefaultWebProxyCantBeUsedWithExplicitProxyAddress {
            get {
                return ResourceManager.GetString("UseDefaultWebProxyCantBeUsedWithExplicitProxyAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The username is not provided. Specify username in ClientCredentials..
        /// </summary>
        internal static string UserNamePasswordNotProvidedOnClientCredentials {
            get {
                return ResourceManager.GetString("UserNamePasswordNotProvidedOnClientCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changing an inline default value with information from the additional default values is not supported; the default value to the variable &apos;{0}&apos; was already provided as part of the UriTemplate &apos;{1}&apos;. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTAdditionalDefaultIsInvalid {
            get {
                return ResourceManager.GetString("UTAdditionalDefaultIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to baseAddress must an absolute Uri..
        /// </summary>
        internal static string UTBadBaseAddress {
            get {
                return ResourceManager.GetString("UTBadBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BindByName method of UriTemplate was called with an empty name in the collection of arguments for the bind. Note that the NameValueCollection or the Dictionary passed to BindByName cannot contain an empty (or null) name as a key. See the documentation of UriTemplate for more details..
        /// </summary>
        internal static string UTBindByNameCalledWithEmptyKey {
            get {
                return ResourceManager.GetString("UTBindByNameCalledWithEmptyKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UriTemplate &apos;{0}&apos; contains no variables; yet the BindByPosition method was called with {1} values..
        /// </summary>
        internal static string UTBindByPositionNoVariables {
            get {
                return ResourceManager.GetString("UTBindByPositionNoVariables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UriTemplate &apos;{0}&apos; contains {1} path variables and {2} query variables but {3} values were passed to the BindByPosition method. The number of values passed to BindByPosition should be greater than or equal to the number of path variables in the template and cannot be greater than the total number of variables in the template..
        /// </summary>
        internal static string UTBindByPositionWrongCount {
            get {
                return ResourceManager.GetString("UTBindByPositionWrongCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate contains a literal value for query key &apos;{0}&apos;, but that key also is present in the NameValueCollection. Either remove that key from the NameValueCollection, or else change the UriTemplate to not have a query literal for that key..
        /// </summary>
        internal static string UTBothLiteralAndNameValueCollectionKey {
            get {
                return ResourceManager.GetString("UTBothLiteralAndNameValueCollectionKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UTCSR - Lookup was called before match.
        /// </summary>
        internal static string UTCSRLookupBeforeMatch {
            get {
                return ResourceManager.GetString("UTCSRLookupBeforeMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default values of UriTemplate are immutable; they cannot be modified after the construction of the UriTemplate instance. See the documentation of UriTemplate for more details..
        /// </summary>
        internal static string UTDefaultValuesAreImmutable {
            get {
                return ResourceManager.GetString("UTDefaultValuesAreImmutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate compound path segment &apos;{1}&apos; provides a default value to variable &apos;{2}&apos;. Note that UriTemplate doesn&apos;t support default values to variables in compound segments. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTDefaultValueToCompoundSegmentVar {
            get {
                return ResourceManager.GetString("UTDefaultValueToCompoundSegmentVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the path variable &apos;{1}&apos;, defined as part of a compound path segment has been provided with a default value as part of the additional defaults. Note that UriTemplate doesn&apos;t support default values to variables in compound segments. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTDefaultValueToCompoundSegmentVarFromAdditionalDefaults {
            get {
                return ResourceManager.GetString("UTDefaultValueToCompoundSegmentVarFromAdditionalDefaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate variable declaration &apos;{1}&apos; provides a default value to query variable &apos;{2}&apos;. Note that UriTemplate doesn&apos;t support default values to query variables. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTDefaultValueToQueryVar {
            get {
                return ResourceManager.GetString("UTDefaultValueToQueryVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the query variable &apos;{1}&apos; has been provided a default value as part of the additional defaults. Note that UriTemplate doesn&apos;t support default values to query variables. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTDefaultValueToQueryVarFromAdditionalDefaults {
            get {
                return ResourceManager.GetString("UTDefaultValueToQueryVarFromAdditionalDefaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; UriTemplate does not support two adjacent variables with no literal in compound segments, such as in the segment &apos;{1}&apos;..
        /// </summary>
        internal static string UTDoesNotSupportAdjacentVarsInCompoundSegment {
            get {
                return ResourceManager.GetString("UTDoesNotSupportAdjacentVarsInCompoundSegment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate variable declaration &apos;{1}&apos; provides an empty default value to path variable &apos;{2}&apos;. Note that UriTemplate path variables cannot be bound to a null or empty value. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTInvalidDefaultPathValue {
            get {
                return ResourceManager.GetString("UTInvalidDefaultPathValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UriTemplate does not support &apos;{0}&apos; as a valid format for a segment or a query part..
        /// </summary>
        internal static string UTInvalidFormatSegmentOrQueryPart {
            get {
                return ResourceManager.GetString("UTInvalidFormatSegmentOrQueryPart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate variable declaration &apos;{1}&apos; isn&apos;t a valid variable construct. Note that UriTemplate variable definitions are either a simple, non-empty, variable name or a &apos;name=value&apos; format, where the name must not be empty and the value provides a default value to the variable. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTInvalidVarDeclaration {
            get {
                return ResourceManager.GetString("UTInvalidVarDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the wildcard (&apos;{1}&apos;) cannot appear in a variable name or literal, unless as a construct for a wildcard segment. Note that a wildcard segment, either a literal or a variable, is valid only as the last path segment in the template; the wildcard can appear only once. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTInvalidWildcardInVariableOrLiteral {
            get {
                return ResourceManager.GetString("UTInvalidWildcardInVariableOrLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the additional default value &apos;{1}&apos; has a null value as default value. Note that null default values must be only provided to concrete path variables. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTNullableDefaultAtAdditionalDefaults {
            get {
                return ResourceManager.GetString("UTNullableDefaultAtAdditionalDefaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate path variable &apos;{1}&apos; has a null default value while following path variable &apos;{2}&apos; has no defaults or provides a non-null default value. Note that UriTemplate path variable with null default value must be followed only with other path variables with null defaulted values. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTNullableDefaultMustBeFollowedWithNullables {
            get {
                return ResourceManager.GetString("UTNullableDefaultMustBeFollowedWithNullables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate path variable &apos;{1}&apos; has a null default value while the following path segment &apos;{2}&apos; is not a variable segment with a null default value. Note that UriTemplate path variable with null default values must be followed only with other path variables with null defaulted value. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTNullableDefaultMustNotBeFollowedWithLiteral {
            get {
                return ResourceManager.GetString("UTNullableDefaultMustNotBeFollowedWithLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate path variable &apos;{1}&apos; has a null default value while the template is finished with a wildcard. Note that UriTemplate path variable with null default values must be followed only with other path variables with null defaulted value. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTNullableDefaultMustNotBeFollowedWithWildcard {
            get {
                return ResourceManager.GetString("UTNullableDefaultMustNotBeFollowedWithWildcard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the query string cannot end with &apos;&amp;amp;&apos;. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTQueryCannotEndInAmpersand {
            get {
                return ResourceManager.GetString("UTQueryCannotEndInAmpersand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; each portion of the query string must be of the form &apos;name=value&apos;, when value cannot be a compound segment. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTQueryCannotHaveCompoundValue {
            get {
                return ResourceManager.GetString("UTQueryCannotHaveCompoundValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; each portion of the query string must be of the form &apos;name&apos; or of the form &apos;name=value&apos;. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTQueryCannotHaveEmptyName {
            get {
                return ResourceManager.GetString("UTQueryCannotHaveEmptyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; each portion of the query string must be of the form &apos;name&apos; or of the form &apos;name=value&apos;, where name is a simple literal. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTQueryMustHaveLiteralNames {
            get {
                return ResourceManager.GetString("UTQueryMustHaveLiteralNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; each portion of the query string must be of the form &apos;name&apos; or of the form &apos;name=value&apos;, where each name is unique. Note that the names are case-insensitive. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTQueryNamesMustBeUnique {
            get {
                return ResourceManager.GetString("UTQueryNamesMustBeUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate last path segment &apos;{1}&apos; provides a default value to final star variable &apos;{2}&apos;. Note that UriTemplate doesn&apos;t support default values to final star variable. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTStarVariableWithDefaults {
            get {
                return ResourceManager.GetString("UTStarVariableWithDefaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate final star variable &apos;{1}&apos; has been provides a default value as part of the additional defaults information. Note that UriTemplate doesn&apos;t support default values to final star variable. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTStarVariableWithDefaultsFromAdditionalDefaults {
            get {
                return ResourceManager.GetString("UTStarVariableWithDefaultsFromAdditionalDefaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UriTemplateTable does not support &apos;{0}&apos; and &apos;{1}&apos; since they are not equivalent, but cannot be disambiguated because they have equivalent paths and the same common literal values for the query string. See the documentation for UriTemplateTable for more detail..
        /// </summary>
        internal static string UTTAmbiguousQueries {
            get {
                return ResourceManager.GetString("UTTAmbiguousQueries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BaseAddress must an absolute uri..
        /// </summary>
        internal static string UTTBaseAddressMustBeAbsolute {
            get {
                return ResourceManager.GetString("UTTBaseAddressMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BaseAddress has not been set. Set the BaseAddress property before calling MakeReadOnly, Match, or MatchSingle..
        /// </summary>
        internal static string UTTBaseAddressNotSet {
            get {
                return ResourceManager.GetString("UTTBaseAddressNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change BaseAddress after calling MakeReadOnly..
        /// </summary>
        internal static string UTTCannotChangeBaseAddress {
            get {
                return ResourceManager.GetString("UTTCannotChangeBaseAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UriTemplateTable (with allowDuplicateEquivalentUriTemplates = false) does not support both &apos;{0}&apos; and &apos;{1}&apos;, since they are equivalent. Call MakeReadOnly with allowDuplicateEquivalentUriTemplates = true to use both of these UriTemplates in the same table. See the documentation for UriTemplateTable for more detail..
        /// </summary>
        internal static string UTTDuplicate {
            get {
                return ResourceManager.GetString("UTTDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KeyValuePairs must have at least one element..
        /// </summary>
        internal static string UTTEmptyKeyValuePairs {
            get {
                return ResourceManager.GetString("UTTEmptyKeyValuePairs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid template &apos;{0}&apos; was passed as the key in a pair of template and its associated object. UriTemplateTable Key-Value pairs must always contain a valid UriTemplate object as key; note that UriTemplateTable doesn&apos;t support templates that are ignoring the trailing slash in respect to matching. See the documentation for UriTemplateTable for more details..
        /// </summary>
        internal static string UTTInvalidTemplateKey {
            get {
                return ResourceManager.GetString("UTTInvalidTemplateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were multiple UriTemplateMatch results, but MatchSingle was called..
        /// </summary>
        internal static string UTTMultipleMatches {
            get {
                return ResourceManager.GetString("UTTMultipleMatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;baseAddress&apos; must an absolute uri..
        /// </summary>
        internal static string UTTMustBeAbsolute {
            get {
                return ResourceManager.GetString("UTTMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null UriTemplate was passed as the key in a pair of template and its associated object. UriTemplateTable Key-Value pairs must always contain a valid UriTemplate object as key. See the documentation for UriTemplateTable for more details..
        /// </summary>
        internal static string UTTNullTemplateKey {
            get {
                return ResourceManager.GetString("UTTNullTemplateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UriTemplateTable does not support multiple templates that have equivalent path as template &apos;{0}&apos; but have different query strings, where the query strings cannot all be disambiguated via literal values. See the documentation for UriTemplateTable for more detail..
        /// </summary>
        internal static string UTTOtherAmbiguousQueries {
            get {
                return ResourceManager.GetString("UTTOtherAmbiguousQueries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriTemplate &apos;{0}&apos; is not valid; the UriTemplate variable named &apos;{1}&apos; appears multiple times in the template. Note that UriTemplate variable names are case-insensitive. See the documentation for UriTemplate for more details..
        /// </summary>
        internal static string UTVarNamesMustBeUnique {
            get {
                return ResourceManager.GetString("UTVarNamesMustBeUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must be greater than 0..
        /// </summary>
        internal static string ValueMustBeGreaterThanZero {
            get {
                return ResourceManager.GetString("ValueMustBeGreaterThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must fall within the range {0} to {1}..
        /// </summary>
        internal static string ValueMustBeInRange {
            get {
                return ResourceManager.GetString("ValueMustBeInRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must be non-negative..
        /// </summary>
        internal static string ValueMustBeNonNegative {
            get {
                return ResourceManager.GetString("ValueMustBeNonNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of this argument must be positive..
        /// </summary>
        internal static string ValueMustBePositive {
            get {
                return ResourceManager.GetString("ValueMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter at index {0} is null..
        /// </summary>
        internal static string VariantArrayNull {
            get {
                return ResourceManager.GetString("VariantArrayNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WaitForMessage timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WaitForMessageTimedOut {
            get {
                return ResourceManager.GetString("WaitForMessageTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Similar ServiceEndpoints were exported. The WSDL export process was forced to suffix wsdl:binding names to avoid naming conflicts.
        /// Similar ServiceEndpoints means different binding instances having the Name: {0} and Namespace: {1} and either the same ContractDescription or at least the same contract Name: {2}..
        /// </summary>
        internal static string WarnDuplicateBindingQNameNameOnExport {
            get {
                return ResourceManager.GetString("WarnDuplicateBindingQNameNameOnExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was skipped during export because the property &apos;{0}&apos; is set to &apos;{1}&apos;. This operation should be used for server only and should not be exposed from WSDL. 
        ///Contract Name:{2}
        ///Contract Namespace:{3}
        ///Operation Name:{4}.
        /// </summary>
        internal static string WarnSkippingOpertationWithSessionOpenNotificationEnabled {
            get {
                return ResourceManager.GetString("WarnSkippingOpertationWithSessionOpenNotificationEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was skipped during export because it has a wildcard action. This is not supported in WSDL.
        ///Contract Name:{0}
        ///Contract Namespace:{1}
        ///Operation Name:{2}.
        /// </summary>
        internal static string WarnSkippingOpertationWithWildcardAction {
            get {
                return ResourceManager.GetString("WarnSkippingOpertationWithWildcardAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified argument was out of the range of valid values..
        /// </summary>
        internal static string WebHeaderArgumentOutOfRange {
            get {
                return ResourceManager.GetString("WebHeaderArgumentOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter &apos;{0}&apos; cannot be an empty string..
        /// </summary>
        internal static string WebHeaderEmptyStringCall {
            get {
                return ResourceManager.GetString("WebHeaderEmptyStringCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enumeration has either not started or has already finished..
        /// </summary>
        internal static string WebHeaderEnumOperationCantHappen {
            get {
                return ResourceManager.GetString("WebHeaderEnumOperationCantHappen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified value has invalid Control characters..
        /// </summary>
        internal static string WebHeaderInvalidControlChars {
            get {
                return ResourceManager.GetString("WebHeaderInvalidControlChars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified value has invalid CRLF characters..
        /// </summary>
        internal static string WebHeaderInvalidCRLFChars {
            get {
                return ResourceManager.GetString("WebHeaderInvalidCRLFChars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified value has invalid HTTP Header characters..
        /// </summary>
        internal static string WebHeaderInvalidHeaderChars {
            get {
                return ResourceManager.GetString("WebHeaderInvalidHeaderChars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified value has invalid non-ASCII characters..
        /// </summary>
        internal static string WebHeaderInvalidNonAsciiChars {
            get {
                return ResourceManager.GetString("WebHeaderInvalidNonAsciiChars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HttpChannelFactory cannot create the channel with shape &apos;{0}&apos; when the {1} of {2} was set as &apos;{3}&apos;..
        /// </summary>
        internal static string WebSocketCannotCreateRequestClientChannelWithCertainWebSocketTransportUsage {
            get {
                return ResourceManager.GetString("WebSocketCannotCreateRequestClientChannelWithCertainWebSocketTransportUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server didn&apos;t accept the connection request. It is possible that the client side message encoding format or message transfer mode doesn&apos;t match the setting on the server side. Please check your binding settings..
        /// </summary>
        internal static string WebSocketContentTypeAndTransferModeMismatchFromServer {
            get {
                return ResourceManager.GetString("WebSocketContentTypeAndTransferModeMismatchFromServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server didn&apos;t accept the connection request. It is possible that the client side message encoding format doesn&apos;t match the setting on the server side. Please check your binding settings..
        /// </summary>
        internal static string WebSocketContentTypeMismatchFromServer {
            get {
                return ResourceManager.GetString("WebSocketContentTypeMismatchFromServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket object cannot be accessed directly..
        /// </summary>
        internal static string WebSocketContextWebSocketCannotBeAccessedError {
            get {
                return ResourceManager.GetString("WebSocketContextWebSocketCannotBeAccessedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for the {0} type. The type &apos;{1}&apos; does not derive from the appropriate base class &apos;{2}&apos; or is abstract..
        /// </summary>
        internal static string WebSocketElementConfigInvalidHttpMessageHandlerFactoryType {
            get {
                return ResourceManager.GetString("WebSocketElementConfigInvalidHttpMessageHandlerFactoryType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This service does not support WebSocket connections..
        /// </summary>
        internal static string WebSocketEndpointDoesNotSupportWebSocketError {
            get {
                return ResourceManager.GetString("WebSocketEndpointDoesNotSupportWebSocketError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This service only supports WebSocket connections..
        /// </summary>
        internal static string WebSocketEndpointOnlySupportWebSocketError {
            get {
                return ResourceManager.GetString("WebSocketEndpointOnlySupportWebSocketError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value specified (&apos;{0}&apos;) contains more than one subprotocol which is not supported..
        /// </summary>
        internal static string WebSocketInvalidProtocolContainsMultipleSubProtocolString {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolContainsMultipleSubProtocolString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty string is not a valid subprotocol value. Please use &quot;null&quot; to specify no value..
        /// </summary>
        internal static string WebSocketInvalidProtocolEmptySubprotocolString {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolEmptySubprotocolString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subprotocol &apos;{0}&apos; is invalid because it contains the invalid character &apos;{1}&apos;..
        /// </summary>
        internal static string WebSocketInvalidProtocolInvalidCharInProtocolString {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolInvalidCharInProtocolString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subprotocol &apos;{0}&apos; was not requested by the client - no &apos;{1}&apos; header was included in the request..
        /// </summary>
        internal static string WebSocketInvalidProtocolNoHeader {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolNoHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subprotocol &apos;{0}&apos; was not requested by the client. The client requested the following subprotocol(s): &apos;{1}&apos;..
        /// </summary>
        internal static string WebSocketInvalidProtocolNotInClientList {
            get {
                return ResourceManager.GetString("WebSocketInvalidProtocolNotInClientList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of pending WebSocket connections ({0}) has been reached. Consider increasing the &apos;{1}&apos; quota on the &apos;{2}&apos; property of the transport..
        /// </summary>
        internal static string WebSocketMaxPendingConnectionsReached {
            get {
                return ResourceManager.GetString("WebSocketMaxPendingConnectionsReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WebSocketModule is not loaded. Check if the WebSocket feature is installed and the WebSocketModule is enabled in the list of IIS modules (see http://go.microsoft.com/fwlink/?LinkId=231398 for details)..
        /// </summary>
        internal static string WebSocketModuleNotLoaded {
            get {
                return ResourceManager.GetString("WebSocketModuleNotLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method is not supported for this HTTP content..
        /// </summary>
        internal static string WebSocketOpaqueStreamContentNotSupportError {
            get {
                return ResourceManager.GetString("WebSocketOpaqueStreamContentNotSupportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The opening handshake properties associated with the current WebSocket connection are not available. The most likely cause is that the property &apos;{0}&apos; on the &apos;{1}&apos; object returned from the custom &apos;{2}&apos; is not set..
        /// </summary>
        internal static string WebSocketOpeningHandshakePropertiesNotAvailable {
            get {
                return ResourceManager.GetString("WebSocketOpeningHandshakePropertiesNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; operation timed out after &apos;{1}&apos;. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WebSocketOperationTimedOut {
            get {
                return ResourceManager.GetString("WebSocketOperationTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Receive operation timed out after &apos;{0}&apos;. For duplex sessionful channels, the receive timeout is also the idle timeout for the channel, so consider setting a suitably large value for the ReceiveTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WebSocketReceiveTimedOut {
            get {
                return ResourceManager.GetString("WebSocketReceiveTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This platform does not support client side WebSockets natively. Support for client side WebSockets can be enabled on this platform by providing an implementation of {0}..
        /// </summary>
        internal static string WebSocketsClientSideNotSupported {
            get {
                return ResourceManager.GetString("WebSocketsClientSideNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Send operation timed out after &apos;{0}&apos;. Increase the SendTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WebSocketSendTimedOut {
            get {
                return ResourceManager.GetString("WebSocketSendTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSockets are not supported in the classic pipeline mode. Consider using the integrated pipeline mode for the application pool..
        /// </summary>
        internal static string WebSocketsNotSupportedInClassicPipeline {
            get {
                return ResourceManager.GetString("WebSocketsNotSupportedInClassicPipeline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This platform does not support server side WebSockets..
        /// </summary>
        internal static string WebSocketsServerSideNotSupported {
            get {
                return ResourceManager.GetString("WebSocketsServerSideNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot write to the stream because the end of the stream marker was already written..
        /// </summary>
        internal static string WebSocketStreamWriteCalledAfterEOMSent {
            get {
                return ResourceManager.GetString("WebSocketStreamWriteCalledAfterEOMSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server didn&apos;t accept the connection request. It is possible that the WebSocket subprotocol sent by your client is not supported by the server. Protocol(s) supported by the server are &apos;{0}&apos;..
        /// </summary>
        internal static string WebSocketSubProtocolMismatchFromServer {
            get {
                return ResourceManager.GetString("WebSocketSubProtocolMismatchFromServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A WebSocket error occurred..
        /// </summary>
        internal static string WebSocketTransportError {
            get {
                return ResourceManager.GetString("WebSocketTransportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the policy being imported for contract &apos;{0}:{1}&apos; is invalid:&apos;{2}&apos;. It should be either &apos;{3}&apos;, &apos;{4}&apos; or &apos;{5}&apos;..
        /// </summary>
        internal static string WebSocketTransportPolicyAssertionInvalid {
            get {
                return ResourceManager.GetString("WebSocketTransportPolicyAssertionInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected WebSocket close message received when receiving a message..
        /// </summary>
        internal static string WebSocketUnexpectedCloseMessageError {
            get {
                return ResourceManager.GetString("WebSocketUnexpectedCloseMessageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket upgrade request failed. Received response status code &apos;{0} ({1})&apos;, expected: &apos;{2} ({3})&apos;..
        /// </summary>
        internal static string WebSocketUpgradeFailedError {
            get {
                return ResourceManager.GetString("WebSocketUpgradeFailedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket upgrade request failed. The header &apos;{0}&apos; is missing in the response..
        /// </summary>
        internal static string WebSocketUpgradeFailedHeaderMissingError {
            get {
                return ResourceManager.GetString("WebSocketUpgradeFailedHeaderMissingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected response - the server accepted the upgrade request but specified the subprotocol &apos;{0}&apos; when no subprotocol was requested..
        /// </summary>
        internal static string WebSocketUpgradeFailedInvalidProtocolError {
            get {
                return ResourceManager.GetString("WebSocketUpgradeFailedInvalidProtocolError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebSocket upgrade request failed. The value of header &apos;{0}&apos; is &apos;{1}&apos;. The expected value is &apos;{2}&apos;..
        /// </summary>
        internal static string WebSocketUpgradeFailedWrongHeaderError {
            get {
                return ResourceManager.GetString("WebSocketUpgradeFailedWrongHeaderError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server didn&apos;t accept the connection request. It is possible that the WebSocket protocol version on your client doesn&apos;t match the one on the server(&apos;{0}&apos;)..
        /// </summary>
        internal static string WebSocketVersionMismatchFromServer {
            get {
                return ResourceManager.GetString("WebSocketVersionMismatchFromServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSDTC whereabouts information&apos;s host name byte count was invalid..
        /// </summary>
        internal static string WhereaboutsImplausibleHostNameByteCount {
            get {
                return ResourceManager.GetString("WhereaboutsImplausibleHostNameByteCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSDTC whereabouts information&apos;s protocol count was invalid..
        /// </summary>
        internal static string WhereaboutsImplausibleProtocolCount {
            get {
                return ResourceManager.GetString("WhereaboutsImplausibleProtocolCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSDTC whereabouts information&apos;s host name was invalid..
        /// </summary>
        internal static string WhereaboutsInvalidHostName {
            get {
                return ResourceManager.GetString("WhereaboutsInvalidHostName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSDTC whereabouts information did not contain a host name..
        /// </summary>
        internal static string WhereaboutsNoHostName {
            get {
                return ResourceManager.GetString("WhereaboutsNoHostName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSDTC whereabouts information could not be deserialized..
        /// </summary>
        internal static string WhereaboutsReadFailed {
            get {
                return ResourceManager.GetString("WhereaboutsReadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The standard whereabouts signature was missing from the MSDTC whereabouts information..
        /// </summary>
        internal static string WhereaboutsSignatureMissing {
            get {
                return ResourceManager.GetString("WhereaboutsSignatureMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WMI GetObject Query: {0}.
        /// </summary>
        internal static string WmiGetObject {
            get {
                return ResourceManager.GetString("WmiGetObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WMI PutInstance Class: {0}.
        /// </summary>
        internal static string WmiPutInstance {
            get {
                return ResourceManager.GetString("WmiPutInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of encrypted keys in the message has exceeded the maximum allowed number &apos;{0}&apos;..
        /// </summary>
        internal static string WrappedKeyLimitExceeded {
            get {
                return ResourceManager.GetString("WrappedKeyLimitExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An asynchronous write was called on the stream without a free buffer..
        /// </summary>
        internal static string WriteAsyncWithoutFreeBuffer {
            get {
                return ResourceManager.GetString("WriteAsyncWithoutFreeBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An asynchronous write is pending on the stream. Ensure that there are no uncompleted asynchronous writes before attempting the next write. .
        /// </summary>
        internal static string WriterAsyncWritePending {
            get {
                return ResourceManager.GetString("WriterAsyncWritePending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint has sent an fault message with an unexpected sequence identifier over a session. The fault may be intended for a different session. The fault reason is: {0} The reliable session was faulted..
        /// </summary>
        internal static string WrongIdentifierFault {
            get {
                return ResourceManager.GetString("WrongIdentifierFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identity of the security session renew message does not match the identity of the session token..
        /// </summary>
        internal static string WrongIdentityRenewingToken {
            get {
                return ResourceManager.GetString("WrongIdentityRenewingToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-AtomicTransaction header was invalid or corrupt..
        /// </summary>
        internal static string WsatHeaderCorrupt {
            get {
                return ResourceManager.GetString("WsatHeaderCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-AT messaging library failed to initialize..
        /// </summary>
        internal static string WsatMessagingInitializationFailed {
            get {
                return ResourceManager.GetString("WsatMessagingInitializationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MSDTC transaction manager&apos;s WS-AtomicTransaction protocol service &apos;{0}&apos; is disabled and cannot unmarshal incoming transactions..
        /// </summary>
        internal static string WsatProtocolServiceDisabled {
            get {
                return ResourceManager.GetString("WsatProtocolServiceDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A client-side channel to the WS-AT protocol service could not be created..
        /// </summary>
        internal static string WsatProxyCreationFailed {
            get {
                return ResourceManager.GetString("WsatProxyCreationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WS-AtomicTransaction transaction formatter could not read the registry value &apos;{0}&apos;..
        /// </summary>
        internal static string WsatRegistryValueReadError {
            get {
                return ResourceManager.GetString("WsatRegistryValueReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A registration service address could not be created from MSDTC whereabouts information..
        /// </summary>
        internal static string WsatUriCreationFailed {
            get {
                return ResourceManager.GetString("WsatUriCreationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous call to this WsdlExporter left it in a faulted state. It is no longer usable..
        /// </summary>
        internal static string WsdlExporterIsFaulted {
            get {
                return ResourceManager.GetString("WsdlExporterIsFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A WSDL import extension threw an exception during the BeforeImport call: {0}
        ///Error: {1}.
        /// </summary>
        internal static string WsdlExtensionBeforeImportError {
            get {
                return ResourceManager.GetString("WsdlExtensionBeforeImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a WSDL export extension: {0}
        /// contract: {1}.
        /// </summary>
        internal static string WsdlExtensionContractExportError {
            get {
                return ResourceManager.GetString("WsdlExtensionContractExportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in a call to a WSDL export extension: {0}
        /// Endpoint: {1}.
        /// </summary>
        internal static string WsdlExtensionEndpointExportError {
            get {
                return ResourceManager.GetString("WsdlExtensionEndpointExportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown while running a WSDL import extension: {0}
        ///Error: {1}.
        /// </summary>
        internal static string WsdlExtensionImportError {
            get {
                return ResourceManager.GetString("WsdlExtensionImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} registered as a WSDL extension does not have a public default constructor. WSDL extensions must have a public default constructor..
        /// </summary>
        internal static string WsdlExtensionTypeRequiresDefaultConstructor {
            get {
                return ResourceManager.GetString("WsdlExtensionTypeRequiresDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ContractDescription argument to ImportEndpoints must be contained in the KnownContracts collection..
        /// </summary>
        internal static string WsdlImporterContractMustBeInKnownContracts {
            get {
                return ResourceManager.GetString("WsdlImporterContractMustBeInKnownContracts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous call to this WsdlImporter left it in a faulted state. It is no longer usable..
        /// </summary>
        internal static string WsdlImporterIsFaulted {
            get {
                return ResourceManager.GetString("WsdlImporterIsFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error importing a {0} that the {1} is dependent on.
        ///XPath to {0}: {2}.
        /// </summary>
        internal static string WsdlImportErrorDependencyDetail {
            get {
                return ResourceManager.GetString("WsdlImportErrorDependencyDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import {0}
        ///Detail: {2}
        ///XPath to Error Source: {1}.
        /// </summary>
        internal static string WsdlImportErrorMessageDetail {
            get {
                return ResourceManager.GetString("WsdlImportErrorMessageDetail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous attempt to import this {0} already failed..
        /// </summary>
        internal static string WsdlItemAlreadyFaulted {
            get {
                return ResourceManager.GetString("WsdlItemAlreadyFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding validation failed because the WSHttpBinding does not support reliable sessions over transport security (HTTPS). The channel factory or service host could not be opened. Use message security for secure reliable messaging over HTTP..
        /// </summary>
        internal static string WSHttpDoesNotSupportRMWithHttps {
            get {
                return ResourceManager.GetString("WSHttpDoesNotSupportRMWithHttps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sequence has been terminated by the remote endpoint. {0} The reliable session was faulted..
        /// </summary>
        internal static string WsrmFaultReceived {
            get {
                return ResourceManager.GetString("WsrmFaultReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while processing a message. {0}.
        /// </summary>
        internal static string WsrmMessageProcessingError {
            get {
                return ResourceManager.GetString("WsrmMessageProcessingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The returned {0}Response was carrying the a wsa:RelatesTo header that does not correlate with the wsa:MessageId header on the {0} request. This is a violation of the WS-Addressing request reply protocol. The reliable session cannot continue..
        /// </summary>
        internal static string WsrmMessageWithWrongRelatesToExceptionString {
            get {
                return ResourceManager.GetString("WsrmMessageWithWrongRelatesToExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint has responded to a {0} request message with an invalid reply. The reply has a wsa:RelatesTo header with an unexpected identifier. The reliable session cannot continue..
        /// </summary>
        internal static string WsrmMessageWithWrongRelatesToFaultString {
            get {
                return ResourceManager.GetString("WsrmMessageWithWrongRelatesToFaultString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote endpoint sent a wsrm:{0} request message with a wsa:ReplyTo address containing a URI which is not equivalent to the remote address. This is not supported. The reliable session was faulted..
        /// </summary>
        internal static string WsrmRequestIncorrectReplyToExceptionString {
            get {
                return ResourceManager.GetString("WsrmRequestIncorrectReplyToExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wsrm:{0} request message&apos;s wsa:ReplyTo address containing a URI which is not equivalent to the remote address. This is not supported. The reliable session was faulted..
        /// </summary>
        internal static string WsrmRequestIncorrectReplyToFaultString {
            get {
                return ResourceManager.GetString("WsrmRequestIncorrectReplyToFaultString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The incoming message is not a WS-ReliableMessaging 1.1 message and could not be processed..
        /// </summary>
        internal static string WsrmRequiredExceptionString {
            get {
                return ResourceManager.GetString("WsrmRequiredExceptionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RM server requires the use of WS-ReliableMessaging 1.1 protocol. This is likely caused by a binding mismatch..
        /// </summary>
        internal static string WsrmRequiredFaultString {
            get {
                return ResourceManager.GetString("WsrmRequiredFaultString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to X509Chain does not have any valid certificates..
        /// </summary>
        internal static string X509ChainIsEmpty {
            get {
                return ResourceManager.GetString("X509ChainIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find &apos;{0}&apos; value in dictionary string..
        /// </summary>
        internal static string XDCannotFindValueInDictionaryString {
            get {
                return ResourceManager.GetString("XDCannotFindValueInDictionaryString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred. The XML buffer is not in the correct state to perform the operation..
        /// </summary>
        internal static string XmlBufferInInvalidState {
            get {
                return ResourceManager.GetString("XmlBufferInInvalidState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size necessary to buffer the XML content exceeded the buffer quota..
        /// </summary>
        internal static string XmlBufferQuotaExceeded {
            get {
                return ResourceManager.GetString("XmlBufferQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context protocol was unable to parse the callback context header..
        /// </summary>
        internal static string XmlFormatViolationInCallbackContextHeader {
            get {
                return ResourceManager.GetString("XmlFormatViolationInCallbackContextHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context protocol was unable to parse the context header..
        /// </summary>
        internal static string XmlFormatViolationInContextHeader {
            get {
                return ResourceManager.GetString("XmlFormatViolationInContextHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cdata &apos;{0}&apos;.
        /// </summary>
        internal static string XmlFoundCData {
            get {
                return ResourceManager.GetString("XmlFoundCData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to comment &apos;{0}&apos;.
        /// </summary>
        internal static string XmlFoundComment {
            get {
                return ResourceManager.GetString("XmlFoundComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to element &apos;{0}&apos; from namespace &apos;{1}&apos;.
        /// </summary>
        internal static string XmlFoundElement {
            get {
                return ResourceManager.GetString("XmlFoundElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to end element &apos;{0}&apos; from namespace &apos;{1}&apos;.
        /// </summary>
        internal static string XmlFoundEndElement {
            get {
                return ResourceManager.GetString("XmlFoundEndElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to end of file.
        /// </summary>
        internal static string XmlFoundEndOfFile {
            get {
                return ResourceManager.GetString("XmlFoundEndOfFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to node {0}.
        /// </summary>
        internal static string XmlFoundNodeType {
            get {
                return ResourceManager.GetString("XmlFoundNodeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to text &apos;{0}&apos;.
        /// </summary>
        internal static string XmlFoundText {
            get {
                return ResourceManager.GetString("XmlFoundText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required xml:lang attribute value is missing..
        /// </summary>
        internal static string XmlLangAttributeMissing {
            get {
                return ResourceManager.GetString("XmlLangAttributeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line {0}, position {1}..
        /// </summary>
        internal static string XmlLineInfo {
            get {
                return ResourceManager.GetString("XmlLineInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XmlReader is not currently in a node of type Element..
        /// </summary>
        internal static string XmlNodeIsNotAnElement {
            get {
                return ResourceManager.GetString("XmlNodeIsNotAnElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start element expected. Found {0}..
        /// </summary>
        internal static string XmlStartElementExpected {
            get {
                return ResourceManager.GetString("XmlStartElementExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPath:{0}.
        /// </summary>
        internal static string XPathPointer {
            get {
                return ResourceManager.GetString("XPathPointer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;XPath Unavailable&quot;.
        /// </summary>
        internal static string XPathUnavailable {
            get {
                return ResourceManager.GetString("XPathUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing required &apos;{0}&apos; attribute..
        /// </summary>
        internal static string XsdMissingRequiredAttribute1 {
            get {
                return ResourceManager.GetString("XsdMissingRequiredAttribute1", resourceCulture);
            }
        }
    }
}
