<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Xml_UserException" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="Xml_DefaultException" xml:space="preserve">
    <value>An XML error has occurred.</value>
  </data>
  <data name="Xml_InvalidOperation" xml:space="preserve">
    <value>Operation is not valid due to the current state of the object.</value>
  </data>
  <data name="Xml_AsyncIsRunningException" xml:space="preserve">
    <value>An asynchronous operation is already in progress.</value>
  </data>
  <data name="Xml_ReaderAsyncNotSetException" xml:space="preserve">
    <value>Set XmlReaderSettings.Async to true if you want to use Async Methods.</value>
  </data>
  <data name="Xml_UnclosedQuote" xml:space="preserve">
    <value>There is an unclosed literal string.</value>
  </data>
  <data name="Xml_UnexpectedEOF" xml:space="preserve">
    <value>Unexpected end of file while parsing {0} has occurred.</value>
  </data>
  <data name="Xml_UnexpectedEOF1" xml:space="preserve">
    <value>Unexpected end of file has occurred.</value>
  </data>
  <data name="Xml_UnexpectedEOFInElementContent" xml:space="preserve">
    <value>Unexpected end of file has occurred. The following elements are not closed: {0}</value>
  </data>
  <data name="Xml_BadStartNameChar" xml:space="preserve">
    <value>Name cannot begin with the '{0}' character, hexadecimal value {1}.</value>
  </data>
  <data name="Xml_BadNameChar" xml:space="preserve">
    <value>The '{0}' character, hexadecimal value {1}, cannot be included in a name.</value>
  </data>
  <data name="Xml_BadDecimalEntity" xml:space="preserve">
    <value>Invalid syntax for a decimal numeric entity reference.</value>
  </data>
  <data name="Xml_BadHexEntity" xml:space="preserve">
    <value>Invalid syntax for a hexadecimal numeric entity reference.</value>
  </data>
  <data name="Xml_MissingByteOrderMark" xml:space="preserve">
    <value>There is no Unicode byte order mark. Cannot switch to Unicode.</value>
  </data>
  <data name="Xml_UnknownEncoding" xml:space="preserve">
    <value>System does not support '{0}' encoding.</value>
  </data>
  <data name="Xml_InternalError" xml:space="preserve">
    <value>An internal error has occurred.</value>
  </data>
  <data name="Xml_InvalidCharInThisEncoding" xml:space="preserve">
    <value>Invalid character in the given encoding.</value>
  </data>
  <data name="Xml_ErrorPosition" xml:space="preserve">
    <value>Line {0}, position {1}.</value>
  </data>
  <data name="Xml_MessageWithErrorPosition" xml:space="preserve">
    <value>{0} Line {1}, position {2}.</value>
  </data>
  <data name="Xml_UnexpectedTokenEx" xml:space="preserve">
    <value>'{0}' is an unexpected token. The expected token is '{1}'.</value>
  </data>
  <data name="Xml_UnexpectedTokens2" xml:space="preserve">
    <value>'{0}' is an unexpected token. The expected token is '{1}' or '{2}'.</value>
  </data>
  <data name="Xml_ExpectingWhiteSpace" xml:space="preserve">
    <value>'{0}' is an unexpected token. Expecting white space.</value>
  </data>
  <data name="Xml_TagMismatchEx" xml:space="preserve">
    <value>The '{0}' start tag on line {1} position {2} does not match the end tag of '{3}'.</value>
  </data>
  <data name="Xml_UnexpectedEndTag" xml:space="preserve">
    <value>Unexpected end tag.</value>
  </data>
  <data name="Xml_UnknownNs" xml:space="preserve">
    <value>'{0}' is an undeclared namespace.</value>
  </data>
  <data name="Xml_BadAttributeChar" xml:space="preserve">
    <value>'{0}', hexadecimal value {1}, is an invalid attribute character.</value>
  </data>
  <data name="Xml_ExpectExternalOrClose" xml:space="preserve">
    <value>Expecting external ID, '[' or '&gt;'.</value>
  </data>
  <data name="Xml_MissingRoot" xml:space="preserve">
    <value>Root element is missing.</value>
  </data>
  <data name="Xml_MultipleRoots" xml:space="preserve">
    <value>There are multiple root elements.</value>
  </data>
  <data name="Xml_InvalidRootData" xml:space="preserve">
    <value>Data at the root level is invalid.</value>
  </data>
  <data name="Xml_XmlDeclNotFirst" xml:space="preserve">
    <value>Unexpected XML declaration. The XML declaration must be the first node in the document, and no white space characters are allowed to appear before it.</value>
  </data>
  <data name="Xml_InvalidXmlDecl" xml:space="preserve">
    <value>Syntax for an XML declaration is invalid.</value>
  </data>
  <data name="Xml_InvalidNodeType" xml:space="preserve">
    <value>'{0}' is an invalid XmlNodeType.</value>
  </data>
  <data name="Xml_InvalidPIName" xml:space="preserve">
    <value>'{0}' is an invalid name for processing instructions.</value>
  </data>
  <data name="Xml_InvalidXmlSpace" xml:space="preserve">
    <value>'{0}' is an invalid xml:space value.</value>
  </data>
  <data name="Xml_InvalidVersionNumber" xml:space="preserve">
    <value>Version number '{0}' is invalid.</value>
  </data>
  <data name="Xml_DupAttributeName" xml:space="preserve">
    <value>'{0}' is a duplicate attribute name.</value>
  </data>
  <data name="Xml_BadDTDLocation" xml:space="preserve">
    <value>Unexpected DTD declaration.</value>
  </data>
  <data name="Xml_ElementNotFound" xml:space="preserve">
    <value>Element '{0}' was not found.</value>
  </data>
  <data name="Xml_ElementNotFoundNs" xml:space="preserve">
    <value>Element '{0}' with namespace name '{1}' was not found.</value>
  </data>
  <data name="Xml_CanNotBindToReservedNamespace" xml:space="preserve">
    <value>Cannot bind to the reserved namespace.</value>
  </data>
  <data name="Xml_InvalidCharacter" xml:space="preserve">
    <value>'{0}', hexadecimal value {1}, is an invalid character.</value>
  </data>
  <data name="Xml_InvalidBinHexValue" xml:space="preserve">
    <value>'{0}' is not a valid BinHex text sequence.</value>
  </data>
  <data name="Xml_InvalidBinHexValueOddCount" xml:space="preserve">
    <value>'{0}' is not a valid BinHex text sequence. The sequence must contain an even number of characters.</value>
  </data>
  <data name="Xml_InvalidTextDecl" xml:space="preserve">
    <value>Invalid text declaration.</value>
  </data>
  <data name="Xml_InvalidBase64Value" xml:space="preserve">
    <value>'{0}' is not a valid Base64 text sequence.</value>
  </data>
  <data name="Xml_UndeclaredEntity" xml:space="preserve">
    <value>Reference to undeclared entity '{0}'.</value>
  </data>
  <data name="Xml_RecursiveParEntity" xml:space="preserve">
    <value>Parameter entity '{0}' references itself.</value>
  </data>
  <data name="Xml_RecursiveGenEntity" xml:space="preserve">
    <value>General entity '{0}' references itself.</value>
  </data>
  <data name="Xml_NotSameNametable" xml:space="preserve">
    <value>Not the same name table.</value>
  </data>
  <data name="Xml_NametableMismatch" xml:space="preserve">
    <value>XmlReaderSettings.XmlNameTable must be the same name table as in XmlParserContext.NameTable or XmlParserContext.NamespaceManager.NameTable, or it must be null.</value>
  </data>
  <data name="Xml_BadNamespaceDecl" xml:space="preserve">
    <value>Invalid namespace declaration.</value>
  </data>
  <data name="Xml_ErrorParsingEntityName" xml:space="preserve">
    <value>An error occurred while parsing EntityName.</value>
  </data>
  <data name="Xml_InvalidNmToken" xml:space="preserve">
    <value>Invalid NmToken value '{0}'.</value>
  </data>
  <data name="Xml_EntityRefNesting" xml:space="preserve">
    <value>Entity replacement text must nest properly within markup declarations.</value>
  </data>
  <data name="Xml_CannotResolveEntity" xml:space="preserve">
    <value>Cannot resolve entity reference '{0}'.</value>
  </data>
  <data name="Xml_CannotResolveEntityDtdIgnored" xml:space="preserve">
    <value>Cannot resolve entity reference '{0}' because the DTD has been ignored. To enable DTD processing set the DtdProcessing property on XmlReaderSettings to Parse and pass the settings into XmlReader.Create method.</value>
  </data>
  <data name="Xml_CannotResolveExternalSubset" xml:space="preserve">
    <value>Cannot resolve external DTD subset - public ID = '{0}', system ID = '{1}'.</value>
  </data>
  <data name="Xml_CDATAEndInText" xml:space="preserve">
    <value>']]&gt;' is not allowed in character data.</value>
  </data>
  <data name="Xml_DtdAfterRootElement" xml:space="preserve">
    <value>DTD must be defined before the document root element.</value>
  </data>
  <data name="Xml_ReadOnlyProperty" xml:space="preserve">
    <value>The '{0}' property is read only and cannot be set.</value>
  </data>
  <data name="Xml_DtdIsProhibited" xml:space="preserve">
    <value>DTD is prohibited in this XML document.</value>
  </data>
  <data name="Xml_DtdIsProhibitedEx" xml:space="preserve">
    <value>For security reasons DTD is prohibited in this XML document. To enable DTD processing set the DtdProcessing property on XmlReaderSettings to Parse and pass the settings into XmlReader.Create method.</value>
  </data>
  <data name="Xml_ReadSubtreeNotOnElement" xml:space="preserve">
    <value>ReadSubtree() can be called only if the reader is on an element node.</value>
  </data>
  <data name="Xml_DtdNotAllowedInFragment" xml:space="preserve">
    <value>DTD is not allowed in XML fragments.</value>
  </data>
  <data name="Xml_CannotStartDocumentOnFragment" xml:space="preserve">
    <value>WriteStartDocument cannot be called on writers created with ConformanceLevel.Fragment.</value>
  </data>
  <data name="Xml_ErrorOpeningExternalDtd" xml:space="preserve">
    <value>An error has occurred while opening external DTD '{0}': {1}</value>
  </data>
  <data name="Xml_ErrorOpeningExternalEntity" xml:space="preserve">
    <value>An error has occurred while opening external entity '{0}': {1}</value>
  </data>
  <data name="Xml_ReadBinaryContentNotSupported" xml:space="preserve">
    <value>{0} method is not supported on this XmlReader. Use CanReadBinaryContent property to find out if a reader implements it.</value>
  </data>
  <data name="Xml_ReadValueChunkNotSupported" xml:space="preserve">
    <value>ReadValueChunk method is not supported on this XmlReader. Use CanReadValueChunk property to find out if an XmlReader implements it.</value>
  </data>
  <data name="Xml_InvalidReadContentAs" xml:space="preserve">
    <value>The {0} method is not supported on node type {1}. If you want to read typed content of an element, use the ReadElementContentAs method.</value>
  </data>
  <data name="Xml_InvalidReadElementContentAs" xml:space="preserve">
    <value>The {0} method is not supported on node type {1}.</value>
  </data>
  <data name="Xml_MixedReadElementContentAs" xml:space="preserve">
    <value>ReadElementContentAs() methods cannot be called on an element that has child elements.</value>
  </data>
  <data name="Xml_MixingReadValueChunkWithBinary" xml:space="preserve">
    <value>ReadValueChunk calls cannot be mixed with ReadContentAsBase64 or ReadContentAsBinHex.</value>
  </data>
  <data name="Xml_MixingBinaryContentMethods" xml:space="preserve">
    <value>ReadContentAsBase64 and ReadContentAsBinHex method calls cannot be mixed with calls to ReadElementContentAsBase64 and ReadElementContentAsBinHex.</value>
  </data>
  <data name="Xml_MixingV1StreamingWithV2Binary" xml:space="preserve">
    <value>ReadContentAsBase64 and ReadContentAsBinHex method calls cannot be mixed with calls to ReadChars, ReadBase64, and ReadBinHex.</value>
  </data>
  <data name="Xml_InvalidReadValueChunk" xml:space="preserve">
    <value>The ReadValueAsChunk method is not supported on node type {0}.</value>
  </data>
  <data name="Xml_ReadContentAsFormatException" xml:space="preserve">
    <value>Content cannot be converted to the type {0}.</value>
  </data>
  <data name="Xml_DoubleBaseUri" xml:space="preserve">
    <value>BaseUri must be specified either as an argument of XmlReader.Create or on the XmlParserContext. If it is specified on both, it must be the same base URI.</value>
  </data>
  <data name="Xml_NotEnoughSpaceForSurrogatePair" xml:space="preserve">
    <value>The buffer is not large enough to fit a surrogate pair. Please provide a buffer of size at least 2 characters.</value>
  </data>
  <data name="Xml_InvalidWhitespaceCharacter" xml:space="preserve">
    <value>The Whitespace or SignificantWhitespace node can contain only XML white space characters. '{0}' is not an XML white space character.</value>
  </data>
  <data name="Xml_IncompatibleConformanceLevel" xml:space="preserve">
    <value>Cannot change conformance checking to {0}. Make sure the ConformanceLevel in XmlReaderSettings is set to Auto for wrapping scenarios.</value>
  </data>
  <data name="Xml_LimitExceeded" xml:space="preserve">
    <value>The input document has exceeded a limit set by {0}.</value>
  </data>
  <data name="Xml_ClosedOrErrorReader" xml:space="preserve">
    <value>The XmlReader is closed or in error state.</value>
  </data>
  <data name="Xml_CharEntityOverflow" xml:space="preserve">
    <value>Invalid value of a character entity reference.</value>
  </data>
  <data name="Xml_CannotResolveUrl" xml:space="preserve">
    <value>Cannot resolve '{0}'.</value>
  </data>
  <data name="Xml_MultipleDTDsProvided" xml:space="preserve">
    <value>Cannot have multiple DTDs.</value>
  </data>
  <data name="Xml_UnparsedEntityRef" xml:space="preserve">
    <value>Reference to unparsed entity '{0}'.</value>
  </data>
  <data name="Xml_ExternalEntityInStandAloneDocument" xml:space="preserve">
    <value>Standalone document declaration must have a value of 'no' because an external entity '{0}' is referenced.</value>
  </data>
  <data name="Xml_ExternalEntityInAttValue" xml:space="preserve">
    <value>External entity '{0}' reference cannot appear in the attribute value.</value>
  </data>
  <data name="Xml_ExpectSubOrClose" xml:space="preserve">
    <value>Expecting an internal subset or the end of the DOCTYPE declaration.</value>
  </data>
  <data name="Xml_InvalidConditionalSection" xml:space="preserve">
    <value>A conditional section is not allowed in an internal subset.</value>
  </data>
  <data name="Xml_UnexpectedCDataEnd" xml:space="preserve">
    <value>']]&gt;' is not expected.</value>
  </data>
  <data name="Xml_ExpectDtdMarkup" xml:space="preserve">
    <value>Expected DTD markup was not found.</value>
  </data>
  <data name="Xml_UnclosedConditionalSection" xml:space="preserve">
    <value>There is an unclosed conditional section.</value>
  </data>
  <data name="Xml_IncompleteDtdContent" xml:space="preserve">
    <value>Incomplete DTD content.</value>
  </data>
  <data name="Xml_EnumerationRequired" xml:space="preserve">
    <value>Enumeration data type required.</value>
  </data>
  <data name="Xml_InvalidContentModel" xml:space="preserve">
    <value>Invalid content model.</value>
  </data>
  <data name="Xml_FragmentId" xml:space="preserve">
    <value>Fragment identifier '{0}' cannot be part of the system identifier '{1}'.</value>
  </data>
  <data name="Xml_ExpectPcData" xml:space="preserve">
    <value>Expecting 'PCDATA'.</value>
  </data>
  <data name="Xml_ExpectNoWhitespace" xml:space="preserve">
    <value>White space not allowed before '?', '*', or '+'.</value>
  </data>
  <data name="Xml_InvalidAttributeType" xml:space="preserve">
    <value>'{0}' is an invalid attribute type.</value>
  </data>
  <data name="Xml_ExpectOp" xml:space="preserve">
    <value>Expecting '?', '*', or '+'.</value>
  </data>
  <data name="Xml_ExpectAttType" xml:space="preserve">
    <value>Expecting an attribute type.</value>
  </data>
  <data name="Xml_ExpectExternalOrPublicId" xml:space="preserve">
    <value>Expecting a system identifier or a public identifier.</value>
  </data>
  <data name="Xml_ExpectExternalIdOrEntityValue" xml:space="preserve">
    <value>Expecting an external identifier or an entity value.</value>
  </data>
  <data name="Xml_ExpectIgnoreOrInclude" xml:space="preserve">
    <value>Conditional sections must specify the keyword 'IGNORE' or 'INCLUDE'.</value>
  </data>
  <data name="Xml_ColonInLocalName" xml:space="preserve">
    <value>'{0}' is an unqualified name and cannot contain the character ':'.</value>
  </data>
  <data name="Xml_InvalidParEntityRef" xml:space="preserve">
    <value>A parameter entity reference is not allowed in internal markup.</value>
  </data>
  <data name="Xml_WriterAsyncNotSetException" xml:space="preserve">
    <value>Set XmlWriterSettings.Async to true if you want to use Async Methods.</value>
  </data>
  <data name="Xml_PrefixForEmptyNs" xml:space="preserve">
    <value>Cannot use a prefix with an empty namespace.</value>
  </data>
  <data name="Xml_InvalidCommentChars" xml:space="preserve">
    <value>An XML comment cannot contain '--', and '-' cannot be the last character.</value>
  </data>
  <data name="Xml_UndefNamespace" xml:space="preserve">
    <value>The '{0}' namespace is not defined.</value>
  </data>
  <data name="Xml_EmptyName" xml:space="preserve">
    <value>The empty string '' is not a valid name.</value>
  </data>
  <data name="Xml_EmptyLocalName" xml:space="preserve">
    <value>The empty string '' is not a valid local name.</value>
  </data>
  <data name="Xml_InvalidNameCharsDetail" xml:space="preserve">
    <value>Invalid name character in '{0}'. The '{1}' character, hexadecimal value 0x{2}, cannot be included in a name.</value>
  </data>
  <data name="Xml_NoStartTag" xml:space="preserve">
    <value>There was no XML start tag open.</value>
  </data>
  <data name="Xml_ClosedOrError" xml:space="preserve">
    <value>The Writer is closed or in error state.</value>
  </data>
  <data name="Xml_WrongToken" xml:space="preserve">
    <value>Token {0} in state {1} would result in an invalid XML document.</value>
  </data>
  <data name="Xml_XmlPrefix" xml:space="preserve">
    <value>Prefix 'xml' is reserved for use by XML and can be mapped only to namespace name 'http://www.w3.org/XML/1998/namespace'.</value>
  </data>
  <data name="Xml_XmlnsPrefix" xml:space="preserve">
    <value>Prefix 'xmlns' is reserved for use by XML.</value>
  </data>
  <data name="Xml_NamespaceDeclXmlXmlns" xml:space="preserve">
    <value>Prefix '{0}' cannot be mapped to namespace name reserved for 'xml' or 'xmlns'.</value>
  </data>
  <data name="Xml_NonWhitespace" xml:space="preserve">
    <value>Only white space characters should be used.</value>
  </data>
  <data name="Xml_DupXmlDecl" xml:space="preserve">
    <value>Cannot write XML declaration. WriteStartDocument method has already written it.</value>
  </data>
  <data name="Xml_CannotWriteXmlDecl" xml:space="preserve">
    <value>Cannot write XML declaration. XML declaration can be only at the beginning of the document.</value>
  </data>
  <data name="Xml_NoRoot" xml:space="preserve">
    <value>Document does not have a root element.</value>
  </data>
  <data name="Xml_InvalidPosition" xml:space="preserve">
    <value>The current position on the Reader is neither an element nor an attribute.</value>
  </data>
  <data name="Xml_IncompleteEntity" xml:space="preserve">
    <value>Incomplete entity contents.</value>
  </data>
  <data name="Xml_InvalidSurrogateHighChar" xml:space="preserve">
    <value>Invalid high surrogate character (0x{0}). A high surrogate character must have a value from range (0xD800 - 0xDBFF).</value>
  </data>
  <data name="Xml_InvalidSurrogateMissingLowChar" xml:space="preserve">
    <value>The surrogate pair is invalid. Missing a low surrogate character.</value>
  </data>
  <data name="Xml_InvalidSurrogatePairWithArgs" xml:space="preserve">
    <value>The surrogate pair (0x{0}, 0x{1}) is invalid. A high surrogate character (0xD800 - 0xDBFF) must always be paired with a low surrogate character (0xDC00 - 0xDFFF).</value>
  </data>
  <data name="Xml_RedefinePrefix" xml:space="preserve">
    <value>The prefix '{0}' cannot be redefined from '{1}' to '{2}' within the same start element tag.</value>
  </data>
  <data name="Xml_DtdAlreadyWritten" xml:space="preserve">
    <value>The DTD has already been written out.</value>
  </data>
  <data name="Xml_InvalidCharsInIndent" xml:space="preserve">
    <value>XmlWriterSettings.{0} can contain only valid XML text content characters when XmlWriterSettings.CheckCharacters is true. {1}</value>
  </data>
  <data name="Xml_IndentCharsNotWhitespace" xml:space="preserve">
    <value>XmlWriterSettings.{0} can contain only valid XML white space characters when XmlWriterSettings.CheckCharacters and XmlWriterSettings.NewLineOnAttributes are true.</value>
  </data>
  <data name="Xml_ConformanceLevelFragment" xml:space="preserve">
    <value>Make sure that the ConformanceLevel setting is set to ConformanceLevel.Fragment or ConformanceLevel.Auto if you want to write an XML fragment.</value>
  </data>
  <data name="Xml_SurrogatePairSplit" xml:space="preserve">
    <value>The second character surrogate pair is not in the input buffer to be written.</value>
  </data>
  <data name="XmlConvert_BadFormat" xml:space="preserve">
    <value>The string '{0}' is not a valid {1} value.</value>
  </data>
  <data name="XmlConvert_Overflow" xml:space="preserve">
    <value>Value '{0}' was either too large or too small for {1}.</value>
  </data>
  <data name="XmlConvert_TypeListBadMapping2" xml:space="preserve">
    <value>Xml type 'List of {0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'.</value>
  </data>
  <data name="XmlConvert_TypeNoPrefix" xml:space="preserve">
    <value>The QName '{0}' cannot be represented as a String.  A prefix for namespace '{1}' cannot be found.</value>
  </data>
  <data name="XmlConvert_TypeNoNamespace" xml:space="preserve">
    <value>The String '{0}' cannot be represented as an XmlQualifiedName.  A namespace for prefix '{1}' cannot be found.</value>
  </data>
  <data name="XmlConvert_NotOneCharString" xml:space="preserve">
    <value>String must be exactly one character long.</value>
  </data>
  <data name="XmlConvert_BadUri" xml:space="preserve">
    <value>The string was not recognized as a valid Uri.</value>
  </data>
  <data name="Sch_InvalidDateTimeOption" xml:space="preserve">
    <value>The '{0}' value for the 'dateTimeOption' parameter is not an allowed value for the 'XmlDateTimeSerializationMode' enumeration.</value>
  </data>
  <data name="Argument_InvalidCodePageConversionIndex" xml:space="preserve">
    <value>Unable to translate Unicode character \\u{0:X4} at index {1} to specified code page.</value>
  </data>
  <data name="ArgumentOutOfRange_Range" xml:space="preserve">
    <value>Valid values are between {0} and {1}, inclusive.</value>
  </data>
  <data name="Sch_ParEntityRefNesting" xml:space="preserve">
    <value>The parameter entity replacement text must nest properly within markup declarations.</value>
  </data>
  <data name="Xml_SystemPathResolverCannotOpenUri" xml:space="preserve">
    <value>Cannot open '{0}'. The Uri parameter must be a file system relative or absolute path.</value>
  </data>
  <data name="Enc_InvalidByteInEncoding" xml:space="preserve">
    <value>Invalid byte was found at index {0}.</value>
  </data>
  <data name="Xml_UnsupportedClass" xml:space="preserve">
    <value>Object type is not supported.</value>
  </data>
  <data name="ArgumentNull_Array" xml:space="preserve">
    <value>Array cannot be null.</value>
  </data>
  <data name="Argument_ConversionOverflow" xml:space="preserve">
    <value>Conversion buffer overflow.</value>
  </data>
  <data name="ArgumentOutOfRange_Index" xml:space="preserve">
    <value>Index was out of range. Must be non-negative and less than the size of the collection.</value>
  </data>
  <data name="ArgumentOutOfRange_NeedNonNegNum" xml:space="preserve">
    <value>Non-negative number required.</value>
  </data>
  <data name="ArgumentOutOfRange_IndexCount" xml:space="preserve">
    <value>Index and count must refer to a location within the string.</value>
  </data>
  <data name="Argument_EncodingConversionOverflowBytes" xml:space="preserve">
    <value>The output byte buffer is too small to contain the encoded data, encoding '{0}' fallback '{1}'.</value>
  </data>
  <data name="ArgumentOutOfRange_IndexCountBuffer" xml:space="preserve">
    <value>Index and count must refer to a location within the buffer.</value>
  </data>
  <data name="Argument_InvalidCharSequenceNoIndex" xml:space="preserve">
    <value>String contains invalid Unicode code points.</value>
  </data>
</root>