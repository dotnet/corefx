<?xml version="1.0" encoding="utf-8"?>
<root>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InternalCompilerError" xml:space="preserve">
    <value>Unerwartete Ausnahme beim Binden eines dynamischen Vorgangs</value>
  </data>
  <data name="BindRequireArguments" xml:space="preserve">
    <value>Ein Aufruf ohne aufrufendes Objekt kann nicht gebunden werden.</value>
  </data>
  <data name="BindCallFailedOverloadResolution" xml:space="preserve">
    <value>Fehler bei der Überladungsauflösung</value>
  </data>
  <data name="BindBinaryOperatorRequireTwoArguments" xml:space="preserve">
    <value>Binäre Operatoren müssen mit zwei Argumenten aufgerufen werden.</value>
  </data>
  <data name="BindUnaryOperatorRequireOneArgument" xml:space="preserve">
    <value>Unäre Operatoren müssen mit einem Argument aufgerufen werden.</value>
  </data>
  <data name="BindPropertyFailedMethodGroup" xml:space="preserve">
    <value>Der Name "{0}" ist an eine Methode gebunden und kann nicht wie eine Eigenschaft verwendet werden.</value>
  </data>
  <data name="BindPropertyFailedEvent" xml:space="preserve">
    <value>Das Ereignis "{0}" kann nur verwendet werden, auf der linken Seite des +</value>
  </data>
  <data name="BindInvokeFailedNonDelegate" xml:space="preserve">
    <value>Ein Nichtdelegattyp kann nicht aufgerufen werden.</value>
  </data>
  <data name="BindBinaryAssignmentRequireTwoArguments" xml:space="preserve">
    <value>Binäre Operatoren können nicht mit einem Argument aufgerufen werden.</value>
  </data>
  <data name="BindBinaryAssignmentFailedNullReference" xml:space="preserve">
    <value>Für einen NULL-Verweis kann keine Memberzuweisung ausgeführt werden.</value>
  </data>
  <data name="NullReferenceOnMemberException" xml:space="preserve">
    <value>Die Laufzeitbindung kann für einen NULL-Verweis nicht ausgeführt werden.</value>
  </data>
  <data name="BindCallToConditionalMethod" xml:space="preserve">
    <value>Die {0}-Methode kann nicht dynamisch aufgerufen werden, da sie ein Conditional-Attribut enthält.</value>
  </data>
  <data name="BindToVoidMethodButExpectResult" xml:space="preserve">
    <value>Der Typ "void" kann nicht implizit in "object" konvertiert werden.</value>
  </data>
  <data name="BadBinaryOps" xml:space="preserve">
    <value>Der {0}-Operator kann nicht auf Operanden vom Typ "{1}" und "{2}" angewendet werden.</value>
  </data>
  <data name="BadIndexLHS" xml:space="preserve">
    <value>Eine Indizierung mit [] kann nicht auf einen Ausdruck vom Typ "{0}" angewendet werden.</value>
  </data>
  <data name="BadIndexCount" xml:space="preserve">
    <value>Falsche Indexanzahl in []. {0} wurde erwartet</value>
  </data>
  <data name="BadUnaryOp" xml:space="preserve">
    <value>Der {0}-Operator kann nicht auf einen Operanden vom Typ "{1}" angewendet werden.</value>
  </data>
  <data name="NoImplicitConv" xml:space="preserve">
    <value>Der {0}-Typ kann nicht implizit in {1} konvertiert werden.</value>
  </data>
  <data name="NoExplicitConv" xml:space="preserve">
    <value>Der {0}-Typ kann nicht in {1} konvertiert werden.</value>
  </data>
  <data name="ConstOutOfRange" xml:space="preserve">
    <value>Der Konstantenwert "{0}" kann nicht in {1} konvertiert werden.</value>
  </data>
  <data name="AmbigBinaryOps" xml:space="preserve">
    <value>Der {0}-Operator ist bei Operanden vom Typ "{1}" und "{2}" mehrdeutig.</value>
  </data>
  <data name="AmbigUnaryOp" xml:space="preserve">
    <value>Der {0}-Operator ist für einen Operanden vom Typ "{1}" mehrdeutig.</value>
  </data>
  <data name="ValueCantBeNull" xml:space="preserve">
    <value>NULL kann nicht in {0} konvertiert werden, da dieser Werttyp nicht auf NULL festgelegt werden kann.</value>
  </data>
  <data name="WrongNestedThis" xml:space="preserve">
    <value>Auf einen nicht statischen Member des äußeren {0}-Typs kann nicht über den geschachtelten {1}-Typ zugegriffen werden.</value>
  </data>
  <data name="NoSuchMember" xml:space="preserve">
    <value>{0} enthält keine Definition für {1}.</value>
  </data>
  <data name="ObjectRequired" xml:space="preserve">
    <value>Für das nicht statische Feld, die Methode oder die Eigenschaft "{0}" ist ein Objektverweis erforderlich.</value>
  </data>
  <data name="AmbigCall" xml:space="preserve">
    <value>Der Aufruf unterscheidet nicht eindeutig zwischen den folgenden Methoden oder Eigenschaften: {0} und {1}</value>
  </data>
  <data name="BadAccess" xml:space="preserve">
    <value>Der Zugriff auf "{0}" ist aufgrund des Schutzgrads nicht möglich.</value>
  </data>
  <data name="MethDelegateMismatch" xml:space="preserve">
    <value>Keine Überladung für {0} stimmt mit dem Delegaten "{1}" überein.</value>
  </data>
  <data name="AssgLvalueExpected" xml:space="preserve">
    <value>Die linke Seite einer Zuweisung muss eine Variable, eine Eigenschaft oder ein Indexer sein.</value>
  </data>
  <data name="NoConstructors" xml:space="preserve">
    <value>Für den {0}-Typ sind keine Konstruktoren definiert.</value>
  </data>
  <data name="BadDelegateConstructor" xml:space="preserve">
    <value>Der Delegat "{0}" enthält keinen gültigen Konstruktor.</value>
  </data>
  <data name="PropertyLacksGet" xml:space="preserve">
    <value>Die Eigenschaft oder der Indexer "{0}" kann in diesem Kontext nicht verwendet werden, weil der get-Accessor fehlt.</value>
  </data>
  <data name="ObjectProhibited" xml:space="preserve">
    <value>Auf den Member "{0}" kann nicht mit einem Instanzverweis zugegriffen werden. Qualifizieren Sie ihn stattdessen mit einem Typnamen.</value>
  </data>
  <data name="AssgReadonly" xml:space="preserve">
    <value>Einem schreibgeschützten Feld kann nichts zugewiesen werden (außer in einem Konstruktor oder Variableninitialisierer).</value>
  </data>
  <data name="RefReadonly" xml:space="preserve">
    <value>Einem schreibgeschützten Feld kann kein Verweis und keine Ausgabe übergeben werden (außer in einem Konstruktor).</value>
  </data>
  <data name="AssgReadonlyStatic" xml:space="preserve">
    <value>Einem statischen, schreibgeschützten Feld kann nichts zugewiesen werden (außer in einem statischen Konstruktor oder einem Variableninitialisierer).</value>
  </data>
  <data name="RefReadonlyStatic" xml:space="preserve">
    <value>Einem statischen, schreibgeschützten Feld kann kein Verweis und keine Ausgabe übergeben werden (außer in einem statischen Konstruktor)</value>
  </data>
  <data name="AssgReadonlyProp" xml:space="preserve">
    <value>Für die Eigenschaft oder den Indexer "{0}" ist eine Zuweisung nicht möglich -- sie sind schreibgeschützt.</value>
  </data>
  <data name="RefProperty" xml:space="preserve">
    <value>Eine Eigenschaft oder ein Indexer kann nicht als out- oder ref-Parameter übergeben werden.</value>
  </data>
  <data name="UnsafeNeeded" xml:space="preserve">
    <value>Dynamische Aufrufe können nicht in Verbindung mit Zeigern verwendet werden.</value>
  </data>
  <data name="BadBoolOp" xml:space="preserve">
    <value>Um als Kurzschlussoperator anwendbar zu sein, muss der Rückgabetyp eines benutzerdefinierten logischen Operators ({0}) mit dem Typ seiner zwei Parameter übereinstimmen.</value>
  </data>
  <data name="MustHaveOpTF" xml:space="preserve">
    <value>Der Typ ({0}) muss Deklarationen des True- und des False-Operators enthalten.</value>
  </data>
  <data name="ConstOutOfRangeChecked" xml:space="preserve">
    <value>Der Konstantenwert "{0}" kann nicht in {1} konvertiert werden (verwenden Sie zum Außerkraftsetzen die unchecked-Syntax).</value>
  </data>
  <data name="AmbigMember" xml:space="preserve">
    <value>Mehrdeutigkeit zwischen {0} und {1}</value>
  </data>
  <data name="NoImplicitConvCast" xml:space="preserve">
    <value>Der {0}-Typ kann nicht implizit in {1} konvertiert werden. Es ist bereits eine explizite Konvertierung vorhanden (möglicherweise fehlt eine Umwandlung).</value>
  </data>
  <data name="InaccessibleGetter" xml:space="preserve">
    <value>Die Eigenschaft oder der Indexer "{0}" kann in diesem Kontext nicht verwendet werden, da nicht auf den get-Accessor zugegriffen werden kann.</value>
  </data>
  <data name="InaccessibleSetter" xml:space="preserve">
    <value>Die Eigenschaft oder der Indexer "{0}" kann in diesem Kontext nicht verwendet werden, da nicht auf den set-Accessor zugegriffen werden kann.</value>
  </data>
  <data name="BadArity" xml:space="preserve">
    <value>Die Verwendung von {1} "{0}" (generisch) erfordert {2}-Typargumente.</value>
  </data>
  <data name="BadTypeArgument" xml:space="preserve">
    <value>Der Typ "{0}" darf nicht als Typargument verwendet werden.</value>
  </data>
  <data name="TypeArgsNotAllowed" xml:space="preserve">
    <value>{1} "{0}" kann nicht mit Typargumenten verwendet werden.</value>
  </data>
  <data name="HasNoTypeVars" xml:space="preserve">
    <value>{1} "{0}" ist nicht generisch und kann daher nicht mit Typargumenten verwendet werden.</value>
  </data>
  <data name="NewConstraintNotSatisfied" xml:space="preserve">
    <value>{2} muss ein nicht abstrakter Typ mit einem öffentlichen parameterlosen Konstruktor sein, um im generischen Typ oder in der generischen {0}-Methode als {1}-Parameter verwendet werden zu können.</value>
  </data>
  <data name="GenericConstraintNotSatisfiedRefType" xml:space="preserve">
    <value>Der {3}-Typ kann nicht als {2}-Typparameter im generischen Typ oder in der generischen {0}-Methode verwendet werden. Es ist keine implizite Verweiskonvertierung von {3} in {1} vorhanden.</value>
  </data>
  <data name="GenericConstraintNotSatisfiedNullableEnum" xml:space="preserve">
    <value>Der {3}-Typ kann nicht als {2}-Typparameter im generischen Typ oder in der generischen {0}-Methode verwendet werden. Der {3}-Typ, der NULL-Werte zulässt, entspricht nicht der Einschränkung von {1}.</value>
  </data>
  <data name="GenericConstraintNotSatisfiedNullableInterface" xml:space="preserve">
    <value>Der {3}-Typ kann nicht als {2}-Typparameter im generischen Typ oder in der generischen {0}-Methode verwendet werden. Der {3}-Typ, der NULL-Werte zulässt, entspricht nicht der Einschränkung von {1}. Typen, die NULL-Werte zulassen, können Schnittstelleneinschränkungen nicht entsprechen.</value>
  </data>
  <data name="GenericConstraintNotSatisfiedTyVar" xml:space="preserve">
    <value>Der {3}-Typ kann nicht als {2}-Typparameter im generischen Typ oder in der generischen {0}-Methode verwendet werden. Es ist keine Boxing-Konvertierung oder Typparameterkonvertierung von {3} in {1} vorhanden.</value>
  </data>
  <data name="GenericConstraintNotSatisfiedValType" xml:space="preserve">
    <value>Der {3}-Typ kann nicht als {2}-Typparameter im generischen Typ oder in der generischen {0}-Methode verwendet werden. Es ist keine Boxing-Konvertierung von {3} in {1} vorhanden.</value>
  </data>
  <data name="TypeVarCantBeNull" xml:space="preserve">
    <value>NULL kann nicht in den {0}-Typparameter konvertiert werden, da dieser Werttyp möglicherweise nicht auf NULL festgelegt werden kann. Verwenden Sie stattdessen ggf. default({0}).</value>
  </data>
  <data name="BadRetType" xml:space="preserve">
    <value>Der Rückgabetyp von {1} {0} ist falsch.</value>
  </data>
  <data name="CantInferMethTypeArgs" xml:space="preserve">
    <value>Die Typargumente der {0}-Methode können nicht per Rückschluss aus der Syntax abgeleitet werden. Geben Sie die Typargumente explizit an.</value>
  </data>
  <data name="MethGrpToNonDel" xml:space="preserve">
    <value>Die {0}-Methodengruppe kann nicht in den Nichtdelegattyp "{1}" konvertiert werden. Wollten Sie die Methode aufrufen?</value>
  </data>
  <data name="RefConstraintNotSatisfied" xml:space="preserve">
    <value>Der {2}-Typ muss ein Referenztyp sein, damit er als {1}-Parameter im generischen Typ oder in der generischen {0}-Methode verwendet werden kann.</value>
  </data>
  <data name="ValConstraintNotSatisfied" xml:space="preserve">
    <value>Der {2}-Typ darf keine NULL-Werte zulassen, wenn er als {1}-Parameter im generischen Typ oder in der generischen {0}-Methode verwendet werden soll.</value>
  </data>
  <data name="AmbigUDConv" xml:space="preserve">
    <value>Mehrdeutige benutzerdefinierte Konvertierungen von {0} und {1} bei der Konvertierung von {2} in {3}</value>
  </data>
  <data name="BindToBogus" xml:space="preserve">
    <value>{0} wird von der Sprache nicht unterstützt.</value>
  </data>
  <data name="CantCallSpecialMethod" xml:space="preserve">
    <value>{0}: Der Operator oder Accessor kann nicht explizit aufgerufen werden.</value>
  </data>
  <data name="ConvertToStaticClass" xml:space="preserve">
    <value>Die Konvertierung in den statischen {0}-Typ ist nicht möglich.</value>
  </data>
  <data name="GenericArgIsStaticClass" xml:space="preserve">
    <value>{0}: Statische Typen können nicht als Typargumente verwendet werden.</value>
  </data>
  <data name="IncrementLvalueExpected" xml:space="preserve">
    <value>Der Operand eines Inkrement- oder Dekrementoperators muss eine Variable, eine Eigenschaft oder ein Indexer sein.</value>
  </data>
  <data name="NoSuchMemberOrExtension" xml:space="preserve">
    <value>{0} enthält keine Definition für {1}, und es konnte keine {1}-Erweiterungsmethode gefunden werden, die ein erstes Argument vom Typ "{0}" akzeptiert (möglicherweise fehlt eine Using-Direktive oder ein Assemblyverweis).</value>
  </data>
  <data name="ValueTypeExtDelegate" xml:space="preserve">
    <value>Die im {1}-Werttyp definierten {0}-Erweiterungsmethoden können nicht zum Erstellen von Delegaten verwendet werden.</value>
  </data>
  <data name="BadArgCount" xml:space="preserve">
    <value>Keine Überladung für die {0}-Methode nimmt {1}-Argumente an.</value>
  </data>
  <data name="BadArgTypes" xml:space="preserve">
    <value>Die beste Übereinstimmung für die überladene {0}-Methode enthält einige ungültige Argumente.</value>
  </data>
  <data name="BadArgType" xml:space="preserve">
    <value>{0}-Argument: Die Konvertierung von {1} in {2} ist nicht möglich.</value>
  </data>
  <data name="RefLvalueExpected" xml:space="preserve">
    <value>Ein ref- oder out-Argument muss eine zuweisbare Variable sein.</value>
  </data>
  <data name="BadProtectedAccess" xml:space="preserve">
    <value>Auf den geschützten Member "{0}" kann nicht über einen Qualifizierer vom Typ "{1}" zugegriffen werden. Der Qualifizierer muss vom Typ "{2}" (oder von ihm abgeleitet) sein.</value>
  </data>
  <data name="BindToBogusProp2" xml:space="preserve">
    <value>Die Eigenschaft, der Indexer oder das Ereignis "{0}" wird von der Sprache nicht unterstützt. Rufen Sie die {1}- oder {2}-Accessormethoden direkt auf.</value>
  </data>
  <data name="BindToBogusProp1" xml:space="preserve">
    <value>Die Eigenschaft, der Indexer oder das Ereignis "{0}" wird von der Sprache nicht unterstützt. Rufen Sie die {1}-Accessormethode direkt auf.</value>
  </data>
  <data name="BadDelArgCount" xml:space="preserve">
    <value>Der Delegat "{0}" akzeptiert {1}-Argumente nicht.</value>
  </data>
  <data name="BadDelArgTypes" xml:space="preserve">
    <value>Der Delegat "{0}" enthält einige ungültige Argumente.</value>
  </data>
  <data name="AssgReadonlyLocal" xml:space="preserve">
    <value>{0} ist schreibgeschützt. Eine Zuweisung ist daher nicht möglich.</value>
  </data>
  <data name="RefReadonlyLocal" xml:space="preserve">
    <value>{0} ist schreibgeschützt und kann daher nicht als ref- oder out-Argument übergeben werden.</value>
  </data>
  <data name="ReturnNotLValue" xml:space="preserve">
    <value>Der Rückgabewert von {0} ist keine Variable und kann daher nicht geändert werden.</value>
  </data>
  <data name="BadArgExtraRef" xml:space="preserve">
    <value>Das {0}-Argument darf nicht mit dem {1}-Schlüsselwort übergeben werden.</value>
  </data>
  <data name="BadArgRef" xml:space="preserve">
    <value>Das {0}-Argument muss mit dem {1}-Schlüsselwort übergeben werden.</value>
  </data>
  <data name="AssgReadonly2" xml:space="preserve">
    <value>Member des schreibgeschützten Felds "{0}" können nicht geändert werden (außer in einem Konstruktor oder Variableninitialisierer).</value>
  </data>
  <data name="RefReadonly2" xml:space="preserve">
    <value>An Member des schreibgeschützten Felds "{0}" können keine ref- oder out-Argumente übergeben werden (außer in einem Konstruktor).</value>
  </data>
  <data name="AssgReadonlyStatic2" xml:space="preserve">
    <value>Für Felder eines statischen schreibgeschützten Felds "{0}" ist eine Zuweisung nicht möglich (außer in einem statischen Konstruktor oder einem Variableninitialisierer).</value>
  </data>
  <data name="RefReadonlyStatic2" xml:space="preserve">
    <value>An Felder des schreibgeschützten Felds "{0}" können keine ref- oder out-Argumente übergeben werden (außer in einem Konstruktor).</value>
  </data>
  <data name="AssgReadonlyLocalCause" xml:space="preserve">
    <value>{0} ist ein(e) {1}. Eine Zuweisung ist daher nicht möglich.</value>
  </data>
  <data name="RefReadonlyLocalCause" xml:space="preserve">
    <value>{0} ist ein(e) {1} und kann daher nicht als ref- oder out-Argument übergeben werden.</value>
  </data>
  <data name="DelegateOnNullable" xml:space="preserve">
    <value>Kann Delegaten "{0}" keine Bindung an weil es ein Mitglied von "System.Nullable&lt;T&gt;ist"</value>
  </data>
  <data name="BadCtorArgCount" xml:space="preserve">
    <value>"{0}" enthält keinen Konstruktor, der {1}-Argumente akzeptiert.</value>
  </data>
  <data name="BadExtensionArgTypes" xml:space="preserve">
    <value>"{0}" enthält keine Definition für {1}, und die Überladung der optimalen {2}-Erweiterungsmethode enthält einige ungültige Argumente.</value>
  </data>
  <data name="BadInstanceArgType" xml:space="preserve">
    <value>Instanzenargument: Konvertierung von {0} in {1} ist nicht möglich.</value>
  </data>
  <data name="NonInvocableMemberCalled" xml:space="preserve">
    <value>Der nicht aufrufbare Member "{0}" kann nicht wie eine Methode verwendet werden.</value>
  </data>
  <data name="NamedArgumentSpecificationBeforeFixedArgument" xml:space="preserve">
    <value>Die Spezifikationen für benannte Argumente müssen nach Angabe aller festen Argumente angezeigt werden.</value>
  </data>
  <data name="BadNamedArgument" xml:space="preserve">
    <value>Die beste Überladung für {0} enthält keinen Parameter mit dem Namen "{1}".</value>
  </data>
  <data name="BadNamedArgumentForDelegateInvoke" xml:space="preserve">
    <value>Der Delegat "{0}" enthält keinen Parameter mit dem Namen "{1}".</value>
  </data>
  <data name="DuplicateNamedArgument" xml:space="preserve">
    <value>Das benannte {0}-Argument kann nicht mehrmals angegeben werden.</value>
  </data>
  <data name="NamedArgumentUsedInPositional" xml:space="preserve">
    <value>Das benannte {0}-Argument legt einen Parameter fest, für den bereits ein positionelles Argument angegeben wurde.</value>
  </data>
</root>
