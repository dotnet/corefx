<root>
  <!-- 
    Microsoft ResX Schema

    Version 1.3

    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
      [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
      [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>

    There are any number of "resheader" rows that contain simple 
    name/value pairs.

    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.

    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
      : System.Serialization.Formatters.Binary.BinaryFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
      : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
      : using a System.ComponentModel.TypeConverter
      : and then encoded with base64 encoding.
  -->
  
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Validation_scalar_range_violation_not_different" xml:space="preserve">
    <value>The value must be different than {0}.</value>
  </data>
  <data name="Validation_scalar_range_violation_not_equal" xml:space="preserve">
    <value>The value must be equal to {0}.</value>
  </data>
  <data name="Validation_scalar_range_violation_not_in_range" xml:space="preserve">
    <value>The value must be inside the range {0}-{1}.</value>
  </data>
  <data name="Validation_scalar_range_violation_not_outside_range" xml:space="preserve">
    <value>The value must not be in the range {0}-{1}.</value>
  </data>
  <data name="Validator_Attribute_param_not_validator" xml:space="preserve">
    <value>Only types derived from {0} are valid validator types.</value>
  </data>
  <data name="Validator_does_not_support_elem_type" xml:space="preserve">
    <value>The supplied validator does not support validating the configuration element type {0}.</value>
  </data>
  <data name="Validator_does_not_support_prop_type" xml:space="preserve">
    <value>The supplied validator does not support the type of the property '{0}'.</value>
  </data>
  <data name="Validator_element_not_valid" xml:space="preserve">
    <value>The configuration element '{0}' is not valid. The error is: {1}</value>
  </data>
  <data name="Validator_method_not_found" xml:space="preserve">
    <value>The supplied method name '{0}' was not found. The callback method must be a public static void method with one object parameter.</value>
  </data>
  <data name="Validator_min_greater_than_max" xml:space="preserve">
    <value>The upper range limit value must be greater than the lower range limit value.</value>
  </data>
  <data name="Validator_scalar_resolution_violation" xml:space="preserve">
    <value>The value must have a resolution of {0}.</value>
  </data>
  <data name="Validator_string_invalid_chars" xml:space="preserve">
    <value>The string cannot contain any of the following characters: '{0}'.</value>
  </data>
  <data name="Validator_string_max_length" xml:space="preserve">
    <value>The string must be no more than {0} characters long.</value>
  </data>
  <data name="Validator_string_min_length" xml:space="preserve">
    <value>The string must be at least {0} characters long.</value>
  </data>
  <data name="Validator_value_type_invalid" xml:space="preserve">
    <value>The supplied value is not of type which the validator can process.</value>
  </data>
  <data name="Validator_multiple_validator_attributes" xml:space="preserve">
    <value>Multiple validator attributes are not currently supported. The property '{0}' has more than one validator attribute associated with it.</value>
  </data>
  <data name="Validator_timespan_value_must_be_positive" xml:space="preserve">
    <value>The time span value must be positive.</value>
  </data>
  <data name="No_exception_information_available" xml:space="preserve">
    <value>No information about the exception is available.</value>
  </data>
  <data name="Parameter_Invalid" xml:space="preserve">
    <value>The parameter '{0}' is invalid.</value>
  </data>
  <data name="Parameter_NullOrEmpty" xml:space="preserve">
    <value>The string parameter '{0}' cannot be null or empty.</value>
  </data>
  <data name="Property_NullOrEmpty" xml:space="preserve">
    <value>The value assigned to property '{0}' cannot be null or empty.</value>
  </data>
  <data name="Property_Invalid" xml:space="preserve">
    <value>The value assigned to property '{0}' is invalid.</value>
  </data>
  <data name="Unexpected_Error" xml:space="preserve">
    <value>An unexpected error occurred in '{0}'.</value>
  </data>
  <data name="Wrapped_exception_message" xml:space="preserve">
    <value>{0}: {1}</value>
  </data>
  <data name="TypeNotPublic" xml:space="preserve">
    <value>Unable to load type '{0}' because it is not public.</value>
  </data>
  <data name="Config_type_doesnt_inherit_from_type" xml:space="preserve">
    <value>Type '{0}' does not inherit from '{1}'.</value>
  </data>
</root>