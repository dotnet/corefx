<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgCntMustBeGreaterThanNameCnt" xml:space="preserve">
    <value>Argument count must be greater than number of named arguments.</value>
  </data>
  <data name="DynamicObjectResultNotAssignable" xml:space="preserve">
    <value>The result type '{0}' of the dynamic binding produced by the object with type '{1}' for the binder '{2}' is not compatible with the result type '{3}' expected by the call site.</value>
  </data>
  <data name="NoOrInvalidRuleProduced" xml:space="preserve">
    <value>No or Invalid rule produced</value>
  </data>
  <data name="TypeParameterIsNotDelegate" xml:space="preserve">
    <value>Type parameter is {0}. Expected a delegate.</value>
  </data>
  <data name="FirstArgumentMustBeCallSite" xml:space="preserve">
    <value>First argument of delegate must be CallSite</value>
  </data>
  <data name="OutOfRange" xml:space="preserve">
    <value>{0} must be greater than or equal to {1}</value>
  </data>
  <data name="BinderNotCompatibleWithCallSite" xml:space="preserve">
    <value>The result type '{0}' of the binder '{1}' is not compatible with the result type '{2}' expected by the call site.</value>
  </data>
  <data name="DynamicBinderResultNotAssignable" xml:space="preserve">
    <value>The result type '{0}' of the dynamic binding produced by binder '{1}' is not compatible with the result type '{2}' expected by the call site.</value>
  </data>
  <data name="DynamicBindingNeedsRestrictions" xml:space="preserve">
    <value>The result of the dynamic binding produced by the object with type '{0}' for the binder '{1}' needs at least one restriction.</value>
  </data>
  <data name="BindingCannotBeNull" xml:space="preserve">
    <value>Bind cannot return null.</value>
  </data>
  <data name="TypeMustBeDerivedFromSystemDelegate" xml:space="preserve">
    <value>Type must be derived from System.Delegate</value>
  </data>
  <data name="InvalidMetaObjectCreated" xml:space="preserve">
    <value>An IDynamicMetaObjectProvider {0} created an invalid DynamicMetaObject instance.</value>
  </data>
  <data name="AmbiguousMatchInExpandoObject" xml:space="preserve">
    <value>More than one key matching '{0}' was found in the ExpandoObject.</value>
  </data>
  <data name="SameKeyExistsInExpando" xml:space="preserve">
    <value>An element with the same key '{0}' already exists in the ExpandoObject.</value>
  </data>
  <data name="KeyDoesNotExistInExpando" xml:space="preserve">
    <value>The specified key '{0}' does not exist in the ExpandoObject.</value>
  </data>
  <data name="CollectionModifiedWhileEnumerating" xml:space="preserve">
    <value>Collection was modified; enumeration operation may not execute.</value>
  </data>
  <data name="CollectionReadOnly" xml:space="preserve">
    <value>Collection is read-only.</value>
  </data>
  <data name="ArgumentTypeCannotBeVoid" xml:space="preserve">
    <value>Argument type cannot be void</value>
  </data>
  <data name="MethodPreconditionViolated" xml:space="preserve">
    <value>Method precondition violated</value>
  </data>
  <data name="InvalidArgumentValue" xml:space="preserve">
    <value>Invalid argument value</value>
  </data>
  <data name="NonEmptyCollectionRequired" xml:space="preserve">
    <value>Non-empty collection required</value>
  </data>
  <data name="InvalidNullValue" xml:space="preserve">
    <value>The value null is not of type '{0}' and cannot be used in this collection.</value>
  </data>
  <data name="InvalidObjectType" xml:space="preserve">
    <value>The value '{0}' is not of type '{1}' and cannot be used in this collection.</value>
  </data>
  <data name="TypeContainsGenericParameters" xml:space="preserve">
    <value>Type {0} contains generic parameters</value>
  </data>
  <data name="TypeIsGeneric" xml:space="preserve">
    <value>Type {0} is a generic type definition</value>
  </data>
  <data name="EnumerationIsDone" xml:space="preserve">
    <value>Enumeration has either not started or has already finished.</value>
  </data>
  <data name="ExpressionMustBeReadable" xml:space="preserve">
    <value>Expression must be readable</value>
  </data>
  <data name="ExpressionTypeDoesNotMatchMethodParameter" xml:space="preserve">
    <value>Expression of type '{0}' cannot be used for parameter of type '{1}' of method '{2}'</value>
  </data>
  <data name="ExpressionTypeDoesNotMatchParameter" xml:space="preserve">
    <value>Expression of type '{0}' cannot be used for parameter of type '{1}'</value>
  </data>
  <data name="ExpressionTypeDoesNotMatchConstructorParameter" xml:space="preserve">
    <value>Expression of type '{0}' cannot be used for constructor parameter of type '{1}'</value>
  </data>
  <data name="IncorrectNumberOfMethodCallArguments" xml:space="preserve">
    <value>Incorrect number of arguments supplied for call to method '{0}'</value>
  </data>
  <data name="IncorrectNumberOfLambdaArguments" xml:space="preserve">
    <value>Incorrect number of arguments supplied for lambda invocation</value>
  </data>
  <data name="IncorrectNumberOfConstructorArguments" xml:space="preserve">
    <value>Incorrect number of arguments for constructor</value>
  </data>
</root>