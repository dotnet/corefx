// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Xunit;
using Xunit.Abstractions;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Xml;
using System.Xml.Xsl;
using OLEDB.Test.ModuleCore;

namespace System.Xml.Tests
{
    //[TestCase(Name = "Load(Type) API Functional Tests", Desc = "This testcase exercises the API tests for the Load(Type) overload")]
    public class XsltcAPITest : XsltcTestCaseBase
    {
        private ITestOutputHelper _output;
        public XsltcAPITest(ITestOutputHelper output) : base(output)
        {
            _output = output;
        }

        //[Variation("1", Desc = "Pass null, Load((Type) null)", Pri = 0)]
        [InlineData()]
        [Theory]
        public void Var1()
        {
            try
            {
                new XslCompiledTransform().Load((Type)null);
            }
            catch (ArgumentNullException)
            {
                return;
            }

            throw new CTestFailedException("Did not throw ArgumentException");
        }

        //[Variation("2", Desc = "Pass types that are not generated by xsltc.exe, Load(typeof(Object))", Pri = 1)]
        [InlineData()]
        [Theory]
        public void Var2()
        {
            try
            {
                new XslCompiledTransform().Load(typeof(Object));
            }
            catch (ArgumentException)
            {
                return;
            }

            throw new CTestFailedException("Did not throw ArgumentException");
        }

        /*//[Variation("3", Desc = "Exercise loading from the same class within different threads", Pri = 1)]
        [InlineData()]
        [Theory]
        public void Var3()
        {
            var xsltList = new SynchronizedCollection<XslCompiledTransform>();
            var rThreads = new CThreads(_output);

            for (int i = 0; i < 10; i++)
            {
                rThreads.Add(o =>
                    {
                        var xslt = new XslCompiledTransform();
                        xsltList.Add(xslt);
                        XsltcUtil.LoadFromAssembly(ref xslt, "IdentityTransform");
                        return;
                    }, i.ToString(CultureInfo.InvariantCulture));
            }

            //Wait until they are complete
            rThreads.Start();
            rThreads.Wait();

            return Verify(xsltList);
        }*/

        //[Variation("4", Desc = "XSLCompiledTransform Load(Type) changes the static data of the Type to XmlILCommand", Pri = 1)]
        [InlineData()]
        //[Theory] //Disabled as it tries to load an assembly which does not exist on CoreFX anymore
        public void Var4()
        {
            var xslt = new XslCompiledTransform();

            Type t = Assembly.Load(new AssemblyName("TestStylesheet")).GetType("TestStylesheet");
            BindingFlags bindingFlags = BindingFlags.NonPublic | BindingFlags.Static;

            Type beforeLoad = t.GetTypeInfo().GetField("staticData", bindingFlags).GetValue(null).GetType();
            xslt.Load(t);
            Type afterLoad = t.GetTypeInfo().GetField("staticData", bindingFlags).GetValue(null).GetType();
            CError.Compare(beforeLoad, afterLoad, "Mismatch in type, before and after load");
            return;
        }

        public void Verify(IList<XslCompiledTransform> xsltList)
        {
            var inputXml = new XmlDocument();
            inputXml.LoadXml("<foo><bar>Hello, world!</bar></foo>");

            foreach (XslCompiledTransform xslt in xsltList)
            {
                using (var actualStream = new MemoryStream())
                using (var sw = new StreamWriter(actualStream) { AutoFlush = true })
                {
                    xslt.Transform(inputXml, null, sw);

                    CompareOutput("<?xml version=\"1.0\" encoding=\"utf-8\"?><foo><bar>Hello, world!</bar></foo>", actualStream);
                }
            }
        }
    }
}