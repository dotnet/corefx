// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

#include <stdlib.h>
#include <stdint.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <assert.h>
#include <unistd.h>
#include <time.h>
#include <errno.h>

/*

Generate random bytes. The generated bytes are not cryptographically strong.

*/
extern "C" void SystemNative_GetNonCryptographicallySecureRandomBytes(uint8_t* buffer, int32_t bufferLength)
{
    assert(buffer != NULL);

    int rand_des;
    uint8_t* buf = (uint8_t*)alloca(bufferLength);
    long num = 0;
    static bool sMissingDevURandom;
    static bool sInitializedMRand;

    if (!sMissingDevURandom)
    {
        if ((rand_des = open("/dev/urandom", O_RDONLY, 0)) == -1)
        {
            if (errno == ENOENT)
            {                
                sMissingDevURandom = true;
            }

            // Back off and try mrand48.
        }
        else
        {
            int32_t offset = 0;
            do
            {
                ssize_t n = read(rand_des, buf + offset , (size_t)(bufferLength - offset));
                if (n == -1)
                {
                    if (errno == EINTR)
                    {
                        continue;
                    }

                    break;
                }

                offset += n;
            }
            while (offset != bufferLength);

            assert(offset == bufferLength);

            close(rand_des);
        }
    }

    if (!sInitializedMRand)
    {
        srand48(time(NULL));
        sInitializedMRand = true;
    }

    // always xor srand48 over the whole buffer to get some randomness
    // in case /dev/urandom is not really random

    for (int i = 0; i < bufferLength; i++)
    {
        if (i % 4 == 0)
        {
            num = lrand48();
        }

        *(buffer + i) ^= buf[i] ^ num;
        num >>= 8;
    }
}
