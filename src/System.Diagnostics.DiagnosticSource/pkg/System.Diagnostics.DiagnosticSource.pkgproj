<Project DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />
  <ItemGroup>
    <ProjectReference Include="..\src\System.Diagnostics.DiagnosticSource.csproj">
      <SupportedFramework>net46;net45;netcore45;netcoreapp1.0;wpa81;$(AllXamarinFrameworks)</SupportedFramework>
    </ProjectReference>
    <!-- this package is part of the implementation closure of NETStandard.Library
         therefore it cannot reference NETStandard.Library -->
    <SuppressMetaPackage Include="NETStandard.Library" />
    
    <!-- Since UAP and .NETCoreApp are package based we still want to enable
         OOBing libraries that happen to overlap with their framework package.
         This avoids us having to lock the API in our NuGet packages just 
         to match what shipped inbox: since we can provide a new library 
         we can update it to add API without raising the netstandard version. -->
    <ValidatePackageSuppression Include="TreatAsOutOfBox">
      <Value>.NETCoreApp;UAP</Value>
    </ValidatePackageSuppression>
  </ItemGroup>

  <!-- This target is a work-around and should be removed by 6/2019 (by then a fixed version of System.Memory
       should be available so that System.Memory does not reference NetStandard1.X)
       See Eric St John for details. -->

  <Target Name="RemoveSystemMemoryNetStandard1x" AfterTargets="GetNuGetPackageDependencies">
    <!-- System.Memory is causing a cycle when used for netstandard1.x.
         This is due to S.M referencing the NETStandard.Library metapackage for netstandard1.x
         and that meta-package includes this package (System.Diagnostics.DiagnosticSource) in 
         its closure.
         Remove the dependency for now until we can get a new build of System.Memory that doesn't 
         reference the NETStandard.Library metapackage. -->
    <ItemGroup>
      <Dependency Remove="@(Dependency)" Condition="'%(Identity)' == 'System.Memory' AND $([System.String]::new('%(TargetFramework)').StartsWith('netstandard1.'))" />
    </ItemGroup>
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.targets))\Directory.Build.targets" />
</Project>
