<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentOutOfRange_NeedNonNegNum" xml:space="preserve">
    <value>Non-negative number required.</value>
  </data>
  <data name="ArgumentOutOfRange_Index" xml:space="preserve">
    <value>Index was out of range. Must be non-negative and less than the size of the collection.</value>
  </data>
  <data name="ArgumentOutOfRange_IndexCountBuffer" xml:space="preserve">
    <value>Index and count must refer to a location within the buffer.</value>
  </data>
  <data name="Argument_AddingDuplicate" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
  </data>
  <data name="Argument_IdnBadLabelSize" xml:space="preserve">
    <value>IDN labels must be between 1 and 63 characters long.</value>
  </data>
  <data name="Argument_IdnBadPunycode" xml:space="preserve">
    <value>Invalid IDN encoded string.</value>
  </data>
  <data name="Argument_IdnIllegalName" xml:space="preserve">
    <value>Decoded string is not a valid IDN name.</value>
  </data>
  <data name="Argument_InvalidCharSequence" xml:space="preserve">
    <value>Invalid Unicode code point found at index {0}.</value>
  </data>
  <data name="Argument_InvalidCharSequenceNoIndex" xml:space="preserve">
    <value>String contains invalid Unicode code points.</value>
  </data>
  <data name="Argument_InvalidNormalizationForm" xml:space="preserve">
    <value>Invalid normalization form.</value>
  </data>
  <data name="Arg_OutOfMemoryException" xml:space="preserve">
    <value>Insufficient memory to continue the execution of the program.</value>
  </data>
  <data name="UnknownError_Num" xml:space="preserve">
    <value>Unknown error '{0}'.</value>
  </data>
  <data name="net_uri_AlreadyRegistered" xml:space="preserve">
    <value>A URI scheme name '{0}' already has a registered custom parser.</value>
  </data>
  <data name="net_uri_BadAuthority" xml:space="preserve">
    <value>Invalid URI: The Authority/Host could not be parsed.</value>
  </data>
  <data name="net_uri_BadAuthorityTerminator" xml:space="preserve">
    <value>Invalid URI: The Authority/Host cannot end with a backslash character ('\\').</value>
  </data>
  <data name="net_uri_BadFormat" xml:space="preserve">
    <value>Invalid URI: The format of the URI could not be determined.</value>
  </data>
  <data name="net_uri_BadHostName" xml:space="preserve">
    <value>Invalid URI: The hostname could not be parsed.</value>
  </data>
  <data name="net_uri_BadPort" xml:space="preserve">
    <value>Invalid URI: Invalid port specified.</value>
  </data>
  <data name="net_uri_BadScheme" xml:space="preserve">
    <value>Invalid URI: The URI scheme is not valid.</value>
  </data>
  <data name="net_uri_BadString" xml:space="preserve">
    <value>Invalid URI: There is an invalid sequence in the string.</value>
  </data>
  <data name="net_uri_BadUserPassword" xml:space="preserve">
    <value>Invalid URI: The username:password construct is badly formed.</value>
  </data>
  <data name="net_uri_CannotCreateRelative" xml:space="preserve">
    <value>A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.</value>
  </data>
  <data name="net_uri_SchemeLimit" xml:space="preserve">
    <value>Invalid URI: The Uri scheme is too long.</value>
  </data>
  <data name="net_uri_EmptyUri" xml:space="preserve">
    <value>Invalid URI: The URI is empty.</value>
  </data>
  <data name="net_uri_InvalidUriKind" xml:space="preserve">
    <value>The value '{0}' passed for the UriKind parameter is invalid.</value>
  </data>
  <data name="net_uri_MustRootedPath" xml:space="preserve">
    <value>Invalid URI: A Dos path must be rooted, for example, 'c:\\'.</value>
  </data>
  <data name="net_uri_NeedFreshParser" xml:space="preserve">
    <value>The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'.</value>
  </data>
  <data name="net_uri_NotAbsolute" xml:space="preserve">
    <value>This operation is not supported for a relative URI.</value>
  </data>
  <data name="net_uri_PortOutOfRange" xml:space="preserve">
    <value>A derived type '{0}' has reported an invalid value for the Uri port '{1}'.</value>
  </data>
  <data name="net_uri_SizeLimit" xml:space="preserve">
    <value>Invalid URI: The Uri string is too long.</value>
  </data>
  <data name="net_uri_UserDrivenParsing" xml:space="preserve">
    <value>A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used.</value>
  </data>
  <data name="net_uri_NotJustSerialization" xml:space="preserve">
    <value>UriComponents.SerializationInfoString must not be combined with other UriComponents.</value>
  </data>
  <data name="net_uri_BadUnicodeHostForIdn" xml:space="preserve">
    <value>An invalid Unicode character by IDN standards was specified in the host.</value>
  </data>
  <data name="AssertionFailed" xml:space="preserve">
    <value>Assertion failed.</value>
  </data>
  <data name="Debug_Fail" xml:space="preserve">
    <value>Fail: {0}</value>
  </data>
  <data name="DebugAssertBanner" xml:space="preserve">
    <value>---- DEBUG ASSERTION FAILED ----</value>
  </data>
  <data name="DebugAssertLongMessage" xml:space="preserve">
    <value>---- Assert Long Message ----</value>
  </data>
  <data name="DebugAssertShortMessage" xml:space="preserve">
    <value>---- Assert Short Message ----</value>
  </data>
  <data name="IO_FileNotFound" xml:space="preserve">
    <value>Unable to find the specified file.</value>
  </data>
  <data name="IO_FileNotFound_FileName" xml:space="preserve">
    <value>Could not find file '{0}'.</value>
  </data>
  <data name="IO_PathNotFound_NoPathName" xml:space="preserve">
    <value>Could not find a part of the path.</value>
  </data>
  <data name="IO_PathNotFound_Path" xml:space="preserve">
    <value>Could not find a part of the path '{0}'.</value>
  </data>
  <data name="IO_SharingViolation_File" xml:space="preserve">
    <value>The process cannot access the file '{0}' because it is being used by another process.</value>
  </data>
  <data name="IO_SharingViolation_NoFileName" xml:space="preserve">
    <value>The process cannot access the file because it is being used by another process.</value>
  </data>
  <data name="UnauthorizedAccess_IODenied_NoPathName" xml:space="preserve">
    <value>Access to the path is denied.</value>
  </data>
  <data name="UnauthorizedAccess_IODenied_Path" xml:space="preserve">
    <value>Access to the path '{0}' is denied.</value>
  </data>
  <data name="ArgumentOutOfRange_FileLengthTooBig" xml:space="preserve">
    <value>Specified file length was too large for the file system.</value>
  </data>
  <data name="IO_FileExists_Name" xml:space="preserve">
    <value>The file '{0}' already exists.</value>
  </data>
  <data name="IO_PathTooLong" xml:space="preserve">
    <value>The specified file name or path is too long, or a component of the specified path is too long.</value>
  </data>
</root>