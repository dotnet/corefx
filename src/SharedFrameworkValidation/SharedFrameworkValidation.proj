<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />

  <PropertyGroup>
    <SharedFrameworkValidationRefPath>$(RefRootPath)SharedFrameworkValidation</SharedFrameworkValidationRefPath>
    <SharedFrameworkValidationRuntimePath>$(BinDir)runtime/SharedFrameworkValidation</SharedFrameworkValidationRuntimePath>
    <_LKGSharedFrameworkVersion>1.1.2</_LKGSharedFrameworkVersion>
    <SharedFrameworkExtractPath>$(RefRootPath)sharedFrameworkZip/shared/Microsoft.NETCore.App/$(MicrosoftNETCoreAppPackageVersion)</SharedFrameworkExtractPath>
    <LKGSharedFrameworkExtractPath>$(RefRootPath)sharedFrameworkZip.LKG/shared/Microsoft.NETCore.App/$(_LKGSharedFrameworkVersion)</LKGSharedFrameworkExtractPath>
    <_RunTestsScriptName Condition="'$(RunningOnUnix)' != 'true'">CloneAndRunTests.cmd</_RunTestsScriptName>
    <_RunTestsScriptName Condition="'$(RunningOnUnix)' == 'true'">CloneAndRunTests.sh</_RunTestsScriptName>
  </PropertyGroup>

  <Target Name="CreateScriptToDownloadSharedFrameworkZip">

    <ItemGroup Condition="'$(RunningOnUnix)' != 'true'">
      <_DownloadSharedFrameworkScriptLines Include="Invoke-WebRequest %22https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.ps1%22 -OutFile $(ToolsDir.Replace('/', '\'))bootstrap.ps1" />
      <_DownloadSharedFrameworkScriptLines Include="%26 %22$(ToolsDir.Replace('/', '\'))bootstrap.ps1%22 -Channel %22master%22 -SharedRuntime -Version %22$(MicrosoftNETCoreAppPackageVersion)%22 -InstallDir %22$(RefRootPath.Replace('/', '\'))sharedFrameworkZip%22 | Out-File %22$(BinDir.Replace('/', '\'))bootstrap.log%22" />
      <_DownloadSharedFrameworkScriptLines Include="%26 %22$(ToolsDir.Replace('/', '\'))bootstrap.ps1%22 -Channel %22rel-1.1.0%22 -InstallDir %22$(RefRootPath.Replace('/', '\'))sharedFrameworkZip.LKG%22 | Out-File %22$(BinDir.Replace('/', '\'))bootstrap.LKG.log%22" />
    </ItemGroup>

    <PropertyGroup>
      <_ScriptName Condition="'$(RunningOnUnix)' != 'true'">$(BinDir)DownloadSharedFramework.ps1</_ScriptName>
      <_ScriptName Condition="'$(RunningOnUnix)' == 'true'">$(BinDir)DownloadSharedFramework.sh</_ScriptName>
    </PropertyGroup>

    <ItemGroup Condition="'$(RunningOnUnix)' == 'true'">
      <_DownloadSharedFrameworkScriptLines Include="download() {" />
      <_DownloadSharedFrameworkScriptLines Include="    eval %24invocation" />
      <_DownloadSharedFrameworkScriptLines Include="    local remote_path=%241" />
      <_DownloadSharedFrameworkScriptLines Include="    local out_path=%24{2:-}" />
      <_DownloadSharedFrameworkScriptLines Include="    local failed=false" />
      <_DownloadSharedFrameworkScriptLines Include="    if [ -z %22%24out_path%22 ]; then" />
      <_DownloadSharedFrameworkScriptLines Include="        curl --retry 10 -sSL --create-dirs %24remote_path || failed=true" />
      <_DownloadSharedFrameworkScriptLines Include="    else" />
      <_DownloadSharedFrameworkScriptLines Include="        curl --retry 10 -sSL --create-dirs -o %24out_path %24remote_path || failed=true" />
      <_DownloadSharedFrameworkScriptLines Include="    fi" />
      <_DownloadSharedFrameworkScriptLines Include="    if [ %22%24failed%22 = true ]; then" />
      <_DownloadSharedFrameworkScriptLines Include="        say_err %22Download failed%22" />
      <_DownloadSharedFrameworkScriptLines Include="        return 1" />
      <_DownloadSharedFrameworkScriptLines Include="    fi" />
      <_DownloadSharedFrameworkScriptLines Include="}" />
      <_DownloadSharedFrameworkScriptLines Include="download %22https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh%22 %22$(ToolsDir.Replace('/', '\'))bootstrap.sh%22" />
      <_DownloadSharedFrameworkScriptLines Include="chmod a+x %22$(ToolsDir.Replace('/', '\'))bootstrap.sh%22" />
      <_DownloadSharedFrameworkScriptLines Include="%22$(ToolsDir.Replace('/', '\'))bootstrap.sh%22 --channel %22master%22 --shared-runtime --version %22$(MicrosoftNETCoreAppPackageVersion)%22 --install-dir %22$(RefRootPath.Replace('/', '\'))sharedFrameworkZip%22" />
      <_DownloadSharedFrameworkScriptLines Include="%22$(ToolsDir.Replace('/', '\'))bootstrap.sh%22 --channel %22rel-1.1.0%22 --install-dir %22$(RefRootPath.Replace('/', '\'))sharedFrameworkZip.LKG%22" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(_ScriptName)"
      Lines="@(_DownloadSharedFrameworkScriptLines)"
      Overwrite="true"
      Encoding="Ascii" />
  </Target>

  <Target Name="BuildPackagesProject">
    <PropertyGroup>
      <_RestorePackagesCommand>"$(DotnetToolCommand)" restore $(MSBuildThisFileDirectory)/RestoreSDKProject/RestoreSDKProject.csproj /p:_PackageRID=$(PackageRID) /p:_RuntimeFrameworkVersion=$(MicrosoftNETCoreAppPackageVersion) /p:CoreFxExpectedPrerelease=$(CoreFxExpectedPrerelease)</_RestorePackagesCommand>
      <_PublishPackagesProjectCommand>"$(DotnetToolCommand)" publish $(MSBuildThisFileDirectory)/RestoreSDKProject/RestoreSDKProject.csproj /p:_PackageRID=$(PackageRID) /p:_MetaPackageDestinationFolder=$(SharedFrameworkValidationRefPath) -f netcoreapp2.0 -o $(SharedFrameworkValidationRuntimePath) -r $(PackageRID)</_PublishPackagesProjectCommand>
    </PropertyGroup>
    <Exec Command="$(_RestorePackagesCommand)" StandardOutputImportance="Low" />
    <Exec Command="$(_PublishPackagesProjectCommand)" StandardOutputImportance="Low" />
  </Target>

  <Target Name="BuildDependenciesProject">
    <MSBuild Projects="../../external/SharedFrameworkValidation/harvestPackages.SharedFramework.depproj"
            Properties="_PackageRID=$(PackageRID)"
             ContinueOnError="ErrorAndStop" />
  </Target>

  <Target Name="RunApiCompat" DependsOnTargets="BuildDependenciesProject">
    <PropertyGroup>
      <ApiCompatCmd>$(ToolHostCmd) "$(ToolsDir)ApiCompat.exe"</ApiCompatCmd>
    </PropertyGroup>

    <!-- Exclude Roslyn assemblies as they don't live in our packages any longer -->
    <ItemGroup>
      <_SharedFrameworkLKGAssemblies Include="$(BinDir)runtime/SharedFrameworkValidation.LKG/*.dll" />
      <_SharedFrameworkAssembliesToRemove Include="@(_SharedFrameworkLKGAssemblies)" Condition="$([System.String]::new('%(_SharedFrameworkLKGAssemblies.Identity)').Contains('Microsoft.CodeAnalysis'))" />
      <_SharedFrameworkLKGAssemblies Remove="@(_SharedFrameworkAssembliesToRemove)" />

      <_LKGSharedFrameworkAssemblies Include="$(LKGSharedFrameworkExtractPath)/*.dll" />
      <_LKGSharedFrameworkAssembliesToRemove Include="@(_LKGSharedFrameworkAssemblies)" Condition="$([System.String]::new('%(_LKGSharedFrameworkAssemblies.Identity)').Contains('Microsoft.CodeAnalysis'))" />
      <_LKGSharedFrameworkAssemblies Remove="@(_LKGSharedFrameworkAssembliesToRemove)" />

    </ItemGroup>

    <MakeDir Directories="$(IntermediateOutputPath)" />

    <!-- Microsoft.NETCore.App Ref vs. runtime packages -->
    <Exec Command="$(ApiCompatCmd) &quot;$(SharedFrameworkValidationRefPath)&quot; $(ApiCompatArgs) -implDirs:&quot;$(SharedFrameworkValidationRuntimePath)&quot;"
          CustomErrorRegularExpression="Total Issues: [^0]"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Low" />
    
    <!-- Netstandard.Library vs. Microsoft.NETCore.App Ref -->
    <Exec Command="$(ApiCompatCmd) &quot;$(NetStandardRefPath)/netstandard.dll&quot; $(ApiCompatArgs) -implDirs:&quot;$(SharedFrameworkValidationRefPath)&quot;"
          CustomErrorRegularExpression="Total Issues: [^0]"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Low" />

    <!-- Last shipped Microsoft.NETCore.App Ref vs. current Microsoft.NETCore.App Ref -->
    <Exec Command="$(ApiCompatCmd) &quot;$(RefRootPath)SharedFrameworkValidation.LKG&quot; $(ApiCompatArgs) -implDirs:&quot;$(SharedFrameworkValidationRefPath)&quot;"
          CustomErrorRegularExpression="Total Issues: [^0]"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Low" />

    <!-- Last shipped runtime packages vs current runtime packages -->
    <Exec Command="$(ApiCompatCmd) &quot;@(_SharedFrameworkLKGAssemblies)&quot; $(ApiCompatArgs) -implDirs:&quot;$(SharedFrameworkValidationRuntimePath)&quot; -baseline:&quot;$(MSBuildThisFileDirectory)ApiCompatBaseline.LKGRuntime.CurrentRuntime.txt&quot;"
          CustomErrorRegularExpression="Total Issues: [^0]"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Low" />

    <!-- Microsoft.NETCore.App Ref vs. shared framework -->
    <Exec Command="$(ApiCompatCmd) &quot;$(PackagesDir)microsoft.netcore.app/$(MicrosoftNETCoreAppPackageVersion)/ref/netcoreapp2.0&quot; $(ApiCompatArgs) -implDirs:&quot;$(SharedFrameworkExtractPath)&quot;"
          CustomErrorRegularExpression="Total Issues: [^0]"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Low" />

    <!-- Last shipped shared framework vs. current shared framework -->
    <Exec Command="$(ApiCompatCmd) &quot;@(_LKGSharedFrameworkAssemblies)&quot; $(ApiCompatArgs) -implDirs:&quot;$(SharedFrameworkExtractPath)&quot; -baseline:&quot;$(MSBuildThisFileDirectory)ApiCompatBaseline.LKGSharedFramework.CurrentSharedFramework.txt&quot;"
          CustomErrorRegularExpression="Total Issues: [^0]"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Low" />

  </Target>

  <Target Name="CopyXunitAssemblies">
    <ItemGroup>
      <XunitAssemblies Include="$(BinDir)runtime/$(BuildConfiguration)/xunit*.dll" />
      <!--In Unix some xunit assemblies have a capital 'X'-->
      <XunitAssemblies Include="$(BinDir)runtime/$(BuildConfiguration)/Xunit*.dll" />
      <XunitAssemblies Include="$(BinDir)runtime/$(BuildConfiguration)/Microsoft.DotNet.XUnitExtensions.dll" />
      <XunitAssemblies Include="$(BinDir)runtime/$(BuildConfiguration)/Newtonsoft.Json.dll" />
    </ItemGroup>
    <Copy SourceFiles="%(XunitAssemblies.Identity)" DestinationFolder="$(SharedFrameworkValidationRuntimePath)" />
  </Target>

  <Target Name="ReplaceTestingSharedFrameworkWithRestoredPackages" DependsOnTargets="BuildPackagesProject">
    <!-- Deleting the contents of the test shared framework since it will be replaced. -->
    <ItemGroup>
      <_FilesToDelete Include="$(NETCoreAppTestSharedFrameworkPath)\*.*" />
    </ItemGroup>
    <Delete Files="@(_FilesToDelete)" />

    <ItemGroup>
      <_FilesToCopy Include="$(SharedFrameworkValidationRuntimePath)\*.*" />
    </ItemGroup>
    <Copy SourceFiles="%(_FilesToCopy.Identity)" DestinationFolder="$(NETCoreAppTestSharedFrameworkPath)" />
  </Target>

  <Target Name="GenerateTestSharedFrameworkDepsFile" DependsOnTargets="ReplaceTestingSharedFrameworkWithRestoredPackages">
    <MSBuild Targets="GenerateTestSharedFrameworkDepsFile"
             Projects="$(MSBuildThisFileDirectory)\..\dirs.proj"
             ContinueOnError="ErrorAndStop" />
  </Target>

  <UsingTask TaskName="GetNetCoreAppVersionsFromFile" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <Target Name="GetRepoVersionHashes">
    <GetNetCoreAppVersionsFromFile 
              PathToVersionsFile="$(PackagesDir)microsoft.netcore.app/$(MicrosoftNETCoreAppPackageVersion)/Microsoft.NETCore.App.versions.txt">
      <Output TaskParameter="VersionHashes" ItemName="VersionHashes" /> 
    </GetNetCoreAppVersionsFromFile>

    <PropertyGroup>
      <CoreFxHash Condition="'%(VersionHashes.Identity)' == 'corefx'">%(VersionHashes.VersionHash)</CoreFxHash>
      <CoreFxCopyLocation>$(BinDir)corefxCopy</CoreFxCopyLocation>
      <_RepoURL>https://github.com/dotnet/corefx.git</_RepoURL>
    </PropertyGroup>

    <!-- Windows script -->
    <ItemGroup Condition="'$(RunningOnUnix)'!='true'">
      <_CloneRepoLines Include="@echo off" />
      <_CloneRepoLines Include="pushd $(CoreFxCopyLocation.Replace('/', '\'))" />
      <_CloneRepoLines Include="git clone $(_RepoURL)" />
      <_CloneRepoLines Include="cd corefx" />
      <_CloneRepoLines Include="git reset --hard $(CoreFxHash)" />
      <_CloneRepoLines Include="call sync.cmd" />
      <_CloneRepoLines Include="call build-tests.cmd -- /p:RefPath=$(BinDir)ref\SharedFrameworkValidation /p:RunningSharedFrameworkValidation=true /p:RuntimePath=$(BinDir)runtime\SharedFrameworkValidation\ /p:TestHostRootPath=$(TestHostRootPath)" />
      <_CloneRepoLines Include="popd" />
    </ItemGroup>

    <!-- Unix script -->
    <ItemGroup Condition="'$(RunningOnUnix)'=='true'">
      <_CloneRepoLines Include="#!/usr/bin/env bash" />
      <_CloneRepoLines Include="__scriptpath=%24(cd %22%24(dirname %22%240%22)%22%3B pwd -P)" />
      <_CloneRepoLines Include="cd $(CorefxCopyLocation.Replace('\', '/'))" />
      <_CloneRepoLines Include="git clone $(_RepoURL)" />
      <_CloneRepoLines Include="cd corefx" />
      <_CloneRepoLines Include="git reset --hard $(CoreFxHash)" />
      <_CloneRepoLines Include="./sync.sh" />
      <_CloneRepoLines Include="./build-tests.sh -- /p:RefPath=$(BinDir)ref/SharedFrameworkValidation /p:RunningSharedFrameworkValidation=true /p:RuntimePath=$(BinDir)runtime/SharedFrameworkValidation/ /p:TestHostRootPath=$(TestHostRootPath)" />
      <_CloneRepoLines Include="cd %24__scriptpath" />
    </ItemGroup>

    <MakeDir Directories="$(BinDir);$(CoreFxCopyLocation)" />

    <WriteLinesToFile
      File="$(BinDir)$(_RunTestsScriptName)"
      Lines="@(_CloneRepoLines)"
      Overwrite="true"
      Encoding="Ascii" />
  </Target>

  <PropertyGroup>
    <BuildDependsOn>
      BuildPackagesProject;
      CopyXunitAssemblies;
      ReplaceTestingSharedFrameworkWithRestoredPackages;
      GenerateTestSharedFrameworkDepsFile;
      GetRepoVersionHashes;
      RunApiCompat;
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />
  <Target Name="Clean">
    <RemoveDir Directories="$(MSBuildThisFileDirectory)RestoreSDKProject\obj;$(MSBuildThisFileDirectory)RestoreSDKProject\bin;$(SharedFrameworkValidationRefPath);$(SharedFrameworkValidationRuntimePath);$(CoreFxCopyLocation)" />
  </Target>
  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.targets))\Directory.Build.targets" />
</Project>
