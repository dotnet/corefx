<Project InitialTargets="AddSkipGetTargetFrameworkToProjectReferences">
  <PropertyGroup>
    <!-- Reset these properties back to blank, since they are defaulted by Microsoft.NET.Sdk -->
    <FileAlignment Condition="'$(FileAlignment)' == '512'"></FileAlignment>
    <ErrorReport Condition="'$(ErrorReport)' == 'prompt'"></ErrorReport>
    <WarningsAsErrors Condition="'$(WarningsAsErrors)' == 'NU1605'"></WarningsAsErrors>
  </PropertyGroup>

  <Import Project="..\Directory.Build.targets" />

  <Target Name="AddSkipGetTargetFrameworkToProjectReferences" Condition="'@(ProjectReference)' != ''">
    <ItemGroup>
      <ProjectReference>
        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <!-- Used for packaging -->
  <Target Name="IsNotNetCoreAppProject" Returns="@(IsNotNetCoreAppProjectResult)">
    <ItemGroup>
      <IsNotNetCoreAppProjectResult Condition="'$(IsNetCoreApp)' != 'true'" Include="$(MSBuildProjectName)" Version="$(PackageVersion)" />
    </ItemGroup>
  </Target>

  <!-- Routing dotnet test to a test project's BuildAndTest target. -->
  <Target Name="VSTest"
          Condition="'$(IsTestProject)' == 'true' and '$(IsTestSupportProject)' != 'true'"
          DependsOnTargets="BuildAndTest" />

  <Target Name="ValidateTestProjectConfigurations"
          BeforeTargets="CoreCompile"
          Condition="'$(IsTestProject)' == 'true' and '$(IsTestSupportProject)' != 'true' and '$(TargetsNetStandard)' == 'true'">

    <Error Text="Targeting .NET Standard in a test project isn't supported." />
    
  </Target>

  <PropertyGroup>
    <!--
    Hack workaround to skip the GenerateCompiledExpressionsTempFile target in
    Microsoft.WorkflowBuildExtensions.targets target that always runs in VS
    -->
    <GenerateCompiledExpressionsTempFilePathForEditing></GenerateCompiledExpressionsTempFilePathForEditing>
  </PropertyGroup>

  <!-- Returns the assembly version of the project for consumption
       by the NuGet package generation -->
  <Target Name="GetAssemblyVersion"
          Returns="$(AssemblyVersion)"/>

  <!-- Returns the generated documentation file for consumption
       by the NuGet package generation -->
  <Target Name="GetDocumentationFile"
          Returns="$(DocumentationFile)"/>

  <!-- This target will be moved into buildtools. Checked in here for now to add validationand in order not to block buildtools ingestion. -->
  <Target Name="ValidateExcludeCompileDesktop" AfterTargets="GetPackageDependencies" Inputs="%(Dependency.Identity);%(Dependency.TargetFramework)" Outputs="unused">
    <PropertyGroup>
      <_excludeCompile Condition="@(Dependency->WithMetadataValue('Exclude', 'Compile')->Count()) == @(Dependency->Count())">true</_excludeCompile>
    </PropertyGroup>
    <Error Text="Cannot have Exclude=Compile dependencies when targeting a desktop TFM. @(Dependency). You can exclude the reference asset in the package by setting the ExcludeReferenceAssets property to true in your project." 
           Condition="$([System.String]::Copy('%(Dependency.TargetFramework)').StartsWith('net4')) AND 
                      '$(_excludeCompile)' == 'true' AND
                      '%(Dependency.Identity)' != '_._'" />
  </Target>

</Project>
