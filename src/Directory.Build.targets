<?xml version="1.0" encoding="utf-8"?>
<Project InitialTargets="AddSkipGetTargetFrameworkToProjectReferences">
  <PropertyGroup>
    <ErrorIfBuildToolsRestoredFromIndividualProject Condition="!Exists('$(ToolsDir)')">true</ErrorIfBuildToolsRestoredFromIndividualProject>

    <!-- Reset these properties back to blank, since they are defaulted by Microsoft.NET.Sdk -->
    <FileAlignment Condition="'$(FileAlignment)' == '512'"></FileAlignment>
    <ErrorReport Condition="'$(ErrorReport)' == 'prompt'"></ErrorReport>
    <Deterministic></Deterministic>
    <WarningsAsErrors Condition="'$(WarningsAsErrors)' == 'NU1605'"></WarningsAsErrors>
  </PropertyGroup>

  <Import Project="..\Directory.Build.targets" />

  <PropertyGroup Condition="'$(IsInvokableTestProject)' == 'true'">
    <LaunchSettingsOutputFileFullPath Condition="'$(LaunchSettingsOutputFileFullPath)' == ''">$(AppDesignerFolder)/launchSettings.json</LaunchSettingsOutputFileFullPath>
    <LaunchSettingsInputFileFullPath Condition="'$(LaunchSettingsInputFileFullPath)' == ''">$(ToolsDir)tests.targets</LaunchSettingsInputFileFullPath>
  </PropertyGroup>

  <Target Name="AddSkipGetTargetFrameworkToProjectReferences" Condition="'@(ProjectReference)' != ''">
    <ItemGroup>
      <ProjectReference>
        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <!--
    Hack workaround to skip the GenerateCompiledExpressionsTempFile target in
    Microsoft.WorkflowBuildExtensions.targets target that always runs in VS
    -->
    <GenerateCompiledExpressionsTempFilePathForEditing></GenerateCompiledExpressionsTempFilePathForEditing>
  </PropertyGroup>

  <!--
  Hack workaround for not restoring each project. Instead, we turn off all the targets
  that require a `project.assets.json`, since ours will be empty anyway.
  -->
  <Target Name="_ClearResolvePackageAssets"
          BeforeTargets="AssignProjectConfiguration">

    <PropertyGroup>
      <ResolvePackageDependenciesForBuildDependsOn></ResolvePackageDependenciesForBuildDependsOn>
    </PropertyGroup>

  </Target>

  <!-- Returns the assembly version of the project for consumption
       by the NuGet package generation -->
  <Target Name="GetAssemblyVersion"
          Returns="$(AssemblyVersion)"/>

  <!-- Returns the generated documentation file for consumption
       by the NuGet package generation -->
  <Target Name="GetDocumentationFile"
          Returns="$(DocumentationFile)"/>

  <Target Name="DumpTargets" BeforeTargets="ResolveProjectReferences">
    <Message Text="DumpTargets> $(OutputPath), C=[$(Configuration)], CG=[$(ConfigurationGroup)], OG=[$(OSGroup)], TG=[$(TargetGroup)]" Importance="Low" />
  </Target>

  <Target Name="GenerateLaunchSettingsFiles"
          Condition="'$(LaunchSettingsOutputFileFullPath)' != '' AND '$(OmitLaunchSettings)' != 'true'"
          Inputs="$(LaunchSettingsInputFileFullPath)"
          Outputs="$(LaunchSettingsOutputFileFullPath)">

    <PropertyGroup>
      <LaunchSettingsFileContent>
{
  &quot;profiles&quot;: {
    &quot;xUnit.net Console&quot;: {
      &quot;commandName&quot;: &quot;Executable&quot;,
      &quot;executablePath&quot;: &quot;$(StartProgram.Replace('\', '\\'))&quot;,
      &quot;commandLineArgs&quot;: &quot;$(StartArguments)&quot;,
      &quot;workingDirectory&quot;: &quot;$(StartWorkingDirectory.Replace('\', '\\'))&quot;
    }
  }
}
      </LaunchSettingsFileContent>
    </PropertyGroup>

    <MakeDir Directories="$(AppDesignerFolder)" />
    <WriteLinesToFile File="$(LaunchSettingsOutputFileFullPath)"
                      Lines="$(LaunchSettingsFileContent)"
                      Overwrite="true" />

  </Target>

  <PropertyGroup>
    <CompileDependsOn>
        GenerateLaunchSettingsFiles;
        $(CompileDependsOn);
    </CompileDependsOn>
  </PropertyGroup>

</Project>
