// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Collections.Immutable {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Collections.Immutable.Strings", typeof(Strings).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is not a array with the same initialization state as the array to compare it to..
        /// </summary>
        internal static string ArrayInitializedStateNotEqual {
            get {
                return ResourceManager.GetString("ArrayInitializedStateNotEqual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object is not a array with the same number of elements as the array to compare it to..
        /// </summary>
        internal static string ArrayLengthsNotEqual {
            get {
                return ResourceManager.GetString("ArrayLengthsNotEqual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the old value.
        /// </summary>
        internal static string CannotFindOldValue {
            get {
                return ResourceManager.GetString("CannotFindOldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capacity was less than the current Count of elements..
        /// </summary>
        internal static string CapacityMustBeGreaterThanOrEqualToCount {
            get {
                return ResourceManager.GetString("CapacityMustBeGreaterThanOrEqualToCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MoveToImmutable can only be performed when Count equals Capacity..
        /// </summary>
        internal static string CapacityMustEqualCountOnMove {
            get {
                return ResourceManager.GetString("CapacityMustEqualCountOnMove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
        /// </summary>
        internal static string CollectionModifiedDuringEnumeration {
            get {
                return ResourceManager.GetString("CollectionModifiedDuringEnumeration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element with the same key but a different value already exists. Key: {0}.
        /// </summary>
        internal static string DuplicateKey {
            get {
                return ResourceManager.GetString("DuplicateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation does not apply to an empty instance..
        /// </summary>
        internal static string InvalidEmptyOperation {
            get {
                return ResourceManager.GetString("InvalidEmptyOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed on a default instance of ImmutableArray&lt;T&gt;.  Consider initializing the array, or checking the ImmutableArray&lt;T&gt;.IsDefault property..
        /// </summary>
        internal static string InvalidOperationOnDefaultArray {
            get {
                return ResourceManager.GetString("InvalidOperationOnDefaultArray", resourceCulture);
            }
        }
    }
}
