<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlternationCantCapture" xml:space="preserve">
    <value>Alternation conditions do not capture and cannot be named.</value>
  </data>
  <data name="AlternationCantHaveComment" xml:space="preserve">
    <value>Alternation conditions cannot be comments.</value>
  </data>
  <data name="Arg_ArrayPlusOffTooSmall" xml:space="preserve">
    <value>Destination array is not long enough to copy all the items in the collection. Check array index and length.</value>
  </data>
  <data name="ArgumentNull_ArrayWithNullElements" xml:space="preserve">
    <value>The array cannot contain null elements.</value>
  </data>
  <data name="BadClassInCharRange" xml:space="preserve">
    <value>Cannot include class \\{0} in character range.</value>
  </data>
  <data name="BeginIndexNotNegative" xml:space="preserve">
    <value>Start index cannot be less than 0 or greater than input length.</value>
  </data>
  <data name="CaptureGroupOutOfRange" xml:space="preserve">
    <value>Capture group numbers must be less than or equal to Int32.MaxValue.</value>
  </data>
  <data name="CapnumNotZero" xml:space="preserve">
    <value>Capture number cannot be zero.</value>
  </data>
  <data name="CountTooSmall" xml:space="preserve">
    <value>Count cannot be less than -1.</value>
  </data>
  <data name="EnumNotStarted" xml:space="preserve">
    <value>Enumeration has either not started or has already finished.</value>
  </data>
  <data name="IllegalCondition" xml:space="preserve">
    <value>Illegal conditional (?(...)) expression.</value>
  </data>
  <data name="IllegalDefaultRegexMatchTimeoutInAppDomain" xml:space="preserve">
    <value>AppDomain data '{0}' contains the invalid value or object '{1}' for specifying a default matching timeout for System.Text.RegularExpressions.Regex.</value>
  </data>
  <data name="IllegalEndEscape" xml:space="preserve">
    <value>Illegal \\ at end of pattern.</value>
  </data>
  <data name="IllegalRange" xml:space="preserve">
    <value>Illegal {x,y} with x &gt; y.</value>
  </data>
  <data name="IncompleteSlashP" xml:space="preserve">
    <value>Incomplete \\p{X} character escape.</value>
  </data>
  <data name="InternalError_ScanRegex" xml:space="preserve">
    <value>Internal error in ScanRegex.</value>
  </data>
  <data name="InvalidGroupName" xml:space="preserve">
    <value>Invalid group name: Group names must begin with a word character.</value>
  </data>
  <data name="InvalidEmptyArgument" xml:space="preserve">
    <value>Argument {0} cannot be zero-length.</value>
  </data>
  <data name="LengthNotNegative" xml:space="preserve">
    <value>Length cannot be less than 0 or exceed input length.</value>
  </data>
  <data name="MalformedNameRef" xml:space="preserve">
    <value>Malformed \\k&lt;...&gt; named back reference.</value>
  </data>
  <data name="MalformedReference" xml:space="preserve">
    <value>(?({0}) ) malformed.</value>
  </data>
  <data name="MalformedSlashP" xml:space="preserve">
    <value>Malformed \\p{X} character escape.</value>
  </data>
  <data name="MakeException" xml:space="preserve">
    <value>Invalid pattern '{0}' at offset {1}. {2}</value>
  </data>
  <data name="MissingControl" xml:space="preserve">
    <value>Missing control character.</value>
  </data>
  <data name="NestedQuantify" xml:space="preserve">
    <value>Nested quantifier '{0}'.</value>
  </data>
  <data name="NoResultOnFailed" xml:space="preserve">
    <value>Result cannot be called on a failed Match.</value>
  </data>
  <data name="NotEnoughParens" xml:space="preserve">
    <value>Not enough )'s.</value>
  </data>
  <data name="NotSupported_ReadOnlyCollection" xml:space="preserve">
    <value>Collection is read-only.</value>
  </data>
  <data name="OnlyAllowedOnce" xml:space="preserve">
    <value>This operation is only allowed once per object.</value>
  </data>
  <data name="PlatformNotSupported_CompileToAssembly" xml:space="preserve">
    <value>This platform does not support writing compiled regular expressions to an assembly.</value>
  </data>
  <data name="QuantifyAfterNothing" xml:space="preserve">
    <value>Quantifier {x,y} following nothing.</value>
  </data>
  <data name="RegexMatchTimeoutException_Occurred" xml:space="preserve">
    <value>The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors.</value>
  </data>
  <data name="ReplacementError" xml:space="preserve">
    <value>Replacement pattern error.</value>
  </data>
  <data name="ReversedCharRange" xml:space="preserve">
    <value>[x-y] range in reverse order.</value>
  </data>
  <data name="SubtractionMustBeLast" xml:space="preserve">
    <value>A subtraction must be the last element in a character class.</value>
  </data>
  <data name="TooFewHex" xml:space="preserve">
    <value>Insufficient hexadecimal digits.</value>
  </data>
  <data name="TooManyAlternates" xml:space="preserve">
    <value>Too many | in (?()|).</value>
  </data>
  <data name="TooManyParens" xml:space="preserve">
    <value>Too many )'s.</value>
  </data>
  <data name="UndefinedBackref" xml:space="preserve">
    <value>Reference to undefined group number {0}.</value>
  </data>
  <data name="UndefinedNameRef" xml:space="preserve">
    <value>Reference to undefined group name '{0}'.</value>
  </data>
  <data name="UndefinedReference" xml:space="preserve">
    <value>(?({0}) ) reference to undefined group.</value>
  </data>
  <data name="UnexpectedOpcode" xml:space="preserve">
    <value>Unexpected opcode in regular expression generation: {0}.</value>
  </data>
  <data name="UnimplementedState" xml:space="preserve">
    <value>Unimplemented state.</value>
  </data>
  <data name="UnknownProperty" xml:space="preserve">
    <value>Unknown property '{0}'.</value>
  </data>
  <data name="UnrecognizedControl" xml:space="preserve">
    <value>Unrecognized control character.</value>
  </data>
  <data name="UnrecognizedEscape" xml:space="preserve">
    <value>Unrecognized escape sequence \\{0}.</value>
  </data>
  <data name="UnrecognizedGrouping" xml:space="preserve">
    <value>Unrecognized grouping construct.</value>
  </data>
  <data name="UnterminatedBracket" xml:space="preserve">
    <value>Unterminated [] set.</value>
  </data>
  <data name="UnterminatedComment" xml:space="preserve">
    <value>Unterminated (?#...) comment.</value>
  </data>
</root>
