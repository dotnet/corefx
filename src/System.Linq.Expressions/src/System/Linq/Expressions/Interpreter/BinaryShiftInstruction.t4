<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#@ include file="Helpers.t4" #>
<#
string cachedInstructions = string.Join(", ", operands.Select(o => "s_" + toBcl(o)));
#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Do not edit this file manually. This file is auto-generated by <#=Path.GetFileName(this.Host.TemplateFile)#>.

using System.Dynamic.Utils;
using System.Reflection;

namespace System.Linq.Expressions.Interpreter
{
    internal abstract class <#=instruction#>Instruction : Instruction
    {
        private static Instruction <#=cachedInstructions#>;

        public override int ConsumedStack => 2;
        public override int ProducedStack => 1;
        public override string InstructionName => "<#=instruction#>";

        private <#=instruction#>Instruction() { }

<#
foreach (Type type in operands)
{
    string typeName = toBcl(type);
    string typeAlias = toCSharp(type);

    string op = "(" + typeAlias + ")value " + infix + " (int)shift";

    if (getBinaryResultType(infix, type, typeof(int)) != type)
    {
        op = "(" + typeAlias + ")(" + op + ")";
    }
#>
        private sealed class <#=instruction#><#=typeName#> : <#=instruction#>Instruction
        {
            public override int Run(InterpretedFrame frame)
            {
                object shift = frame.Pop();
                object value = frame.Pop();
                if (value == null || shift == null)
                {
                    frame.Push(null);
                }
                else
                {
                    frame.Push(<#=op#>);
                }
                return 1;
            }
        }

<#
}
#>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public static Instruction Create(Type type)
        {
            // Boxed enums can be unboxed as their underlying types:
            Type underlyingType = type.GetTypeInfo().IsEnum ? Enum.GetUnderlyingType(type) : type.GetNonNullableType();

            switch (underlyingType.GetTypeCode())
            {
<#
foreach (Type type in operands)
{
    string typeName = toBcl(type);
#>
                case TypeCode.<#=typeName#>: return s_<#=typeName#> ?? (s_<#=typeName#> = new <#=instruction#><#=typeName#>());
<#
}
#>
                default:
                    throw Error.ExpressionNotSupportedForType("<#=instruction#>", type);
            }
        }
    }
}
