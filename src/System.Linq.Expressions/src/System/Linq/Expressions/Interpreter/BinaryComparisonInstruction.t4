<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#@ include file="Helpers.t4" #>
<#
string cachedInstructions = string.Join(", ", operands.Select(o => "s_" + toBcl(o)));
string liftedCachedInstructions = string.Join(", ", operands.Select(o => "s_liftedToNull" + toBcl(o)));
#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Do not edit this file manually. This file is auto-generated by <#=Path.GetFileName(this.Host.TemplateFile)#>.

using System.Diagnostics;
using System.Dynamic.Utils;
using System.Reflection;

namespace System.Linq.Expressions.Interpreter
{
    internal abstract class <#=instruction#>Instruction : Instruction
    {
        private readonly object _nullValue;

        private static Instruction <#=cachedInstructions#>;
        private static Instruction <#=liftedCachedInstructions#>;

        public override int ConsumedStack => 2;
        public override int ProducedStack => 1;
        public override string InstructionName => "<#=instruction#>";

        private <#=instruction#>Instruction(object nullValue)
        {
            _nullValue = nullValue;
        }

<#
foreach (Type type in operands)
{
    string typeName = toBcl(type);
    string typeAlias = toCSharp(type);

    string op = "(" + typeAlias + ")left " + infix + " (" + typeAlias + ")right";
#>
        private sealed class <#=instruction#><#=typeName#> : <#=instruction#>Instruction
        {
            public <#=instruction#><#=typeName#>(object nullValue)
                : base(nullValue)
            {
            }

            public override int Run(InterpretedFrame frame)
            {
                object right = frame.Pop();
                object left = frame.Pop();
                if (left == null || right == null)
                {
                    frame.Push(_nullValue);
                }
                else
                {
                    frame.Push(<#=op#>);
                }
                return 1;
            }
        }

<#
}
#>
        public static Instruction Create(Type type, bool liftedToNull = false)
        {
            Debug.Assert(!type.GetTypeInfo().IsEnum);
            if (liftedToNull)
            {
                switch (type.GetNonNullableType().GetTypeCode())
                {
<#
foreach (Type type in operands)
{
    string typeName = toBcl(type);
#>
                    case TypeCode.<#=typeName#>: return s_liftedToNull<#=typeName#> ?? (s_liftedToNull<#=typeName#> = new <#=instruction#><#=typeName#>(null));
<#
}
#>
                    default:
                        throw Error.ExpressionNotSupportedForType("<#=instruction#>", type);
                }
            }
            else
            {
                switch (type.GetNonNullableType().GetTypeCode())
                {
<#
foreach (Type type in operands)
{
    string typeName = toBcl(type);
#>
                    case TypeCode.<#=typeName#>: return s_<#=typeName#> ?? (s_<#=typeName#> = new <#=instruction#><#=typeName#>(Utils.BoxedFalse));
<#
}
#>
                    default:
                        throw Error.ExpressionNotSupportedForType("<#=instruction#>", type);
                }
            }
        }
    }
}
