<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#@ include file="Helpers.t4" #>
<#
HashSet<Type> hasNoOvfInstructions = new HashSet<Type> { typeof(float), typeof(double) };

string cachedInstructions = string.Join(", ", operands.Select(o => "s_" + toBcl(o)));
#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Do not edit this file manually. This file is auto-generated by <#=Path.GetFileName(this.Host.TemplateFile)#>.

using System.Diagnostics;
using System.Dynamic.Utils;

namespace System.Linq.Expressions.Interpreter
{
    internal abstract class <#=instruction#>Instruction : Instruction
    {
        private static Instruction <#=cachedInstructions#>;

        public override int ConsumedStack => 2;
        public override int ProducedStack => 1;
        public override string InstructionName => "<#=instruction#>";

        private <#=instruction#>Instruction() { }

<#
foreach (Type type in operands)
{
    string typeName = toBcl(type);
    string typeAlias = toCSharp(type);

    string op = "(" + typeAlias + ")l " + infix + " (" + typeAlias + ")r";

    if (getBinaryResultType(infix, type, type) != type)
    {
        op = "(" + typeAlias + ")(" + op + ")";
    }

    if (hasOverflow && !hasNoOvfInstructions.Contains(type))
    {
        op = "unchecked(" + op + ")";
    }

    if (hasBoxCache.Contains(type))
    {
        op = "ScriptingRuntimeHelpers." + typeName + "ToObject(" + op + ")";
    }
#>
        private sealed class <#=instruction#><#=typeName#> : <#=instruction#>Instruction
        {
            public override int Run(InterpretedFrame frame)
            {
                object l = frame.Data[frame.StackIndex - 2];
                object r = frame.Data[frame.StackIndex - 1];
                if (l == null || r == null)
                {
                    frame.Data[frame.StackIndex - 2] = null;
                }
                else
                {
                    frame.Data[frame.StackIndex - 2] = <#=op#>;
                }
                frame.StackIndex--;
                return 1;
            }
        }

<#
}
#>
        public static Instruction Create(Type type)
        {
            Debug.Assert(type.IsArithmetic());
            switch (type.GetNonNullableType().GetTypeCode())
            {
<#
foreach (Type type in operands)
{
    string typeName = toBcl(type);
#>
                case TypeCode.<#=typeName#>: return s_<#=typeName#> ?? (s_<#=typeName#> = new <#=instruction#><#=typeName#>());
<#
}
#>
                default:
                    throw ContractUtils.Unreachable;
            }
        }
    }
<#
if (hasOverflow)
{
    IEnumerable<Type> operandsWithOverflow = operands.Except(new[] { typeof(float), typeof(double) });
    string cachedInstructionsWithOverflow = string.Join(", ", operandsWithOverflow.Select(o => "s_" + toBcl(o)));
#>

    internal abstract class <#=instruction#>OvfInstruction : Instruction
    {
        private static Instruction <#=cachedInstructionsWithOverflow#>;

        public override int ConsumedStack => 2;
        public override int ProducedStack => 1;
        public override string InstructionName => "<#=instruction#>Ovf";

        private <#=instruction#>OvfInstruction() { }

<#
foreach (Type type in operandsWithOverflow)
{
    string typeName = toBcl(type);
    string typeAlias = toCSharp(type);

    string op = "(" + typeAlias + ")l " + infix + " (" + typeAlias + ")r";

    if (getBinaryResultType(infix, type, type) != type)
    {
        op = "(" + typeAlias + ")(" + op + ")";
    }

    if (hasOverflow && !hasNoOvfInstructions.Contains(type))
    {
        op = "checked(" + op + ")";
    }

    if (hasBoxCache.Contains(type))
    {
        op = "ScriptingRuntimeHelpers." + typeName + "ToObject(" + op + ")";
    }
#>
        private sealed class <#=instruction#>Ovf<#=typeName#> : <#=instruction#>OvfInstruction
        {
            public override int Run(InterpretedFrame frame)
            {
                object l = frame.Data[frame.StackIndex - 2];
                object r = frame.Data[frame.StackIndex - 1];
                if (l == null || r == null)
                {
                    frame.Data[frame.StackIndex - 2] = null;
                }
                else
                {
                    frame.Data[frame.StackIndex - 2] = <#=op#>;
                }
                frame.StackIndex--;
                return 1;
            }
        }

<#
}
#>
        public static Instruction Create(Type type)
        {
            Debug.Assert(type.IsArithmetic());
            switch (type.GetNonNullableType().GetTypeCode())
            {
<#
foreach (Type type in operandsWithOverflow)
{
    string typeName = toBcl(type);
#>
                case TypeCode.<#=typeName#>: return s_<#=typeName#> ?? (s_<#=typeName#> = new <#=instruction#>Ovf<#=typeName#>());
<#
}
#>
                default:
                    return <#=instruction#>Instruction.Create(type);
            }
        }
    }
<#
}
#>
}
