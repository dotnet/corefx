//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resources {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Resources.Strings", typeof(Strings).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A positive capacity must be specified for a Memory Mapped File backed by an empty file..
        /// </summary>
        internal static string Argument_EmptyFile {
            get {
                return ResourceManager.GetString("Argument_EmptyFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map name cannot be an empty string..
        /// </summary>
        internal static string Argument_MapNameEmptyString {
            get {
                return ResourceManager.GetString("Argument_MapNameEmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FileMode.Append is not permitted when creating new memory mapped files. Instead, use MemoryMappedFileView to ensure write-only access within a specified region..
        /// </summary>
        internal static string Argument_NewMMFAppendModeNotAllowed {
            get {
                return ResourceManager.GetString("Argument_NewMMFAppendModeNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemoryMappedFileAccess.Write is not permitted when creating new memory mapped files. Use MemoryMappedFileAccess.ReadWrite instead..
        /// </summary>
        internal static string Argument_NewMMFWriteAccessNotAllowed {
            get {
                return ResourceManager.GetString("Argument_NewMMFWriteAccessNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specifying MemoryMappedFileAccess.Read access, the capacity must not be larger than the file size..
        /// </summary>
        internal static string Argument_ReadAccessWithLargeCapacity {
            get {
                return ResourceManager.GetString("Argument_ReadAccessWithLargeCapacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to fileStream cannot be null..
        /// </summary>
        internal static string ArgumentNull_FileStream {
            get {
                return ResourceManager.GetString("ArgumentNull_FileStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map name cannot be null..
        /// </summary>
        internal static string ArgumentNull_MapName {
            get {
                return ResourceManager.GetString("ArgumentNull_MapName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The capacity may not be smaller than the file size..
        /// </summary>
        internal static string ArgumentOutOfRange_CapacityGEFileSizeRequired {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_CapacityGEFileSizeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The capacity cannot be greater than the size of the system&apos;s logical address space..
        /// </summary>
        internal static string ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non negative number is required..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedNonNegNum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedNonNegNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A positive number is required..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedPositiveNumber {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedPositiveNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The capacity must be greater than or equal to 0. 0 represents the the size of the file being mapped..
        /// </summary>
        internal static string ArgumentOutOfRange_PositiveOrDefaultCapacityRequired {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_PositiveOrDefaultCapacityRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size must be greater than or equal to 0. If 0 is specified, the view extends from the specified offset to the end of the file mapping..
        /// </summary>
        internal static string ArgumentOutOfRange_PositiveOrDefaultSizeRequired {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_PositiveOrDefaultSizeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create file mapping..
        /// </summary>
        internal static string InvalidOperation_CantCreateFileMapping {
            get {
                return ResourceManager.GetString("InvalidOperation_CantCreateFileMapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying MemoryMappedView object is null..
        /// </summary>
        internal static string InvalidOperation_ViewIsNull {
            get {
                return ResourceManager.GetString("InvalidOperation_ViewIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create &quot;{0}&quot; because a file or directory with the same name already exists..
        /// </summary>
        internal static string IO_AlreadyExists_Name {
            get {
                return ResourceManager.GetString("IO_AlreadyExists_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the drive &apos;{0}&apos;. The drive might not be ready or might not be mapped..
        /// </summary>
        internal static string IO_DriveNotFound_Drive {
            get {
                return ResourceManager.GetString("IO_DriveNotFound_Drive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; already exists..
        /// </summary>
        internal static string IO_FileExists_Name {
            get {
                return ResourceManager.GetString("IO_FileExists_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find the specified file..
        /// </summary>
        internal static string IO_FileNotFound {
            get {
                return ResourceManager.GetString("IO_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find file &apos;{0}&apos;..
        /// </summary>
        internal static string IO_FileNotFound_FileName {
            get {
                return ResourceManager.GetString("IO_FileNotFound_FileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Path discovery permission to the specified directory was denied.&gt;.
        /// </summary>
        internal static string IO_NoPermissionToDirectoryName {
            get {
                return ResourceManager.GetString("IO_NoPermissionToDirectoryName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory to map view..
        /// </summary>
        internal static string IO_NotEnoughMemory {
            get {
                return ResourceManager.GetString("IO_NotEnoughMemory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a part of the path..
        /// </summary>
        internal static string IO_PathNotFound_NoPathName {
            get {
                return ResourceManager.GetString("IO_PathNotFound_NoPathName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a part of the path &apos;{0}&apos;..
        /// </summary>
        internal static string IO_PathNotFound_Path {
            get {
                return ResourceManager.GetString("IO_PathNotFound_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters..
        /// </summary>
        internal static string IO_PathTooLong {
            get {
                return ResourceManager.GetString("IO_PathTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the file &apos;{0}&apos; because it is being used by another process..
        /// </summary>
        internal static string IO_SharingViolation_File {
            get {
                return ResourceManager.GetString("IO_SharingViolation_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the file because it is being used by another process..
        /// </summary>
        internal static string IO_SharingViolation_NoFileName {
            get {
                return ResourceManager.GetString("IO_SharingViolation_NoFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemoryMappedViewStreams are fixed length..
        /// </summary>
        internal static string NotSupported_MMViewStreamsFixedLength {
            get {
                return ResourceManager.GetString("NotSupported_MMViewStreamsFixedLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream does not support reading..
        /// </summary>
        internal static string NotSupported_UnreadableStream {
            get {
                return ResourceManager.GetString("NotSupported_UnreadableStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream does not support writing..
        /// </summary>
        internal static string NotSupported_UnwritableStream {
            get {
                return ResourceManager.GetString("NotSupported_UnwritableStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot access a closed Stream..
        /// </summary>
        internal static string ObjectDisposed_StreamIsClosed {
            get {
                return ResourceManager.GetString("ObjectDisposed_StreamIsClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot access a closed accessor..
        /// </summary>
        internal static string ObjectDisposed_ViewAccessorClosed {
            get {
                return ResourceManager.GetString("ObjectDisposed_ViewAccessorClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the path is denied..
        /// </summary>
        internal static string UnauthorizedAccess_IODenied_NoPathName {
            get {
                return ResourceManager.GetString("UnauthorizedAccess_IODenied_NoPathName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the path &apos;{0}&apos; is denied..
        /// </summary>
        internal static string UnauthorizedAccess_IODenied_Path {
            get {
                return ResourceManager.GetString("UnauthorizedAccess_IODenied_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown error &apos;{0}&apos;..
        /// </summary>
        internal static string UnknownError_Num {
            get {
                return ResourceManager.GetString("UnknownError_Num", resourceCulture);
            }
        }
    }
}
