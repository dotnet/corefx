<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition="Exists('..\dir.props')" Project="..\dir.props" />

  <!-- We shipped assembly file version 4.6.x up until the end of rc3.  Version assembly as
        4.6.x to ensure compatability in Visual Studio for an in-place update. -->
  <PropertyGroup>
    <MajorVersion>4</MajorVersion>
    <MinorVersion>6</MinorVersion>
  </PropertyGroup>
  <!--
    $(OS) is set to Unix/Windows_NT. This comes from an environment variable on Windows and MSBuild on Unix.
  -->
  <PropertyGroup>
    <!-- Temp change to make OS X build behave as a Linux build -->
    <OsEnvironment Condition="'$(OsEnvironment)'=='' AND '$(OS)'=='OSX'">Unix</OsEnvironment>
    <OsEnvironment Condition="'$(OsEnvironment)'==''">$(OS)</OsEnvironment>
  </PropertyGroup>

  <PropertyGroup>
    <InputOSGroup Condition="'$(InputOSGroup)'==''">$(OSEnvironment)</InputOSGroup>
  </PropertyGroup>

  <!-- Informs build tools to apply .NET Framework metadata if not a test project -->
  <PropertyGroup>
    <IsDotNetFrameworkProductAssembly>true</IsDotNetFrameworkProductAssembly>
  </PropertyGroup>

  <PropertyGroup>
    <BuildToolsTargets45 Condition="'$(OsEnvironment)'=='Windows_NT'">true</BuildToolsTargets45>
  </PropertyGroup>

  <!-- Common repo directories -->
  <PropertyGroup>
    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>
    <SourceDir>$(ProjectDir)src\</SourceDir>

    <!-- Output directories -->
    <BinDir Condition="'$(BinDir)'==''">$(ProjectDir)bin/</BinDir>
    <ObjDir Condition="'$(ObjDir)'==''">$(BinDir)obj/</ObjDir>
    <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)'==''">$(ObjDir)</BaseIntermediateOutputPath>
    <TestWorkingDir Condition="'$(TestWorkingDir)'==''">$(BinDir)tests/</TestWorkingDir>
    <PackageOutputRoot Condition="'$(PackageOutputRoot)'=='' and '$(NonShippingPackage)' == 'true'">$(BinDir)packages_noship/</PackageOutputRoot>
    <PackageOutputRoot Condition="'$(PackageOutputRoot)'==''">$(BinDir)packages/</PackageOutputRoot>

    <!-- Input Directories -->
    <PackagesDir Condition="'$(PackagesDir)'==''">$(ProjectDir)packages/</PackagesDir>
    <ToolsDir Condition="'$(UseToolRuntimeForToolsDir)'=='true'">$(ToolRuntimePath)</ToolsDir>
    <ToolsDir Condition="'$(ToolsDir)'==''">$(ProjectDir)Tools/</ToolsDir>
    <ToolRuntimePath Condition="'$(ToolRuntimePath)'==''">$(ToolsDir)</ToolRuntimePath>

    <!-- needs to be defined all the time to avoid indexing every file from the root -->
    <GeneratedProjectJsonDir>$(ObjDir)generated</GeneratedProjectJsonDir>
  </PropertyGroup>

  <Import Project="$(ToolRuntimePath)BuildVersion.targets" Condition="Exists('$(ToolRuntimePath)BuildVersion.targets')" />

  <PropertyGroup>
    <GenFacadesArgs>-ignoreBuildAndRevisionMismatch</GenFacadesArgs>
  </PropertyGroup>

  <!-- Import Build tools common props file where repo-independent properties are found -->
  <Import Project="$(ToolsDir)Build.Common.props" Condition="Exists('$(ToolsDir)Build.Common.props')" />

  <!-- Enable the analyzers for this repo -->
  <PropertyGroup>
    <EnableDotnetAnalyzers Condition="'$(EnableDotnetAnalyzers)'==''">true</EnableDotnetAnalyzers>
  </PropertyGroup>

  <!-- Provides package dependency version properties and verification/auto-upgrade configuration -->
  <Import Project="$(MSBuildThisFileDirectory)dependencies.props" />

  <!-- Explicitly setting
       - SupportsUWP to true when TargetGroup is uap101*. This will enable the correct pinvoke checker to be picked
       - BlockReflectionAttribute to true. This will enable injecting BlockReflectionAttribute.cs into the compile target.
       TODO: Both of these properties are being set in buildtools targets, however they need to be updated to reflect uap101 changes.
  -->
  <PropertyGroup Condition="'$(TargetGroup)' == 'uap101' or '$(TargetGroup)' == 'uap101aot'">
    <SupportsUWP>true</SupportsUWP>
    <BlockReflectionAttribute>true</BlockReflectionAttribute>
  </PropertyGroup>

  <!-- Import packaging props -->
  <Import Project="$(MSBuildThisFileDirectory)Packaging.props"/>

  <!-- list of nuget package sources passed to dnu -->
  <ItemGroup Condition="'$(ExcludeInternetFeeds)' != 'true'">
    <!-- PackagesDrops is passed in via the commandline "/p:PackagesDrops=[drop location]" -->
    <DnuSourceList Condition="'$(BuildTestsAgainstPackages)' == 'true'" Include="$(PackagesDrops)" />
    <!-- Need to escape double forward slash (%2F) or MSBuild will normalize to one slash on Unix. -->
    <!-- Including buildtools to pull in TestSuite packages and repackaged xunit dependencies-->
    <DnuSourceList Include="https:%2F%2Fdotnet.myget.org/F/dotnet-buildtools/api/v3/index.json" />
    <DnuSourceList Include="https:%2F%2Fdotnet.myget.org/F/dotnet-core/api/v3/index.json" />
    <DnuSourceList Include="https:%2F%2Fwww.nuget.org/api/v2/" />
  </ItemGroup>

  <!-- This is the directory where we dynamically generate project.json's for our test build package dependencies -->
  <PropertyGroup Condition="'$(BuildTestsAgainstPackages)' == 'true'">
    <BuildTestsAgainstPackagesIdentityRegex>$(CoreFxVersionsIdentityRegex)</BuildTestsAgainstPackagesIdentityRegex>
    <SkipVerifyPackageVersions>true</SkipVerifyPackageVersions>
  </PropertyGroup>

  <!-- list of directories to perform batch restore -->
  <ItemGroup>
    <DnuRestoreDir Include="$(MSBuildThisFileDirectory)src" />
    <DnuRestoreDir Include="$(MSBuildThisFileDirectory)pkg" />
    <DnuRestoreDir Condition="'$(BuildTestsAgainstPackages)' == 'true'" Include="$(GeneratedProjectJsonDir)" />
  </ItemGroup>

  <PropertyGroup>
    <DnxPackageDir Condition="'$(DnxPackageDir)'==''">$(PackagesDir)/$(DnxPackageName)/</DnxPackageDir>
    <DnuToolPath Condition="'$(DnuToolPath)'=='' and '$(OsEnvironment)'!='Unix'">$(DnxPackageDir)/bin/dnu.cmd</DnuToolPath>
    <DnuToolPath Condition="'$(DnuToolPath)'=='' and '$(OsEnvironment)'=='Unix'">$(DnxPackageDir)/bin/dnu</DnuToolPath>
    <DotnetToolCommand Condition="'$(DotnetToolCommand)' == '' and '$(OsEnvironment)'!='Unix'">$(DotnetCliPath)dotnet.exe</DotnetToolCommand>
    <DotnetToolCommand Condition="'$(DotnetToolCommand)' == '' and '$(OsEnvironment)'=='Unix'">$(DotnetCliPath)dotnet</DotnetToolCommand>
    <DnuToolPath>$(DotnetToolCommand)</DnuToolPath>

    <DnuRestoreSource>@(DnuSourceList -> '--source %(Identity)', ' ')</DnuRestoreSource>

    <DnuRestoreCommand>"$(DnuToolPath)"</DnuRestoreCommand>
    <DnuRestoreCommand>$(DnuRestoreCommand) restore</DnuRestoreCommand>
    <DnuRestoreCommand Condition="'$(ParallelRestore)'=='true'">$(DnuRestoreCommand) --parallel</DnuRestoreCommand>
    <DnuRestoreCommand Condition="'$(UseNuGetHttpCache)'!='true'">$(DnuRestoreCommand) --no-cache</DnuRestoreCommand>
    <DnuRestoreCommand>$(DnuRestoreCommand) --packages "$(PackagesDir.TrimEnd('/\'.ToCharArray()))" $(DnuRestoreSource)</DnuRestoreCommand>
    <DnuRestoreCommand Condition="'$(LockDependencies)' == 'true'">$(DnuRestoreCommand) --lock</DnuRestoreCommand>
    <DnuRestoreCommand Condition="'$(NuGetConfigPath)'!=''">$(DnuRestoreCommand) --configfile $(NuGetConfigPath)</DnuRestoreCommand>
  </PropertyGroup>

  <!-- Create a collection of all project.json files for dependency updates. -->
  <ItemGroup>
    <ProjectJsonFiles Include="$(SourceDir)**/project.json" />
    <ProjectJsonFiles Include="$(MSBuildThisFileDirectory)pkg/**/project.json" />
    <ProjectJsonFiles Condition="'$(BuildTestsAgainstPackages)' == 'true'" Include="$(GeneratedProjectJsonDir)/**/project.json" />
  </ItemGroup>

  <PropertyGroup Condition="'$(BuildAllProjects)'=='true'">
    <!-- When we do a traversal build we get all packages up front, don't restore them again -->
    <RestorePackages>false</RestorePackages>
  </PropertyGroup>

  <PropertyGroup>
    <!-- By default make all libraries to be AnyCPU but individual projects can override it if they need to -->
    <Platform>AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <!-- dotnet/corefx#8899 tracks fixing this -->
    <RunApiCompat Condition="'$(OSEnvironment)' == 'Windows_NT'">true</RunApiCompat>
  </PropertyGroup>

  <!--
  Projects that have no OS-specific implementations just use Debug and Release for $(Configuration).
  Projects that do have OS-specific implementations use OS_Debug and OS_Release, for all OS's we support even
  if the code is the same between some OS's (so if you have some project that just calls POSIX APIs, we still have
  OSX_[Debug|Release] and Linux_[Debug|Release] configurations.  We do this so that we place all the output under
  a single binary folder and can have a similar experience between the command line and Visual Studio.
  -->

  <!--
  If Configuration is empty that means we are not being built in VS and so folks need to explicitly pass the different
  values for $(ConfigurationGroup), $(TargetGroup), or $(OSGroup) or accept the defaults for them.
  -->
  <PropertyGroup Condition="'$(Configuration)'==''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>
    <Configuration>$(ConfigurationGroup)</Configuration>
    <Configuration Condition="'$(TargetGroup)'!=''">$(TargetGroup)_$(Configuration)</Configuration>
    <Configuration Condition="'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'">$(OSGroup)_$(Configuration)</Configuration>
  </PropertyGroup>

  <!--
  If Configuration is set then someone explicitly passed it in or we building from VS. In either case
  default $(ConfigurationGroup), $(TargetGroup), or $(OSGroup) from the Configuration if they aren't
  already explicitly set.
  -->
  <PropertyGroup Condition="'$(Configuration)'!=''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.EndsWith('Debug'))">Debug</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.EndsWith('Release'))">Release</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>

    <BuildAllOSGroups Condition="'$(BuildAllOSGroups)' == ''">true</BuildAllOSGroups>

    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Windows'))">Windows_NT</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Unix'))">Unix</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Linux'))">Linux</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('OSX'))">OSX</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('FreeBSD'))">FreeBSD</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('NetBSD'))">NetBSD</OSGroup>
    <OSGroup Condition="'$(OSGroup)'==''">AnyOS</OSGroup>

    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netcore50aot'))">netcore50aot</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netstandard13aot'))">netstandard13aot</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netstandard15aot'))">netstandard15aot</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netstandard1.7'))">netstandard1.7</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netcore50'))">netcore50</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netcoreapp1.0'))">netcoreapp1.0</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netcoreapp1.1'))">netcoreapp1.1</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('dnxcore50'))">dnxcore50</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('net463'))">net463</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('net462'))">net462</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('net461'))">net461</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('net46'))">net46</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('net45'))">net45</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('net451'))">net451</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('win8'))">win8</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('wpa81'))">wpa81</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('uap101aot'))">uap101aot</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('uap101'))">uap101</TargetGroup>
  </PropertyGroup>

  <!-- Set up Default symbol and optimization for Configuration -->
  <Choose>
    <When Condition="'$(ConfigurationGroup)'=='Debug'">
      <PropertyGroup>
        <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
        <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
        <DebugType Condition="'$(DebugType)' == ''">full</DebugType>
        <DefineConstants>$(DefineConstants),DEBUG,TRACE</DefineConstants>
      </PropertyGroup>
    </When>
    <When Condition="'$(ConfigurationGroup)' == 'Release'">
      <PropertyGroup>
        <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
        <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
        <DebugType Condition="'$(DebugType)' == ''">pdbonly</DebugType>
        <DefineConstants>$(DefineConstants),TRACE</DefineConstants>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown ConfigurationGroup [$(ConfigurationGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- initialize all the targets variables to false as they should only be set below -->
  <PropertyGroup>
    <TargetsWindows>false</TargetsWindows>
    <TargetsUnix>false</TargetsUnix>
    <TargetsLinux>false</TargetsLinux>
    <TargetsOSX>false</TargetsOSX>
    <TargetsFreeBSD>false</TargetsFreeBSD>
    <TargetsNetBSD>false</TargetsNetBSD>
  </PropertyGroup>

  <!-- Setup properties per OSGroup -->
  <Choose>
    <When Condition="'$(OSGroup)'=='AnyOS'">
      <PropertyGroup>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='Windows_NT'">
      <PropertyGroup>
        <TargetsWindows>true</TargetsWindows>
        <TestNugetRuntimeId>win7-x64</TestNugetRuntimeId>
        <PackageTargetRuntime>win</PackageTargetRuntime>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='Unix'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TestNugetRuntimeId>ubuntu.14.04-x64</TestNugetRuntimeId>
        <PackageTargetRuntime>unix</PackageTargetRuntime>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='Linux'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsLinux>true</TargetsLinux>
        <TestNugetRuntimeId>ubuntu.14.04-x64</TestNugetRuntimeId>
        <PackageTargetRuntime>linux</PackageTargetRuntime>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='OSX'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsOSX>true</TargetsOSX>
        <TestNugetRuntimeId>osx.10.10-x64</TestNugetRuntimeId>
        <PackageTargetRuntime>osx</PackageTargetRuntime>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='FreeBSD'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsFreeBSD>true</TargetsFreeBSD>
        <TestNugetRuntimeId>ubuntu.14.04-x64</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='NetBSD'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsNetBSD>true</TargetsNetBSD>
        <TestNugetRuntimeId>ubuntu.14.04-x64</TestNugetRuntimeId>   <!-- TODO -->
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown OSGroup [$(OSGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <TargetsUnknownUnix Condition="'$(TargetsUnix)' == 'true' AND '$(OSGroup)' != 'Unix' AND '$(OSGroup)' != 'FreeBSD' AND '$(OSGroup)' != 'Linux' AND '$(OSGroup)' != 'NetBSD' AND '$(OSGroup)' != 'OSX'">true</TargetsUnknownUnix>
  </PropertyGroup>

  <!-- Setup properties per TargetGroup -->
  <Choose>
    <When Condition="'$(TargetGroup)'==''">
      <PropertyGroup>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netcore50'">
      <PropertyGroup>
        <PackageTargetFramework>netcore50</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.Private.NetNative</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETCore,Version=v5.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netcore50aot'">
      <PropertyGroup>
        <PackageTargetFramework>netcore50</PackageTargetFramework>
        <PackageTargetRuntime>aot</PackageTargetRuntime>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.Private.NetNative</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETCore,Version=v5.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.0'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.0</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.1'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.1</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.1</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.2'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.2</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.2</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.3'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.3</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.4'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.4</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.4</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.5'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.5</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.5</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.6'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.6</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.6</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard1.7'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.7</PackageTargetFramework>
        <NuGetTargetMoniker>.NETStandard,Version=v1.7</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard13aot'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.3</PackageTargetFramework>
        <PackageTargetRuntime>aot</PackageTargetRuntime>
        <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netstandard15aot'">
      <PropertyGroup>
        <PackageTargetFramework>netstandard1.5</PackageTargetFramework>
        <PackageTargetRuntime>aot</PackageTargetRuntime>
        <NuGetTargetMoniker>.NETStandard,Version=v1.5</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netcoreapp1.0'">
      <PropertyGroup>
        <PackageTargetFramework>netcoreapp1.0</PackageTargetFramework>
        <NuGetTargetMoniker>.NETCoreApp,Version=v1.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netcoreapp1.1'">
      <PropertyGroup>
        <PackageTargetFramework>netcoreapp1.1</PackageTargetFramework>
        <NuGetTargetMoniker>.NETCoreApp,Version=v1.1</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='dnxcore50'">
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);DNXCore50 has been deprecated.  Please use NETStandard1.X or NETCoreApp1.0 instead.</ConfigurationErrorMsg>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='net463'">
      <PropertyGroup>
        <PackageTargetFramework>net463</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.NETFramework.v4.6.3</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETFramework,Version=v4.6.3</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='net462'">
      <PropertyGroup>
        <PackageTargetFramework>net462</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.NETFramework.v4.6.2</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETFramework,Version=v4.6.2</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='net461'">
      <PropertyGroup>
        <PackageTargetFramework>net461</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.NETFramework.v4.6.1</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETFramework,Version=v4.6.1</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='net46'">
      <PropertyGroup>
        <PackageTargetFramework>net46</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.NETFramework.v4.6</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETFramework,Version=v4.6</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='net451'">
      <PropertyGroup>
        <PackageTargetFramework>net451</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.NETFramework.v4.5.1</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETFramework,Version=v4.5.1</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='net45'">
      <PropertyGroup>
        <PackageTargetFramework>net45</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.NETFramework.v4.5</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETFramework,Version=v4.5</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='win8'">
      <PropertyGroup>
        <PackageTargetFramework>win8</PackageTargetFramework>
        <NuGetTargetMoniker>Windows,Version=v8.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='wpa81'">
      <PropertyGroup>
        <PackageTargetFramework>wpa81</PackageTargetFramework>
        <NuGetTargetMoniker>WindowsPhoneApp,Version=v8.1</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='uap101aot'">
      <PropertyGroup>
        <PackageTargetFramework>uap10.1</PackageTargetFramework>
        <PackageTargetRuntime>aot</PackageTargetRuntime>
        <NuGetTargetMoniker>UAP,Version=v10.1</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='uap101'">
      <PropertyGroup>
        <PackageTargetFramework>uap10.1</PackageTargetFramework>
        <NuGetTargetMoniker>UAP,Version=v10.1</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='portable-net45+win8+sl5'">
      <PropertyGroup>
        <PackageTargetFramework>portable-net45+win8+sl5</PackageTargetFramework>
        <NuGetTargetMoniker>.NETPortable,Version=v0.0,Profile=Profile47</NuGetTargetMoniker>
      </PropertyGroup>
      <ItemGroup>
        <Compile Include="$(CommonPath)\System\Reflection\AssemblyMetadataAttribute.cs">
          <Link>System\Reflection\AssemblyMetadataAttribute.cs</Link>
        </Compile>
      </ItemGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='portable-net40+sl4+win8+wp8'">
      <PropertyGroup>
        <PackageTargetFramework>portable-net40+sl4+win8+wp8</PackageTargetFramework>
        <NuGetTargetMoniker>.NETPortable,Version=v0.0,Profile=Profile36</NuGetTargetMoniker>
      </PropertyGroup>
      <ItemGroup>
        <Compile Include="$(CommonPath)\System\Reflection\AssemblyMetadataAttribute.cs">
          <Link>System\Reflection\AssemblyMetadataAttribute.cs</Link>
        </Compile>
      </ItemGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown TargetGroup [$(TargetGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Default Test platform to deploy the netstandard compiled tests to -->
  <PropertyGroup>
    <DefaultTestTFM>netcoreapp1.1</DefaultTestTFM>
    <TestTFM Condition="'$(TestTFM)'==''">$(DefaultTestTFM)</TestTFM>
    <!-- we default FilterToTestTFM to DefaultTestTFM if it is not explicity defined -->
    <FilterToTestTFM Condition="'$(FilterToTestTFM)'==''">$(DefaultTestTFM)</FilterToTestTFM>
  </PropertyGroup>

  <PropertyGroup>
    <IsRedistAssembly Condition="'$(IsRedistAssembly)'=='' AND ($(MSBuildProjectFullPath.Contains('\redist\')) OR $(MSBuildProjectFullPath.Contains('/redist/')))">true</IsRedistAssembly>
  </PropertyGroup>
  <PropertyGroup Condition="'$(IsRedistAssembly)'=='true'">
    <NuGetRuntimeIdentifier Condition="'$(TargetGroup)' == 'netcore50'">win8</NuGetRuntimeIdentifier>
    <NuGetRuntimeIdentifier Condition="'$(TargetGroup)' == 'netcore50aot'">win8-aot</NuGetRuntimeIdentifier>

    <!-- workaround Dev14 issue with nuget targets -->
    <RuntimeIndentifier>$(NuGetRuntimeIdentifier)</RuntimeIndentifier>
  </PropertyGroup>

  <!-- If there is a target group, try to find project.json and lockfile in a subfolder named as that target. -->
  <PropertyGroup Condition="'$(TargetGroup)'!=''">
    <ProjectJson Condition="Exists('$(MSBuildProjectDirectory)/$(TargetGroup)/project.json')">$(MSBuildProjectDirectory)/$(TargetGroup)/project.json</ProjectJson>
    <!-- Check for both project.json and lockfile to avoid using a stale lockfile. -->
    <ProjectLockJson Condition="Exists('$(MSBuildProjectDirectory)/$(TargetGroup)/project.json') AND Exists('$(MSBuildProjectDirectory)/$(TargetGroup)/project.lock.json')">$(MSBuildProjectDirectory)/$(TargetGroup)/project.lock.json</ProjectLockJson>
  </PropertyGroup>

  <!-- Disable some standard properties for building our projects -->
  <PropertyGroup>
    <NoStdLib>true</NoStdLib>
    <NoExplicitReferenceToStdLib>true</NoExplicitReferenceToStdLib>
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
  </PropertyGroup>

  <!-- Set up handling of build warnings -->
  <PropertyGroup>
    <WarningLevel>4</WarningLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <!-- Set up some common paths -->
  <PropertyGroup>
    <CommonPath>$(SourceDir)Common\src</CommonPath>
    <CommonTestPath>$(SourceDir)Common\tests</CommonTestPath>
  </PropertyGroup>

  <!-- Set up the default output and intermediate paths -->
  <PropertyGroup>
    <OSPlatformConfig>$(OSGroup).$(Platform).$(ConfigurationGroup)</OSPlatformConfig>
    <TargetOutputRelPath Condition="'$(TargetGroup)'!=''">$(TargetGroup)/</TargetOutputRelPath>

    <BaseOutputPath Condition="'$(BaseOutputPath)'==''">$(BinDir)</BaseOutputPath>
    <OutputPathSubfolder Condition="'$(IsCompatAssembly)'=='true'">/Compat</OutputPathSubfolder>
    <OutputPath Condition="'$(OutputPath)'==''">$(BaseOutputPath)$(OSPlatformConfig)/$(MSBuildProjectName)/$(TargetOutputRelPath)$(OutputPathSubfolder)</OutputPath>

    <IntermediateOutputRootPath Condition="'$(IntermediateOutputRootPath)' == ''">$(BaseIntermediateOutputPath)$(OSPlatformConfig)/</IntermediateOutputRootPath>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(IntermediateOutputRootPath)$(MSBuildProjectName)/$(TargetOutputRelPath)</IntermediateOutputPath>

    <TestPath Condition="'$(TestPath)'==''">$(TestWorkingDir)$(OSPlatformConfig)/$(MSBuildProjectName)/$(TargetOutputRelPath)</TestPath>

    <PackagesBasePath Condition="'$(PackagesBasePath)'==''">$(BinDir)$(OSPlatformConfig)</PackagesBasePath>
    <PackageOutputPath Condition="'$(PackageOutputPath)'==''">$(PackageOutputRoot)$(ConfigurationGroup)/</PackageOutputPath>
    <SymbolPackageOutputPath Condition="'$(SymbolPackageOutputPath)'==''">$(PackageOutputPath)symbols/</SymbolPackageOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Don't run tests if we're building another platform's binaries on Windows -->
    <SkipTests Condition="'$(SkipTests)'=='' and ('$(OsEnvironment)'=='Windows_NT' and '$(TargetsWindows)'!='true' and '$(OSGroup)'!='AnyOS')">true</SkipTests>
  </PropertyGroup>

  <!-- Use Roslyn Compilers to build -->
  <Import Project="$(RoslynPropsFile)" Condition="'$(OSEnvironment)'!='Unix' and Exists('$(RoslynPropsFile)') and '$(UseRoslynCompilers)'!='false'" />
  <Import Project="$(RoslynPropsFile)" Condition="'$(OSEnvironment)'=='Unix' and Exists('$(RoslynPropsFile)')" />
</Project>
