<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition="Exists('..\dir.props')" Project="..\dir.props" />
  <Import Project="src\BuildValues.props" />

  <!--
    $(OS) is set to Unix/Windows_NT. This comes from an environment variable on Windows and MSBuild on Unix.
  -->
  <PropertyGroup>
    <OsEnvironment Condition="'$(OsEnvironment)'==''">$(OS)</OsEnvironment>
  </PropertyGroup>

  <!-- Build Tools Versions -->
  <PropertyGroup>
    <BuildToolsVersion>1.0.25-prerelease-00134</BuildToolsVersion>
    <DnxVersion>1.0.0-rc2-16128</DnxVersion>
    <DnxPackageName Condition="'$(DnxPackageName)' == '' and '$(OsEnvironment)'!='Unix'">dnx-coreclr-win-x86.$(DnxVersion)</DnxPackageName>
    <DnxPackageName Condition="'$(DnxPackageName)' == '' and '$(OsEnvironment)'=='Unix'">dnx-mono.$(DnxVersion)</DnxPackageName>
    <RoslynVersion>1.0.0-rc3-20150510-01</RoslynVersion>
    <RoslynPackageName>Microsoft.Net.ToolsetCompilers</RoslynPackageName>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyMetadata Include=".NETFrameworkAssembly">
      <Value></Value>
    </AssemblyMetadata>
    <AssemblyMetadata Include="Serviceable">
      <Value>True</Value>
    </AssemblyMetadata>
  </ItemGroup>
  
  <!-- 
    Switching to the .NET Core version of the BuildTools tasks seems to break numerous scenarios, such as VS intellisense and resource designer 
    as well as runnning the build on mono. Until we can get these sorted out we will continue using the .NET 4.5 version of the tasks. 
  -->
  <PropertyGroup>
    <BuildToolsTargets45>true</BuildToolsTargets45>
  </PropertyGroup>

  <!-- Common repo directories -->
  <PropertyGroup>
    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>
    <SourceDir>$(ProjectDir)src\</SourceDir>

    <!-- Output directories -->
    <BinDir Condition="'$(BinDir)'==''">$(ProjectDir)bin/</BinDir>
    <ObjDir Condition="'$(ObjDir)'==''">$(BinDir)obj/</ObjDir>
    <TestWorkingDir Condition="'$(TestWorkingDir)'==''">$(BinDir)tests/</TestWorkingDir>
    <PackagesOutDir Condition="'$(PackagesOutDir)'==''">$(BinDir)packages/</PackagesOutDir>

    <!-- Input Directories -->
    <PackagesDir Condition="'$(PackagesDir)'==''">$(ProjectDir)packages/</PackagesDir>
    <ToolsDir Condition="'$(ToolsDir)'==''">$(PackagesDir)Microsoft.DotNet.BuildTools.$(BuildToolsVersion)/lib/</ToolsDir>
    <BuildToolsTaskDir Condition="'$(BuildToolsTargets45)' == 'true'">$(ToolsDir)net45/</BuildToolsTaskDir>
    
    <!-- Packaging configuration -->
    <PackageDescriptionFile>$(ProjectDir)pkg/descriptions.json</PackageDescriptionFile>
    <RuntimeIdGraphDefinitionFile>$(ProjectDir)pkg/Microsoft.NETCore.Platforms/runtime.json</RuntimeIdGraphDefinitionFile>
    <!-- Add a condition for this when we are able to run on .NET Core -->
    <PackagingTaskDir>$(ToolsDir)net45/</PackagingTaskDir>
    <BuildNumberMajor>$(RevisionNumber)</BuildNumberMajor>
  </PropertyGroup>

  <!-- Test runtime -->
  <PropertyGroup>
    <TestRuntimeProjectJson Condition="'$(TestRuntimeProjectJson)' == ''">$(SourceDir)Common/test-runtime/project.json</TestRuntimeProjectJson>
    <TestRuntimeProjectLockJson Condition="'$(TestRuntimeProjectLockJson)' == ''">$(SourceDir)Common/test-runtime/project.lock.json</TestRuntimeProjectLockJson>
  </PropertyGroup>

  <!-- Package dependency validation -->
  <PropertyGroup>
    <ValidatePackageVersions>true</ValidatePackageVersions>
    <ProhibitFloatingDependencies>true</ProhibitFloatingDependencies>
  </PropertyGroup>

  <ItemGroup>
    <ValidationPattern Include="^((System\..*)|(Microsoft\.CSharp)|(Microsoft\.NETCore.*)|(Microsoft\.Win32\..*)|(Microsoft\.VisualBasic))(?&lt;!TestData)$">
      <ExpectedPrerelease>rc2-23610</ExpectedPrerelease>
    </ValidationPattern>
    <ValidationPattern Include="^(System\..*TestData)$">
      <ExpectedVersion>1.0.0-prerelease</ExpectedVersion>
    </ValidationPattern>
    <ValidationPattern Include="^xunit$">
      <ExpectedVersion>2.1.0</ExpectedVersion>
    </ValidationPattern>
    <ValidationPattern Include="^xunit\.netcore\.extensions$">
      <ExpectedVersion>1.0.0-prerelease-00123</ExpectedVersion>
    </ValidationPattern>
  </ItemGroup>

  <!-- list of nuget package sources passed to nuget.exe -->
  <ItemGroup Condition="'$(ExcludeInternetFeeds)' != 'true'">
    <NuGetSourceList Include="https:%2F%2Fwww.myget.org/F/dotnet-buildtools" />
    <NuGetSourceList Include="https:%2F%2Fwww.nuget.org/api/v2" />
  </ItemGroup>

  <!-- Common nuget properties -->
  <PropertyGroup>
    <NuGetToolPath Condition="'$(NuGetToolPath)'==''">$(PackagesDir)NuGet.exe</NuGetToolPath>
    <NuGetPackageSource>@(NuGetSourceList -> '-source %(Identity)', ' ')</NuGetPackageSource>
    <NuGetConfigCommandLine>$(NuGetPackageSource)</NuGetConfigCommandLine>

    <NugetRestoreCommand>"$(NuGetToolPath)"</NugetRestoreCommand>
    <NugetRestoreCommand>$(NugetRestoreCommand) install</NugetRestoreCommand>
    <!-- NuGet.exe doesn't like trailing slashes in the output directory argument -->
    <NugetRestoreCommand>$(NugetRestoreCommand) -OutputDirectory "$(PackagesDir.TrimEnd('/\'.ToCharArray()))"</NugetRestoreCommand>
    <NugetRestoreCommand>$(NugetRestoreCommand) $(NuGetConfigCommandLine)</NugetRestoreCommand>
    <NugetRestoreCommand>$(NugetRestoreCommand) -Verbosity detailed</NugetRestoreCommand>
    <NugetRestoreCommand Condition="'$(OsEnvironment)'=='Unix'">mono $(NuGetRestoreCommand)</NugetRestoreCommand>
  </PropertyGroup>

  <!-- list of nuget package sources passed to dnu -->
  <ItemGroup Condition="'$(ExcludeInternetFeeds)' != 'true'">
    <!-- Need to escape double forward slash (%2F) or MSBuild will normalize to one slash on Unix. -->

    <DnuSourceList Include="https:%2F%2Fwww.myget.org/F/dotnet-core/" />
    <DnuSourceList Include="https:%2F%2Fwww.myget.org/F/dotnet-coreclr/" />
    <DnuSourceList Include="https:%2F%2Fwww.myget.org/F/dotnet-corefxtestdata/" />
    <DnuSourceList Include="https:%2F%2Fwww.myget.org/F/dotnet-buildtools/" />
    <DnuSourceList Include="https:%2F%2Fwww.nuget.org/api/v2/" />
  </ItemGroup>

  <!-- list of directories to perform batch restore -->
  <ItemGroup>
    <DnuRestoreDir Include="$(MSBuildProjectDirectory)\src" />
    <DnuRestoreDir Include="$(ToolsDir)" />
    <!-- workaround to address issue where DNX won't recurse directories under a project.json
         https://github.com/aspnet/dnx/commit/0dda8bf86863364cc20421f1af7494f1b2a3256f -->
    <DnuRestoreDir Include="$(MSBuildProjectDirectory)\src\*\src\**\project.json" />
    <DnuRestoreDir Include="$(MSBuildProjectDirectory)\src\*\ref\*\project.json" />
    <DnuRestoreDir Include="$(MSBuildProjectDirectory)\src\*\tests\*\project.json" />
    <DnuRestoreDir Include="$(MSBuildProjectDirectory)\src\*\*\netcore50aot\project.json" />
    <DnuRestoreDir Include="$(MSBuildProjectDirectory)\src\Common\tests\**\project.json" />
  </ItemGroup>

  <PropertyGroup>
    <DnxPackageDir Condition="'$(DnxPackageDir)'==''">$(PackagesDir)/$(DnxPackageName)/</DnxPackageDir>
    <DnuToolPath Condition="'$(DnuToolPath)'=='' and '$(OsEnvironment)'!='Unix'">$(DnxPackageDir)\bin\dnu.cmd</DnuToolPath>
    <DnuToolPath Condition="'$(DnuToolPath)'=='' and '$(OsEnvironment)'=='Unix'">$(DnxPackageDir)/bin/dnu</DnuToolPath>

    <DnuRestoreSource>@(DnuSourceList -> '--source %(Identity)', ' ')</DnuRestoreSource>

    <DnuRestoreCommand>"$(DnuToolPath)"</DnuRestoreCommand>
    <DnuRestoreCommand>$(DnuRestoreCommand) restore</DnuRestoreCommand>
    <DnuRestoreCommand Condition="'$(ParallelRestore)'=='true'">$(DnuRestoreCommand) --parallel</DnuRestoreCommand>
    <DnuRestoreCommand>$(DnuRestoreCommand) --packages "$(PackagesDir.TrimEnd('/\'.ToCharArray()))" $(DnuRestoreSource)</DnuRestoreCommand>
    <DnuRestoreCommand Condition="'$(LockDependencies)' == 'true'">$(DnuRestoreCommand) --lock</DnuRestoreCommand>
  </PropertyGroup>

  <!-- Create a collection of all project.json files for dependency updates. -->
  <ItemGroup>
    <ProjectJsonFiles Include="$(SourceDir)**\project.json" />
  </ItemGroup>

  <PropertyGroup Condition="'$(BuildAllProjects)'=='true'">  
    <!-- When we do a traversal build we get all packages up front, don't restore them again -->  
    <RestorePackages>false</RestorePackages>  
  </PropertyGroup>

  <!--
    On Unix we always use a version of Roslyn we restore from NuGet and we have to work around some known issues.
  -->
  <PropertyGroup Condition="'$(OsEnvironment)'=='Unix'">
    <RoslynPackageDir>$(PackagesDir)/$(RoslynPackageName).$(RoslynVersion)/</RoslynPackageDir>
    <RoslynPropsFile>$(RoslynPackageDir)build/Microsoft.Net.ToolsetCompilers.props</RoslynPropsFile>

    <!--
      PDB support isn't implemented yet. https://github.com/dotnet/roslyn/issues/2449
      Note that both DebugSymbols and DebugType need set or project references will assume they need to copy pdbs and fail.
    -->
    <DebugSymbols>false</DebugSymbols>
    <DebugType>none</DebugType>

    <!--
      Delay signing with the ECMA key currently doesn't work.
      https://github.com/dotnet/roslyn/issues/2444
    -->
    <UseECMAKey>false</UseECMAKey>

    <!--
      Mono currently doesn't include VB targets for portable, notably /lib/mono/xbuild/Microsoft/Portable/v4.5/Microsoft.Portable.VisualBasic.targets.
      Fixed in https://github.com/mono/mono/pull/1726.
    -->
    <IncludeVbProjects>false</IncludeVbProjects>

    <!--
      Building packages fails for two reasons.
      First, nuget doesn't like the paths in the nuspec having backslashes as directory separators.
      Second, we aren't yet building pdbs, which the nuspecs specify.
    -->
    <SkipBuildPackages>true</SkipBuildPackages>
  </PropertyGroup>
  
  <PropertyGroup>
    <!-- By default make all libraries to be AnyCPU but individual projects can override it if they need to -->
    <Platform>AnyCPU</Platform>
    <OutputType>Library</OutputType>
  </PropertyGroup>

  <!-- 
  Projects that have no OS-specific implementations just use Debug and Release for $(Configuration).
  Projects that do have OS-specific implementations use OS_Debug and OS_Release, for all OS's we support even
  if the code is the same between some OS's (so if you have some project that just calls POSIX APIs, we still have
  OSX_[Debug|Release] and Linux_[Debug|Release] configurations.  We do this so that we place all the output under
  a single binary folder and can have a similar experience between the command line and Visual Studio.
  -->

  <!-- 
  If Configuration is empty that means we are not being built in VS and so folks need to explicitly pass the different
  values for $(ConfigurationGroup), $(TargetGroup), or $(OSGroup) or accept the defaults for them.
  -->
  <PropertyGroup Condition="'$(Configuration)'==''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>
    <Configuration>$(ConfigurationGroup)</Configuration>
    <Configuration Condition="'$(TargetGroup)'!=''">$(TargetGroup)_$(Configuration)</Configuration>
    <Configuration Condition="'$(OSGroup)'!='' and '$(OSGroup)'!='Windows_NT'">$(OSGroup)_$(Configuration)</Configuration>
  </PropertyGroup>

  <!--
  If Configuration is set then someone explicitly passed it in or we building from VS. In either case
  default $(ConfigurationGroup), $(TargetGroup), or $(OSGroup) from the Configuration if they aren't
  already explicitly set.
  -->
  <PropertyGroup Condition="'$(Configuration)'!=''">
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.EndsWith('Debug'))">Debug</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'=='' and $(Configuration.EndsWith('Release'))">Release</ConfigurationGroup>
    <ConfigurationGroup Condition="'$(ConfigurationGroup)'==''">Debug</ConfigurationGroup>

    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Windows'))">Windows_NT</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('Linux'))">Linux</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('OSX'))">OSX</OSGroup>
    <OSGroup Condition="'$(OSGroup)'=='' and $(Configuration.StartsWith('FreeBSD'))">FreeBSD</OSGroup>
    <OSGroup Condition="'$(OSGroup)'==''">Windows_NT</OSGroup>

    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netcore50aot'))">netcore50aot</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('netcore50'))">netcore50</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('dnxcore50'))">dnxcore50</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'=='' and $(Configuration.Contains('net46'))">net46</TargetGroup>
  </PropertyGroup>

  <!-- Set up Default symbol and optimization for Configuration -->
  <Choose>
    <When Condition="'$(ConfigurationGroup)'=='Debug'">
      <PropertyGroup>
        <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
        <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
        <DebugType Condition="'$(DebugType)' == ''">full</DebugType>
        <DefineConstants>$(DefineConstants),DEBUG,TRACE</DefineConstants>
      </PropertyGroup>
    </When>
    <When Condition="'$(ConfigurationGroup)' == 'Release'">
      <PropertyGroup>
        <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
        <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
        <DebugType Condition="'$(DebugType)' == ''">pdbonly</DebugType>
        <DefineConstants>$(DefineConstants),TRACE</DefineConstants>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown ConfigurationGroup [$(ConfigurationGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Setup properties per OSGroup -->
  <Choose>
    <When Condition="'$(OSGroup)'=='Windows_NT'">
      <PropertyGroup>
        <TargetsWindows>true</TargetsWindows>
        <TestNugetRuntimeId>win7-x64</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='Linux'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsLinux>true</TargetsLinux>
        <TestNugetRuntimeId>ubuntu.14.04-x64</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='OSX'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsOSX>true</TargetsOSX>
        <TestNugetRuntimeId>osx.10.10-x64</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='FreeBSD'">
      <PropertyGroup>
        <TargetsUnix>true</TargetsUnix>
        <TargetsFreeBSD>true</TargetsFreeBSD>
        <TestNugetRuntimeId>ubuntu.14.04-x64</TestNugetRuntimeId>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown OSGroup [$(OSGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <TargetsUnknownUnix Condition="'$(TargetsUnix)' == 'true' AND '$(OSGroup)' != 'FreeBSD' AND '$(OSGroup)' != 'Linux' AND '$(OSGroup)' != 'OSX'">true</TargetsUnknownUnix>
  </PropertyGroup>

  <!-- Setup properties per TargetGroup -->
  <Choose>
    <When Condition="'$(TargetGroup)'==''">
      <PropertyGroup>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netcore50'">
      <PropertyGroup>
        <PackageTargetFramework>netcore50</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.Private.NetNative</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETCore,Version=v5.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='netcore50aot'">
      <PropertyGroup>
        <PackageTargetFramework>netcore50</PackageTargetFramework>
        <PackageTargetRuntime>aot</PackageTargetRuntime>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.Private.NetNative</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETCore,Version=v5.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='dnxcore50'">
      <PropertyGroup>
        <PackageTargetFramework>dnxcore50</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.Private.CoreCLR</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>DNXCore,Version=v5.0</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetGroup)'=='net46'">
      <PropertyGroup>
        <PackageTargetFramework>net46</PackageTargetFramework>
        <TargetingPackNugetPackageId>Microsoft.TargetingPack.NETFramework.v4.6</TargetingPackNugetPackageId>
        <NuGetTargetMoniker>.NETFramework,Version=v4.6</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg>$(ConfigurationErrorMsg);Unknown TargetGroup [$(TargetGroup)] specificed in your project.</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Provide defaults for ToolNugetRuntimeId -->
  <PropertyGroup Condition="'$(ToolNugetRuntimeId)'== ''">
    <ToolNugetRuntimeId Condition="'$(OsEnvironment)'=='Windows_NT'">win7-x64</ToolNugetRuntimeId>

    <!-- This is a bit of a hack because inside MSBuild we have no real concept of the host distro, so we'll assume
         that if you are building on not windows, your host OS is the same as your target.  If that's not
         the case, you'll have to provide your own ToolNugetRuntimeId, which is not the end of the world (build.sh will
         do this for you, for example). -->
    <ToolNugetRuntimeId Condition="'$(OsEnvironment)'=='Unix'">$(TestNugetRuntimeId)</ToolNugetRuntimeId>
  </PropertyGroup>

  <!-- Disable some standard properties for building our projects -->
  <PropertyGroup>
    <NoStdLib>true</NoStdLib>
    <NoExplicitReferenceToStdLib>true</NoExplicitReferenceToStdLib>
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
  </PropertyGroup>

  <!-- Set up handling of build warnings -->
  <PropertyGroup>
    <WarningLevel>4</WarningLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <!-- Temporary until build/CI system is upgraded to C# 6: disable C# 6 features -->
  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj' OR '$(Language)' == 'C#'">
    <LangVersion>5</LangVersion>
  </PropertyGroup>

  <!-- Set up some common paths -->
  <PropertyGroup>
    <CommonPath>$(SourceDir)Common\src</CommonPath>
    <CommonTestPath>$(SourceDir)Common\tests</CommonTestPath>
  </PropertyGroup>

  <!-- Set up the default output and intermediate paths -->
  <PropertyGroup>
    <OSPlatformConfig>$(OSGroup).$(Platform).$(ConfigurationGroup)</OSPlatformConfig>
    <TargetOutputRelPath Condition="'$(TargetGroup)'!=''">$(TargetGroup)\</TargetOutputRelPath>

    <BaseOutputPath Condition="'$(BaseOutputPath)'==''">$(BinDir)</BaseOutputPath>
    <OutputPath Condition="'$(OutputPath)'==''">$(BaseOutputPath)$(OSPlatformConfig)\$(MSBuildProjectName)\$(TargetOutputRelPath)</OutputPath>

    <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)'==''">$(ObjDir)</BaseIntermediateOutputPath>
    <IntermediateOutputRootPath Condition="'$(IntermediateOutputRootPath)' == ''">$(BaseIntermediateOutputPath)$(OSPlatformConfig)\</IntermediateOutputRootPath>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(IntermediateOutputRootPath)$(MSBuildProjectName)\$(TargetOutputRelPath)</IntermediateOutputPath>

    <TestPath Condition="'$(TestPath)'==''">$(TestWorkingDir)$(OSPlatformConfig)\$(MSBuildProjectName)\</TestPath>

    <PackagesBasePath Condition="'$(PackagesBasePath)'==''">$(BinDir)$(OSPlatformConfig)</PackagesBasePath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Don't run tests if we're building another platform's binaries on Windows -->
    <SkipTests Condition="'$(SkipTests)'=='' and ('$(OsEnvironment)'=='Windows_NT' and '$(TargetsWindows)'!='true')">true</SkipTests>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Work around known Dev14 bug - see
         https://connect.microsoft.com/VisualStudio/feedback/details/1000796/connect-file-uap-props-not-found-cant-build-a-portable-lib-on-vs14
    -->
    <_WindowsKitBinPath>$(MSBuildProgramFiles32)\Windows Kits\8.1\bin\x86</_WindowsKitBinPath>
    <_WindowsPhoneKitBinPath>$(MSBuildProgramFiles32)\Windows Phone Kits\8.1\bin</_WindowsPhoneKitBinPath>
    <MakePriExeFullPath>$(_WindowsKitBinPath)\makepri.exe</MakePriExeFullPath>
    <MakeAppxExeFullPath>$(_WindowsKitBinPath)\makeappx.exe</MakeAppxExeFullPath>
    <SignAppxPackageExeFullPath>$(_WindowsKitBinPath)\signtool.exe</SignAppxPackageExeFullPath>
    <MakePriExtensionPath>$(_WindowsPhoneKitBinPath)\x86\MrmEnvironmentExtDl.dll</MakePriExtensionPath>
    <MakePriExtensionPath_x64>$(_WindowsPhoneKitBinPath)\x64\MrmEnvironmentExtDl.dll</MakePriExtensionPath_x64>
  </PropertyGroup>
  
  <Import Project="$(RoslynPropsFile)" Condition="'$(OsEnvironment)'=='Unix' and Exists('$(RoslynPropsFile)')" />

</Project>
