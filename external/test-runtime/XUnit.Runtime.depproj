<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <!-- Given that xunit packages bring with them part of the framework, we need to specify a runtime in order to get the assets
         The only asset that we copy which is RID-specific is sni.dll which is only used in windows, which is why we default to Windows as the RID -->
    <NugetRuntimeIdentifier>win10-$(ArchGroup)</NugetRuntimeIdentifier>
    <!-- Use xunit for arm packages because of not providing armel package in win10 -->
    <NugetRuntimeIdentifier Condition="'$(ArchGroup)' == 'armel'">win10-arm</NugetRuntimeIdentifier>
    <RidSpecificAssets>true</RidSpecificAssets>
    <OutputPath>$(RuntimePath)</OutputPath>
    <XUnitRunnerPackageId Condition="'$(TargetGroup)' != 'netfx'">xunit.console.netcore</XUnitRunnerPackageId>
    <XUnitRunnerPackageId Condition="'$(TargetGroup)' == 'netfx'">xunit.runner.console</XUnitRunnerPackageId>
    <NuGetTargetMoniker Condition="'$(TargetGroup)' == 'uapaot'">.NETStandard,Version=v2.0</NuGetTargetMoniker>
    <NuGetTargetMonikerShort Condition="'$(TargetGroup)' == 'uapaot'">netstandard2.0</NuGetTargetMonikerShort>
    <NuGetTargetMoniker Condition="'$(TargetGroup)' == 'uap'">.NETStandard,Version=v2.0</NuGetTargetMoniker>
    <NuGetTargetMonikerShort Condition="'$(TargetGroup)' == 'uap'">netstandard2.0</NuGetTargetMonikerShort>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="xunit.console.netcore">
      <Version>$(AppXRunnerVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.DotNet.BuildTools.TestSuite">
      <Version>$(XunitNetcoreExtensionsVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.xunit.netcore.extensions">
      <Version>$(XunitNetcoreExtensionsVersion)</Version>
    </PackageReference>
    <PackageReference Include="xunit.performance.api">
      <Version>$(XunitPerfAnalysisPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="xunit.performance.core">
      <Version>$(XunitPerfAnalysisPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="xunit.performance.execution">
      <Version>$(XunitPerfAnalysisPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="xunit.performance.metrics">
      <Version>$(XunitPerfAnalysisPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.Diagnostics.Tracing.TraceEvent">
      <Version>$(TraceEventPackageVersion)</Version>
    </PackageReference>
    <!-- for callstack line numbers -->
    <PackageReference Include="Microsoft.DiaSymReader.Native">
      <Version>1.5.0</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.3rdpartytools.MarkdownLog">
      <Version>0.10.0-alpha-experimental</Version>
    </PackageReference>
    <PackageReference Include="CommandLineParser">
      <Version>2.1.1-beta</Version>
    </PackageReference>
    <PackageReference Include="Newtonsoft.Json">
      <Version>9.0.1</Version>
    </PackageReference>
    <PackageReference Include="coveralls.io">
      <Version>1.4</Version>
    </PackageReference>
    <PackageReference Include="OpenCover">
      <Version>4.6.519</Version>
    </PackageReference>
    <PackageReference Include="ReportGenerator">
      <Version>2.5.0</Version>
    </PackageReference>
    <PackageReference Include="System.IO.Compression.TestData">
      <Version>1.0.5-prerelease</Version>
    </PackageReference>
    <PackageReference Include="System.IO.Packaging.TestData">
      <Version>1.0.0-prerelease</Version>
    </PackageReference>
    <PackageReference Include="System.Security.Cryptography.X509Certificates.TestData">
      <Version>1.0.2-prerelease</Version>
    </PackageReference>
    <PackageReference Include="System.Net.TestData">
      <Version>1.0.0-prerelease</Version>
    </PackageReference>
    <PackageReference Include="System.Drawing.Common.TestData">
      <Version>1.0.3</Version>
    </PackageReference>
  </ItemGroup>
  <ItemGroup Condition="'$(TargetGroup)' == 'netfx'">
    <PackageReference Include="xunit.runner.console">
      <Version>$(XUnitPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <PackageToInclude Include="xunit.abstractions"/>
    <PackageToInclude Include="xunit.assert"/>
    <PackageToInclude Include="xunit.extensibility.core"/>
    <PackageToInclude Include="xunit.extensibility.execution"/>
    <PackageToInclude Include="xunit.runner.utility"/>
    <PackageToInclude Include="Microsoft.xunit.netcore.extensions"/>
    <PackageToInclude Include="Newtonsoft.Json"/>
    <PackageToInclude Include="$(XUnitRunnerPackageId)" />
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetGroup)' == 'uap'">
    <UAPToolsPackageVersion>1.0.14</UAPToolsPackageVersion>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetGroup)' == 'uap'">
    <PackageReference Include="Microsoft.DotNet.UAP.TestTools">
      <Version>$(UAPToolsPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <!-- System.Data.SqlClient tests require sni.dll in the test folder -->
  <ItemGroup Condition="'$(TargetGroup)' == 'uapaot'">
    <PackageReference Include="runtime.native.System.Data.SqlClient.sni">
      <Version>$(PackageVersion)-$(CoreFxExpectedPrerelease)</Version>
    </PackageReference>
    <PackageToInclude Include="runtime.win-arm64.runtime.native.System.Data.SqlClient.sni"/>
    <PackageToInclude Include="runtime.win-x64.runtime.native.System.Data.SqlClient.sni"/>
    <PackageToInclude Include="runtime.win-x86.runtime.native.System.Data.SqlClient.sni"/>
  </ItemGroup>

  <ItemGroup Condition="'$(TargetGroup)' != 'uapaot'">
    <PackageToInclude Include="xunit.performance.core"/>
    <PackageToInclude Include="xunit.performance.api"/>
    <PackageToInclude Include="xunit.performance.execution"/>
    <PackageToInclude Include="xunit.performance.metrics"/>
    <PackageToInclude Include="Microsoft.Diagnostics.Tracing.TraceEvent"/>
    <PackageToInclude Include="Microsoft.3rdpartytools.MarkdownLog"/>
    <PackageToInclude Include="CommandLineParser" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <!-- Retrieve the UAP Tools to the TestHost folder -->
  <Target Name="CopyUAPToolsToTestHost" 
          AfterTargets="RestorePackages"
          Condition="'$(TargetGroup)'=='uap'" >

    <PropertyGroup>
      <UAPToolsPackageName>microsoft.dotnet.uap.testtools</UAPToolsPackageName>

      <UAPToolsFolder Condition="'$(UAPToolsFolder)'==''">$(PackagesDir)$(UAPToolsPackageName)\$(UAPToolsPackageVersion)\Tools\$(ArchGroup)</UAPToolsFolder>
      <UAPToolsFolder>$(UAPToolsFolder.Replace('/', '\'))</UAPToolsFolder>
    </PropertyGroup>

    <!-- Give a warning that the UAPToolsFolder is not set and that tests won't run -->
    <Warning Text="Could not find the UAP Tools at '$(UAPToolsFolder)'. Please run sync." Condition="('$(UAPToolsFolder)'=='' or !Exists('$(UAPToolsFolder)')) AND '$(BuildAllConfigurations)' != 'true'" />

    <ItemGroup Condition="'$(UAPToolsFolder)'!=''">
      <RunnerFolderContents Include="$(UAPToolsFolder)\Runner\**\*" />
      <LauncherFolderContents Include="$(UAPToolsFolder)\Launcher\**\*" />
    </ItemGroup>

    <Copy Condition="'$(UAPToolsFolder)'!=''"
          SourceFiles="@(RunnerFolderContents)" 
          DestinationFolder="$(TestHostRootPath)\Runner\%(RecursiveDir)"
          SkipUnchangedFiles="true"/>

    <Copy Condition="'$(UAPToolsFolder)'!=''"
          SourceFiles="@(LauncherFolderContents)" 
          DestinationFolder="$(TestHostRootPath)\Launcher\%(RecursiveDir)"
          SkipUnchangedFiles="true"/>
  </Target>

  <Target Name="VerifyMatchingProjectNVersions"
          BeforeTargets="Build">
    <Error Condition="'$(ProjectNTfsExpectedPrerelease)' != '$(ProjectNTfsTestILCExpectedPrerelease)'" Text="The versions of ProjectN Targeting pack and TestILC have gone out of sync. Please make sure both of the prerelease versions on dependencies.props match." />
  </Target>

  <Target Name="CopyTestILCToolsToTestHost"
          AfterTargets="RestorePackages"
          Condition="'$(TargetGroup)' == 'uapaot'">
    <PropertyGroup>
      <TestILCToolsPackageName>TestILC</TestILCToolsPackageName>
      <TestILCToolsPackageName Condition="'$(ArchGroup)' == 'x64'">$(TestILCToolsPackageName).amd64ret</TestILCToolsPackageName>
      <TestILCToolsPackageName Condition="'$(ArchGroup)' == 'x86'">$(TestILCToolsPackageName).x86ret</TestILCToolsPackageName>
      <TestILCToolsPackageName Condition="'$(ArchGroup)' == 'arm'">$(TestILCToolsPackageName).armret</TestILCToolsPackageName>
      <TestILCFolder Condition="'$(TestILCFolder)' == ''">$(PackagesDir)$(TestILCToolsPackageName)\$(ProjectNTfsTestILCPackageVersion)\TestILC</TestILCFolder>
      <TestILCFolder>$(TestILCFolder.Replace('/', '\'))</TestILCFolder>
    </PropertyGroup>

    <Warning Text="Could not find the TestILC Tools at '$(TestILCFolder)'. Please run sync." Condition="('$(TestILCFolder)' == '' or !Exists('$(TestILCFolder)')) AND '$(BuildAllConfigurations)' != 'true'" />

    <ItemGroup Condition="'$(TestILCFolder)'!=''">
      <TestILCFolderContents Include="$(TestILCFolder)\**\*" />
    </ItemGroup>

    <Copy Condition="'$(TestILCFolder)'!=''"
          SourceFiles="%(TestILCFolderContents.FullPath)"
          DestinationFiles="$(TestHostRootPath)\TestILC\%(TestILCFolderContents.RecursiveDir)%(TestILCFolderContents.Filename)%(TestILCFolderContents.Extension)"
          SkipUnchangedFiles="true" />

  </Target>

  <Target Name="AddXunitConsoleRunner" BeforeTargets="ResolveReferences" Condition="'$(TargetGroup)' == 'netfx'">
    <Error Condition="!Exists('$(PackagesDir)$(XUnitRunnerPackageId)\$(XUnitPackageVersion)\tools\xunit.console.exe')"
            Text="Error: looks the package $(PackagesDir)$(XUnitRunnerPackageId)\$(XUnitPackageVersion) not restored or missing xunit.console.exe."
    />
    <ItemGroup>
      <ReferenceCopyLocalPaths 
        Include="$(PackagesDir)$(XUnitRunnerPackageId)\$(XUnitPackageVersion)\tools\*.*"
        Exclude="$(PackagesDir)$(XUnitRunnerPackageId)\$(XUnitPackageVersion)\tools\xunit.console.exe.config"
      >
        <Private>false</Private>
        <NuGetPackageId>$(XUnitRunnerPackageId)</NuGetPackageId>
        <NuGetPackageVersion>$(XUnitPackageVersion)</NuGetPackageVersion>
      </ReferenceCopyLocalPaths>
    </ItemGroup>
</Target>
</Project>
