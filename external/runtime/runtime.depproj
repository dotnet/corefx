<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <NugetRuntimeIdentifier>$(PackageRID)</NugetRuntimeIdentifier>
    <RidSpecificAssets>true</RidSpecificAssets>
    <CoreClrPackageVersion Condition="'$(TargetGroup)' == 'netcoreapp2.0'">2.0.0</CoreClrPackageVersion>
    <NoWarn>$(NoWarn);NU1603;NU1605</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetGroup)' == 'uapaot'  Or '$(TargetGroup)' == 'uap10.0.16299aot'">
    <!-- Temporarily Override restore moniker since NETNative's targeting pack still uses uap10.1 moniker -->
    <NuGetTargetMoniker>UAP,Version=v10.1</NuGetTargetMoniker>
    <NuGetTargetMonikerShort>uap10.1</NuGetTargetMonikerShort>
    <!-- System.Private.* can't be on the ILCInputFolder since ilc.exe needs to use the matching one from its toolchain. -->
    <BinPlaceILCInputFolder>false</BinPlaceILCInputFolder>
    <NuGetDeploySourceItem>Reference</NuGetDeploySourceItem>
  </PropertyGroup>
  <ItemGroup Condition="'$(TargetGroup)'=='uapaot'  Or '$(TargetGroup)' == 'uap10.0.16299aot'">
    <PackageReference Include="Microsoft.TargetingPack.Private.NETNative">
      <Version>1.1.0-$(ProjectNTfsExpectedPrerelease)</Version>
    </PackageReference>
    <FileToExclude Include="System.Private.CoreLib.Augments" />
    <FileToExclude Include="System.Private.CoreLib.DynamicDelegate" />
    <FileToExclude Include="System.Private.CoreLib.WinRTInterop" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetGroup)'!='uapaot'  And '$(TargetGroup)' != 'uap10.0.16299aot'">
    <PackageReference Include="Microsoft.NETCore.Platforms">
      <Version>$(MicrosoftNETCorePlatformsPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.Runtime.CoreCLR">
      <Version>$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.TestHost">
      <Version>$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="runtime.native.System.Data.SqlClient.sni">
      <Version>$(RuntimeNativeSystemDataSqlClientSniPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.DotNetHost">
      <Version>$(MicrosoftNETCoreDotNetHostPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.DotNetHostPolicy">
      <Version>$(MicrosoftNETCoreDotNetHostPolicyPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />

  <!-- Setup the testing shared framework host -->
  <Target Name="SetupTestingHost" AfterTargets="ResolveNuGetPackages" Condition="'$(BinPlaceTestSharedFramework)' == 'true'">

    <PropertyGroup>
      <HostFxrFileName Condition="'$(OSGroup)'=='Windows_NT'">hostfxr</HostFxrFileName>
      <HostFxrFileName Condition="'$(OSGroup)'!='Windows_NT'">libhostfxr</HostFxrFileName>
    </PropertyGroup>

    <ItemGroup>
      <HostFxFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == '$(HostFxrFileName)'" />
      <DotnetExe Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'dotnet'" />
    </ItemGroup>

    <Copy SourceFiles="@(HostFxFile)"
          DestinationFolder="$(NETCoreAppTestHostFxrPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

    <Copy SourceFiles="@(DotnetExe)"
          DestinationFolder="$(TestHostRootPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

    <Exec Command="chmod +x $(TestHostRootPath)dotnet" Condition="'$(RunningOnUnix)' == 'true'"/>
  </Target>

  <PropertyGroup>
    <SymbolPackagesDir>$(PackagesDir)symbolpackages/</SymbolPackagesDir>
  </PropertyGroup>

  <Target Name="CalculateCoreCLRSymbolPackageProperties"
          BeforeTargets="DownloadAndUnzipSymbolPackage">

    <ItemGroup>
      <_CoreCLRSymbolPackagesToDownload Include="@(ReferenceCopyLocalPaths->'%(NuGetPackageId)')" Condition="$([System.String]::Copy('%(Identity)').EndsWith('System.Private.CoreLib.dll'))">
        <!-- If there is an asset root URL set (for orchestrated build), then append symbols to that to grab the coreclr symbol location.  The orchestrated build uses a flat package layout. -->
        <Url Condition="'$(DotNetAssetRootUrl)'!=''">$(DotNetAssetRootUrl)symbols/%(NuGetPackageId).%(NuGetPackageVersion).symbols.nupkg</Url>
        <Url Condition="'$(DotNetAssetRootUrl)'==''">https://dotnet.myget.org/F/dotnet-core/symbols/%(NuGetPackageId)/%(NuGetPackageVersion)/</Url>
        <DestinationFile>%(NuGetPackageId).%(NuGetPackageVersion).symbols.nupkg.zip</DestinationFile>
        <UnzipDestinationDir>$(SymbolPackagesDir)/%(NuGetPackageId).%(NuGetPackageVersion)</UnzipDestinationDir>
      </_CoreCLRSymbolPackagesToDownload>
    </ItemGroup>

    <!-- Calculate the packages to download incrementally if we haven't downloaded them -->
    <ItemGroup>
      <SymbolPackagesToDownload Include="@(_CoreCLRSymbolPackagesToDownload)" Condition="!Exists('%(UnzipDestinationDir)')" />
    </ItemGroup>
  </Target>

  <Target Name="BinPlaceCoreCLRSymbols"
          AfterTargets="ResolveNuGetPackages"
          DependsOnTargets="CalculateCoreCLRSymbolPackageProperties;DownloadAndUnzipSymbolPackage"
          Condition="'$(CoreCLROverridePath)' == '' AND '$(DownloadCoreCLRSymbols)' != 'false'">

      <Warning Text="Failed to download CoreCLR symbols" Condition="'@(SymbolPackagesDownloaded)' == '' AND '@(SymbolPackagesToDownload)' != ''" />

      <ItemGroup>
        <_CoreCLRSymbolFiles Include="%(_CoreCLRSymbolPackagesToDownload.UnzipDestinationDir)/runtimes/$(NugetRuntimeIdentifier)/native/*.pdb" />
        <_CoreCLRSymbolFiles Include="%(_CoreCLRSymbolPackagesToDownload.UnzipDestinationDir)/runtimes/$(NugetRuntimeIdentifier)/native/*.dbg" />
        <ReferenceCopyLocalPaths Include="@(_CoreCLRSymbolFiles)"/>
      </ItemGroup>
  </Target>

  <Target Name="OverrideRuntime"
          Condition="'$(CoreCLROverridePath)' != ''"
          AfterTargets="ResolveNuGetPackages;FilterNugetPackages">
    <Warning Condition="!Exists('$(CoreCLROverridePath)')" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not exist." />
    <PropertyGroup>
      <CoreCLRPDBOverridePath Condition="'$(CoreCLRPDBOverridePath)' == '' and Exists('$(CoreCLROverridePath)/PDB')">$(CoreCLROverridePath)/PDB</CoreCLRPDBOverridePath>
      <ExcludeNativeImages Condition="'$(ExcludeNativeImages)' == '' and '$(Coverage)' == 'true'">true</ExcludeNativeImages>
    </PropertyGroup>
    <ItemGroup>
      <CoreCLRFiles Include="$(CoreCLROverridePath)/*.*" />
      <CoreCLRPDBFiles Condition="'$(CoreCLRPDBOverridePath)' != ''" Include="$(CoreCLRPDBOverridePath)/*.pdb" />

      <_ReferenceCopyLocalPathsToRemove Include="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRFiles->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)'" />
      <ReferenceCopyLocalPaths Remove="@(_ReferenceCopyLocalPathsToRemove)" />
      <ReferenceCopyLocalPaths Include="@(CoreCLRFiles);@(CoreCLRPDBFiles)" />
    </ItemGroup>

    <Warning Condition="Exists('$(CoreCLROverridePath)') And '@(CoreCLRFiles)' == ''" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not contain any files." />

    <ItemGroup Condition="'$(ExcludeNativeImages)' == 'true'">
      <ReferenceCopyLocalPathsNativeImages Remove="@(ReferenceCopyLocalPaths)" Condition="$([System.String]::Copy('%(Filename)%(Extension)').Contains('.ni.'))" />
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPathsNativeImages)" />
    </ItemGroup>

  </Target>
</Project>
