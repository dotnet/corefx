<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
    <NoWarn>$(NoWarn);NU1603;NU1605</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetsAOT)'=='true'">
    <!-- System.Private.* can't be on the ILCInputFolder since ilc.exe needs to use the matching one from its toolchain. -->
    <BinPlaceILCInputFolder>false</BinPlaceILCInputFolder>
    <NuGetDeploySourceItem>Reference</NuGetDeploySourceItem>
    <AssetTargetFallback>uap10.0</AssetTargetFallback>
    <NoWarn>$(NoWarn);NU1701</NoWarn>
  </PropertyGroup>
  
  <!-- There isn't a WebAssembly runtime package yet, but the Windows AOT package has the right surface area 
  to build against. -->  
  <PropertyGroup Condition="'$(TargetsAOT)'=='true' AND '$(ArchGroup)'=='wasm'">
    <RuntimeIdentifier>win10-x86</RuntimeIdentifier>
  </PropertyGroup>
    
  <ItemGroup Condition="'$(TargetsAOT)'=='true'">
    <PackageReference Include="Microsoft.TargetingPack.Private.NETNative">
      <Version Condition="'$(TargetGroup)'=='uapaot' OR '$(TargetGroup)'=='netcoreappaot'">1.1.0-$(ProjectNTfsExpectedPrerelease)</Version>
      <!-- Following is version used in release/uwp6.0 -->
      <Version Condition="'$(TargetGroup)'=='uap10.0.16299aot'">1.1.0-rel-25728-00</Version>
    </PackageReference>
    <FileToExclude Include="System.Private.CoreLib.Augments" />
    <FileToExclude Include="System.Private.CoreLib.DynamicDelegate" />
    <FileToExclude Include="System.Private.CoreLib.WinRTInterop" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetsAOT)'!='true'">
    <PackageReference Include="Microsoft.NETCore.Platforms">
      <Version>$(MicrosoftNETCorePlatformsPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.Runtime.CoreCLR">
      <Version>$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)</Version>
      <!-- Following is version used in release/uwp6.0 -->
      <Version Condition="'$(TargetGroup)'=='uap10.0.16299'">2.1.0-b-uwp6-25707-02</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.TestHost">
      <Version>$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="runtime.native.System.Data.SqlClient.sni">
      <Version>$(RuntimeNativeSystemDataSqlClientSniPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.DotNetHost">
      <Version>$(MicrosoftNETCoreDotNetHostPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.NETCore.DotNetHostPolicy">
      <Version>$(MicrosoftNETCoreDotNetHostPolicyPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <!-- For IL rewrite tools of crossgen dll from CoreClr we need the respective IL and respective pdbs -->
    <!-- For crossgen dlls save respective pdbs too -->
    <AdditionalBinPlaceConfiguration Condition="'$(BinPlaceTestSharedFramework)' == 'true'" Include="$(Configuration)">
      <ItemName>CoreCLRILFiles</ItemName>
      <RuntimePath>$(NETCoreAppTestSharedFrameworkPath)il</RuntimePath>
    </AdditionalBinPlaceConfiguration>
    <AdditionalBinPlaceConfiguration Condition="'$(BinPlaceTestSharedFramework)' == 'true'" Include="$(Configuration)">
      <ItemName>CoreCLRCrossGenFiles</ItemName>
      <RuntimePath>$(NETCoreAppTestSharedFrameworkPath)ni</RuntimePath>
    </AdditionalBinPlaceConfiguration>
  </ItemGroup>

  <!-- Setup the testing shared framework host -->
  <Target Name="SetupTestingHost" AfterTargets="AfterResolveReferences" Condition="'$(BinPlaceTestSharedFramework)' == 'true'">

    <PropertyGroup>
      <HostFxrFileName Condition="'$(OSGroup)'=='Windows_NT'">hostfxr</HostFxrFileName>
      <HostFxrFileName Condition="'$(OSGroup)'!='Windows_NT'">libhostfxr</HostFxrFileName>
      <UseHardlink>true</UseHardlink>
      <!-- workaround core-setup problem for hardlinking dotnet executable to testhost: core-setup #4742 -->
      <UseHardlink Condition="'$(_runtimeOSFamily)' == 'FreeBSD'">false</UseHardlink>
    </PropertyGroup>

    <ItemGroup>
      <HostFxFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == '$(HostFxrFileName)'" />
      <DotnetExe Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'dotnet'" />
    </ItemGroup>

    <Copy SourceFiles="@(HostFxFile)"
          DestinationFolder="$(NETCoreAppTestHostFxrPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

    <Copy SourceFiles="@(DotnetExe)"
          DestinationFolder="$(TestHostRootPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Exec Command="chmod +x $(TestHostRootPath)dotnet" Condition="'$(RunningOnUnix)' == 'true'"/>
  </Target>

  <PropertyGroup>
    <SymbolPackagesDir>$(PackagesDir)symbolpackages/</SymbolPackagesDir>
    <DotNetAssetRootUrl Condition="'$(DotNetAssetRootUrl)' == ''">https://dotnetfeed.blob.core.windows.net/dotnet-core/assets/</DotNetAssetRootUrl>
  </PropertyGroup>

  <Target Name="CalculateCoreCLRSymbolPackageProperties"
          BeforeTargets="DownloadAndUnzipSymbolPackage">

    <ItemGroup>
      <_CoreCLRSymbolPackagesToDownload Include="@(ReferenceCopyLocalPaths->'%(NuGetPackageId)')" Condition="$([System.String]::Copy('%(Identity)').EndsWith('System.Private.CoreLib.dll'))">
        <Url>$(DotNetAssetRootUrl)symbols/%(NuGetPackageId).%(NuGetPackageVersion).symbols.nupkg</Url>
        <DestinationFile>%(NuGetPackageId).%(NuGetPackageVersion).symbols.nupkg.zip</DestinationFile>
        <UnzipDestinationDir>$(SymbolPackagesDir)/%(NuGetPackageId).%(NuGetPackageVersion)</UnzipDestinationDir>
      </_CoreCLRSymbolPackagesToDownload>
    </ItemGroup>

    <!-- Calculate the packages to download incrementally if we haven't downloaded them -->
    <ItemGroup>
      <SymbolPackagesToDownload Include="@(_CoreCLRSymbolPackagesToDownload)" Condition="!Exists('%(UnzipDestinationDir)')" />
    </ItemGroup>
  </Target>

  <Target Name="BinPlaceCoreCLRSymbols"
          AfterTargets="AfterResolveReferences"
          DependsOnTargets="CalculateCoreCLRSymbolPackageProperties;DownloadAndUnzipSymbolPackage"
          Condition="'$(CoreCLROverridePath)' == '' AND '$(DownloadCoreCLRSymbols)' != 'false'">

      <Warning Text="Failed to download CoreCLR symbols" Condition="'@(SymbolPackagesDownloaded)' == '' AND '@(SymbolPackagesToDownload)' != ''" />

      <ItemGroup>
        <_CoreCLRSymbolFiles Include="%(_CoreCLRSymbolPackagesToDownload.UnzipDestinationDir)/runtimes/$(RuntimeIdentifier)/native/*.pdb" />
        <_CoreCLRSymbolFiles Include="%(_CoreCLRSymbolPackagesToDownload.UnzipDestinationDir)/runtimes/$(RuntimeIdentifier)/native/*.dbg" />
        <ReferenceCopyLocalPaths Include="@(_CoreCLRSymbolFiles)"/>

        <CoreCLRILFiles Include="%(_CoreCLRSymbolPackagesToDownload.UnzipDestinationDir)/runtimes/$(RuntimeIdentifier)/il/*.*">
          <CrossGenAssemblyPath>%(_CoreCLRSymbolPackagesToDownload.UnzipDestinationDir)/runtimes/$(RuntimeIdentifier)/native/</CrossGenAssemblyPath>
        </CoreCLRILFiles>
        <CoreCLRCrossGenFiles Include="@(CoreCLRILFiles -> '%(CrossGenAssemblyPath)%(Filename)%(Extension)')" />
        <CoreCLRCrossGenFiles Condition="'$(OSGroup)'=='Windows_NT'" Include="@(CoreCLRILFiles -> '%(CrossGenAssemblyPath)%(Filename).ni.pdb')" />
        <CoreCLRILFiles Include="@(CoreCLRILFiles -> '%(CrossGenAssemblyPath)%(Filename).pdb')" />
      </ItemGroup>
  </Target>

  <Target Name="OverrideRuntime"
          Condition="'$(CoreCLROverridePath)' != ''"
          AfterTargets="AfterResolveReferences;FilterNugetPackages">
    <Warning Condition="!Exists('$(CoreCLROverridePath)')" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not exist." />
    <PropertyGroup>
      <CoreCLRPDBOverridePath Condition="'$(CoreCLRPDBOverridePath)' == '' and Exists('$(CoreCLROverridePath)/PDB')">$(CoreCLROverridePath)/PDB</CoreCLRPDBOverridePath>
      <ExcludeNativeImages Condition="'$(ExcludeNativeImages)' == '' and '$(Coverage)' == 'true'">true</ExcludeNativeImages>
    </PropertyGroup>
    <ItemGroup>
      <CoreCLRFiles Include="$(CoreCLROverridePath)/*.*" />
      <CoreCLRILFiles Include="$(CoreCLROverridePath)/IL/*.*" />
      <CoreCLRCrossGenFiles Include="@(CoreCLRILFiles -> '$(CoreCLROverridePath)/%(Filename)%(Extension)')" />
      <CoreCLRILFiles Include="@(CoreCLRILFiles -> '$(CoreCLRPDBOverridePath)/%(Filename).pdb')" />
      <CoreCLRCrossGenFiles Condition="'$(OSGroup)'=='Windows_NT'" Include="@(CoreCLRCrossGenFiles -> '$(CoreCLRPDBOverridePath)/%(Filename).ni.pdb')" />
      <CoreCLRPDBFiles Condition="'$(CoreCLRPDBOverridePath)' != ''" Include="$(CoreCLRPDBOverridePath)/*.pdb" />

      <_ReferenceCopyLocalPathsToRemove Include="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRFiles->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)'" />
      <ReferenceCopyLocalPaths Remove="@(_ReferenceCopyLocalPathsToRemove)" />
      <ReferenceCopyLocalPaths Include="@(CoreCLRFiles);@(CoreCLRPDBFiles)" />
    </ItemGroup>

    <Warning Condition="Exists('$(CoreCLROverridePath)') And '@(CoreCLRFiles)' == ''" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not contain any files." />

    <ItemGroup Condition="'$(ExcludeNativeImages)' == 'true'">
      <ReferenceCopyLocalPathsNativeImages Remove="@(ReferenceCopyLocalPaths)" Condition="$([System.String]::Copy('%(Filename)%(Extension)').Contains('.ni.'))" />
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPathsNativeImages)" />
    </ItemGroup>

  </Target>
</Project>
