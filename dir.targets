<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" InitialTargets="CheckForBuildTools" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <Target Name="CheckForBuildTools">
    <Error Condition="!Exists('$(ToolsDir)') and '$(OverrideToolsDir)'=='true'"
           Text="The tools directory [$(ToolsDir)] does not exist. Please run sync in your enlistment to ensure the tools are installed before attempting to build an individual project." />
    <Error Condition="!Exists('$(ToolsDir)') and '$(OverrideToolsDir)'!='true'"
           Text="The tools directory [$(ToolsDir)] does not exist. Please run init-tools.cmd in your enlistment to ensure the tools are installed before attempting to build an individual project." />
  </Target>

  <!-- Provide default targets which can be hooked onto or overridden as necessary -->
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />
  <Target Name="Test" />

  <!-- Targets will be overridden if buildagainstpackages.targets is imported. -->
  <Target Name="GenerateTestProjectJson" />
  <Target Name="GenerateAllTestProjectJsons" />

  <Target Name="UndefineTestTFM" BeforeTargets="AssignProjectConfiguration">
    <ItemGroup>
      <ProjectReference>
        <!-- 
        Always undefine TestTFM and FilterToTestTFM for all project reference as not needed for compilation and
        avoid bin clash tool to fail
        -->
        <UndefineProperties>%(ProjectReference.UndefineProperties);TestTFM;FilterToTestTFM</UndefineProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <Import Project="$(ToolsDir)/Build.Common.targets" Condition="Exists('$(ToolsDir)/Build.Common.targets')" />

  <!-- permit a wrapping build system to contribute targets to this build -->
  <Import Condition="Exists('$(MSBuildThisFileDirectory)..\open.targets')" Project="$(MSBuildThisFileDirectory)..\open.targets" />

  <PropertyGroup>
    <!-- We don't use any of MSBuild's resolution logic for resolving the framework, so just set these two properties to any folder that exists to skip
         the GenerateReferenceAssemblyPaths task (not target) and to prevent it from outputting a warning (MSB3644). -->
    <_TargetFrameworkDirectories>$(MSBuildThisFileDirectory)/Documentation</_TargetFrameworkDirectories>
    <_FullFrameworkReferenceAssemblyPaths>$(MSBuildThisFileDirectory)/Documentation</_FullFrameworkReferenceAssemblyPaths>
    <!-- We do not want to target a portable profile.
         TODO: Make this the default in buildtools so this is not necessary. -->
    <TargetFrameworkProfile></TargetFrameworkProfile>
    <!-- We set this property to avoid MSBuild errors regarding not setting TargetFrameworkProfile (see above line) -->
    <PortableNuGetMode>true</PortableNuGetMode>
    <!-- tests should not set this.  A value of netstandard* triggers validation which is irrelevant for tests.  Remove once ValidatePackageTargetFramework target is removed -->
    <PackageTargetFramework Condition="'$(IsTestProject)' == 'true'"></PackageTargetFramework>
  </PropertyGroup>

  <!--
    add the test-runtime project.json to the list of supplemental test data so it will get included
    in the test archive; the stress test build system depends on it when building test mixes.
  -->
  <ItemGroup Condition="'$(IsTestProject)'=='true'">
    <SupplementalTestData Include="$(SourceDir)Common/test-runtime/project.json">
      <DestinationDir>test-runtime/</DestinationDir>
    </SupplementalTestData>
  </ItemGroup>

  <ItemGroup Condition="'$(NuGetTargetMoniker)'=='.NETStandard,Version=v1.7'">
    <!-- Temporarily suppress the message until we get a nuget version that knows about the mapping between netstandard1.7 and uap10.1 -->
    <SuppressPackageTargetFrameworkCompatibility Include="uap10.1" />
  </ItemGroup>

  <Target Name="ProducesPackageId" 
          Returns="@(PackageIds)">
    <ItemGroup>
      <PackageIds Include="$(Id)" />
    </ItemGroup>
  </Target>

  <Target Name="RewriteReferences" Condition="'$(SourceIndex)' == 'true'" AfterTargets="ResolveNuGetPackages">
    <ItemGroup>
      <Reference Remove="@(_ReferenceFromPackage)"/>
      <_ReferenceProjectToHarvest Include="@(_ReferenceFromPackage -> '$(MSBuildThisFileDirectory)src/%(Filename)/src/%(FileName).csproj')"/>
      <_ReferenceProjectToHarvest Include="@(_ReferenceFromPackage -> '$(MSBuildThisFileDirectory)src/%(Filename)/src/%(FileName).vbproj')"/>
    </ItemGroup>

    <MSBuild Condition="'$(SourceIndex)' == 'true' AND Exists('%(Identity)')"
             Projects="%(_ReferenceProjectToHarvest.Identity)"
             Targets="GetTargetPath">
      <Output TaskParameter="TargetOutputs" ItemName="_PackageLibReferencePath"/>
    </MSBuild>
    <Error Condition="!Exists('%(_PackageLibReferencePath.Identity)')" Text="Required Reference '%(Identity)' does not exist. Ensure that you have built the entire tree."/>
    <ItemGroup Condition=" '$(SourceIndex)' == 'true' ">
      <ReferencePath Include="%(_PackageLibReferencePath.Identity)" Condition="Exists('%(Identity)')"/>
      <ReferencePath Include="$(PackagesDir)runtime.win7-x64.Microsoft.NETCore.Runtime.CoreCLR\1.2.0-$(CoreClrExpectedPrerelease)\runtimes\win7-x64\lib\netstandard1.0\mscorlib.dll"/>
      <ReferencePath Include="$(PackagesDir)runtime.win7-x64.Microsoft.NETCore.Runtime.CoreCLR\1.2.0-$(CoreClrExpectedPrerelease)\runtimes\win7-x64\lib\netstandard1.0\System.Private.CoreLib.dll"/>
    </ItemGroup>
  </Target>

</Project>
