<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" InitialTargets="CheckForBuildTools" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <Target Name="CheckForBuildTools">
    <Error Condition="!Exists('$(ToolsDir)') and '$(OverrideToolsDir)'=='true'"
           Text="The tools directory [$(ToolsDir)] does not exist. Please run sync in your enlistment to ensure the tools are installed before attempting to build an individual project." />
    <Error Condition="!Exists('$(ToolsDir)') and '$(OverrideToolsDir)'!='true'"
           Text="The tools directory [$(ToolsDir)] does not exist. Please run init-tools.cmd in your enlistment to ensure the tools are installed before attempting to build an individual project." />
  </Target>

  <!-- Provide default targets which can be hooked onto or overridden as necessary -->
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />
  <Target Name="Test" />
  
  <!-- Targets will be overridden if buildagainstpackages.targets is imported. -->
  <Target Name="GenerateTestProjectJson" />
  <Target Name="GenerateAllTestProjectJsons" />

  <Target Name="UndefineTestTFM" BeforeTargets="AssignProjectConfiguration">
    <ItemGroup>
      <ProjectReference>
        <!-- 
        Always undefine TestTFM and FilterToTestTFM for all project reference as not needed for compilation and
        avoid bin clash tool to fail
        -->
        <UndefineProperties>%(ProjectReference.UndefineProperties);TestTFM;FilterToTestTFM</UndefineProperties>
      </ProjectReference>
    </ItemGroup>
  </Target>
  
  <PropertyGroup>
    <CommonTestProjectJson>$(MSBuildThisFileDirectory)src/Common/test-runtime/project.json</CommonTestProjectJson>
    <CommonTestProjectLockJson>$(MSBuildThisFileDirectory)src/Common/test-runtime/project.lock.json</CommonTestProjectLockJson>
    <CommonOutputTestProjectJson>$(GeneratedProjectJsonDir)/project.json</CommonOutputTestProjectJson>
    <CommonOutputTestProjectLockJson>$(GeneratedProjectJsonDir)/project.lock.json</CommonOutputTestProjectLockJson>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <CommonTestProjectJson Condition="'$(BuildTestsAgainstPackages)'=='true'">$(CommonOutputTestProjectJson)</CommonTestProjectJson>
    <CommonTestProjectLockJson Condition="'$(BuildTestsAgainstPackages)'=='true'">$(CommonOutputTestProjectLockJson)</CommonTestProjectLockJson>
    <ProjectJson Condition="'$(ProjectJson)'=='' and Exists('$(MSBuildProjectDirectory)/project.json')">$(MSBuildProjectDirectory)/project.json</ProjectJson>
    <!-- If project specific project.json exists then don't skip generating test project.json files -->
    <SkipGenerateTestProjectJson Condition="'$(ProjectJson)'==''" >true</SkipGenerateTestProjectJson>
    <ProjectJson Condition="'$(ProjectJson)'==''">$(CommonTestProjectJson)</ProjectJson>
    <ProjectLockJson Condition="'$(ProjectJson)'=='$(CommonTestProjectJson)'">$(CommonTestProjectLockJson)</ProjectLockJson>
  </PropertyGroup>

  <Import Project="$(ToolsDir)/Build.Common.targets" Condition="Exists('$(ToolsDir)/Build.Common.targets')" />

  <!-- permit a wrapping build system to contribute targets to this build -->
  <Import Condition="Exists('$(MSBuildThisFileDirectory)..\open.targets')" Project="$(MSBuildThisFileDirectory)..\open.targets" />

  <PropertyGroup>
    <!-- We don't use any of MSBuild's resolution logic for resolving the framework, so just set these two properties to any folder that exists to skip
         the GenerateReferenceAssemblyPaths task (not target) and to prevent it from outputting a warning (MSB3644). -->
    <_TargetFrameworkDirectories>$(MSBuildThisFileDirectory)/Documentation</_TargetFrameworkDirectories>
    <_FullFrameworkReferenceAssemblyPaths>$(MSBuildThisFileDirectory)/Documentation</_FullFrameworkReferenceAssemblyPaths>
    <!-- We do not want to target a portable profile.
         TODO: Make this the default in buildtools so this is not necessary. -->
    <TargetFrameworkProfile></TargetFrameworkProfile>
    <!-- We set this property to avoid MSBuild errors regarding not setting TargetFrameworkProfile (see above line) -->
    <PortableNuGetMode>true</PortableNuGetMode>
    <!-- tests should not set this.  A value of netstandard* triggers validation which is irrelevant for tests.  Remove once ValidatePackageTargetFramework target is removed -->
    <PackageTargetFramework Condition="'$(IsTestProject)' == 'true'"></PackageTargetFramework>
  </PropertyGroup>

  <!--
    add the test-runtime project.json to the list of supplemental test data so it will get included
    in the test archive; the stress test build system depends on it when building test mixes.
  -->
  <ItemGroup Condition="'$(IsTestProject)'=='true'">
    <SupplementalTestData Include="$(SourceDir)Common/test-runtime/project.json">
      <DestinationDir>test-runtime/</DestinationDir>
    </SupplementalTestData>
  </ItemGroup>

  <ItemGroup Condition="'$(NuGetTargetMoniker)'=='.NETStandard,Version=v1.7'">
    <!-- Temporarily suppress the message until we get a nuget version that knows about the mapping between netstandard1.7 and uap10.1 -->
    <SuppressPackageTargetFrameworkCompatibility Include="uap10.1" />
  </ItemGroup>

  <PropertyGroup Condition="'$(OSGroup)'=='Windows_NT' and '$(EnableDotnetAnalyzers)' == 'true'">
    <!-- Override pinvoke files from codeAnalysis.targets, to use Win32 API instead of API set -->
    <ValidPinvokeMappings>$(MSBuildThisFileDirectory)PinvokeAnalyzer_OneCoreApis.txt</ValidPinvokeMappings>
    <ValidPinvokeMappings Condition="'$(TargetGroup)'=='netcore50' or '$(TargetGroup)'=='netcore50aot' or '$(SupportsUWP)'=='true'">$(MSBuildThisFileDirectory)PinvokeAnalyzer_UWPApis.txt</ValidPinvokeMappings>
  </PropertyGroup>

  <Target Name="ProducesPackageId" 
          Returns="@(PackageIds)">
    <ItemGroup>
      <PackageIds Include="$(Id)" />
    </ItemGroup>
  </Target>

  <!-- Support for CoreRT Targeting Packs
       CoreRT Targeting requires differentiating the targetting pack according to the platforms.
       i.e.: the targetting pack for linux is different than that of windows. In order to support this
       requirement (with a reasonable cost) we need a mapping between an identity package to multiple 
       contract packages, and have NuGet restore figure out the right targetting pack according to the specified 
       target platform. NuGet doesn't support that notion. But it supports something that's close by;
       mapping a contract package to multiple runtime packages. CoreRT targeting pack packages are created 
       as if they are of this latter type.

       The main difference between a runtime package and a contract package (as their names indicates) is that 
       the assets in contract packages are used at compiling, wheres the runtime package assets are copied into 
       project output directory to be consumed at runtime. However what we need for CoreRT targeting pack packages
       is that the assets in so-named runtime packages to be used at compile time, as if they were contract packages. 

       In order to support this,
       - we need to pick the runtime assets from so-named runtime packages
          - this can be done by setting a TargetRuntimeIdentifier when invoking PreresolveNugetPackageAssets
       - convert them to compile time assets. See FixupReferencesForCoreRTTargetingPack target.
  -->
  <Choose>
    <When Condition="'$(OSGroup)' == 'Windows_NT'">
      <PropertyGroup>
        <_NuGetRuntimeIdentifier>win-corert</_NuGetRuntimeIdentifier>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='Unix'">
      <PropertyGroup>
        <_NuGetRuntimeIdentifier>linux-corert</_NuGetRuntimeIdentifier>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='Linux'">
      <PropertyGroup>
        <_NuGetRuntimeIdentifier>linux-corert</_NuGetRuntimeIdentifier>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='OSX'">
      <PropertyGroup>
        <_NuGetRuntimeIdentifier>osx-corert</_NuGetRuntimeIdentifier>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='FreeBSD'">
      <PropertyGroup>
        <_NuGetRuntimeIdentifier>linux-corert</_NuGetRuntimeIdentifier>
      </PropertyGroup>
    </When>
    <When Condition="'$(OSGroup)'=='NetBSD'">
      <PropertyGroup>
        <_NuGetRuntimeIdentifier>linux-corert</_NuGetRuntimeIdentifier>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <ConfigurationErrorMsg Condition="'$(TargetGroup)' == 'netcoreapp1.2corert'">$(ConfigurationErrorMsg);$(TargetGroup) TargetGroup requires OSGroup to be specified to one of 'Windows_NT, Unix, Linux, OSX, FreeBSD, NetBSD' but it is set to '$(OSGroup)'</ConfigurationErrorMsg>
      </PropertyGroup>
    </Otherwise>    
  </Choose>
  
  <PropertyGroup>
    <NuGetRuntimeIdentifier Condition="'$(TargetGroup)' == 'netcoreapp1.2corert'">$(_NuGetRuntimeIdentifier)</NuGetRuntimeIdentifier>
  </PropertyGroup>
       
  <Target Name="FixupReferencesForCoreRTTargetingPack"
    AfterTargets="ResolveNuGetPackages"
    Condition="'$(NuGetTargetMoniker)' == '.NETCoreApp,Version=v1.2' AND '$(NuGetRuntimeIdentifier)'=='win-corert'">
    <ItemGroup>
      <ReferenceCopyLocalPathsForCoreRTTargetingPack Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' == 'runtime.win-corert.netcoreapp1.2.Microsoft.TargetingPack.Private.CoreRT'" />
      <Reference Include="@(ReferenceCopyLocalPathsForCoreRTTargetingPack)"/>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPathsForCoreRTTargetingPack)" />
    </ItemGroup>
    <Message Text="Moved the following items from ReferenceCopyLocalPaths to Reference:" Importance="Low"/>
    <Message Text="%(ReferenceCopyLocalPathsForCoreRTTargetingPack.Identity)" Importance="Low"/>
  </Target>
</Project>
