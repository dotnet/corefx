<Project DefaultTargets="Build">

  <Import Project="Directory.Build.props" />

  <PropertyGroup>
    <BuildNative Condition="'$(BuildNative)' == ''">true</BuildNative>
    <BuildManaged Condition="'$(BuildManaged)' == ''">true</BuildManaged>
    <BuildPackages Condition="'$(BuildPackages)' == ''">true</BuildPackages>

    <BuildDependsOn Condition="'$(BuildNative)' == 'true'">$(BuildDependsOn);BuildNative</BuildDependsOn>
    <BuildDependsOn Condition="'$(BuildManaged)' == 'true'">$(BuildDependsOn);BuildManaged</BuildDependsOn>
    <BuildDependsOn Condition="'$(BuildPackages)' == 'true'">$(BuildDependsOn);Pack</BuildDependsOn>

    <!-- Explicitly set Configuration based on BuildConfiguration for the root projects -->
    <ProjectProperties>Configuration=$(BuildConfiguration)</ProjectProperties>
  </PropertyGroup>

  <Import Project="Directory.Build.targets" />

  <Target Name="Restore" DependsOnTargets="GenerateConfigurationProps">
    <ItemGroup>
      <_RestoreProjects Include="external\dir.proj" />
    </ItemGroup>

    <MSBuild Projects="@(_RestoreProjects)" Properties="$(ProjectProperties);DefaultBuildAllTarget=Restore" />
    <MSBuild Projects="@(_RestoreProjects)" Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="_IsProjectRestoreSupported"
          Returns="@(_ValidProjectsForRestore)">

    <ItemGroup>
      <_ValidProjectsForRestore Include="$(MSBuildProjectFullPath)" />
    </ItemGroup>
  </Target>

  <Target Name="BuildNative">
    <ItemGroup>
      <_BuildNativeProjects Include="src\Native\build-native.proj" />
    </ItemGroup>

    <MSBuild Projects="@(_BuildNativeProjects)" Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="BuildManaged">
    <ItemGroup>
      <_BuildMangedProjects Include="src\dirs.proj" />
    </ItemGroup>

    <MSBuild Projects="@(_BuildMangedProjects)" Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="BuildTests">
    <ItemGroup>
      <_TestProjects Include="src\tests.builds" />
    </ItemGroup>

    <MSBuild Projects="@(_TestProjects)"
             Targets="BuildAllProjects"
             Properties="$(ProjectProperties);BuildTests=true" />
  </Target>

  <Target Name="Test">
    <ItemGroup>
      <_TestProjects Include="src\tests.builds" />
    </ItemGroup>

    <MSBuild Projects="@(_TestProjects)"
             Targets="TestAllProjects"
             Properties="$(ProjectProperties);Test=true" />
  </Target>

  <Target Name="IntegrationTest">
    <ItemGroup>
      <_TestProjects Include="src\tests.builds" />
    </ItemGroup>

    <MSBuild Projects="@(_TestProjects)"
             Targets="TestAllProjects"
             Properties="$(ProjectProperties);IntegrationTest=true" />
  </Target>

  <Target Name="PerformanceTest">
    <ItemGroup>
      <_TestProjects Include="src\tests.builds" />
    </ItemGroup>

    <MSBuild Projects="@(_TestProjects)"
             Targets="TestAllProjects"
             Properties="$(ProjectProperties);PerformanceTest=true" />
  </Target>

  <Target Name="Pack">
    <ItemGroup>
      <_PackProjects Include="src\packages.builds" />
    </ItemGroup>

    <MSBuild Projects="@(_PackProjects)" Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

  <Target Name="Clean">
    <RemoveDir Directories="$(ArtifactsObjDir)" />
    <RemoveDir Directories="$(ArtifactsBinDir)" />
    <RemoveDir Directories="$(ArtifactsPackagesDir)" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <!-- Hook that can be used to insert custom build tasks to the build process such as setup and/or cleanup tasks -->
  <Import Project="build.override.targets" Condition="Exists('build.override.targets')" />

  <!-- set up inputs for UpdateVSConfigurations in a target to avoid globbing all the time -->
  <Target Name="_setProjectsToUpdate" BeforeTargets="UpdateVSConfigurations">
    <ItemGroup>
      <ProjectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*csproj" />
      <ProjectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*ilproj" />
      <ProjectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*vbproj" />
      <_solutionsToUpdateFiles Include="$(MSBuildThisFileDirectory)src/*/Directory.Build.props" />
      <SolutionsToUpdate Include="@(_solutionsToUpdateFiles->'%(RootDir)%(Directory)')" Exclude="@(_solutionsToExcludeFromUpdate)" />
    </ItemGroup>
  </Target>

  <!-- Define an empty Execute target for Arcade's publish to BAR finds it: https://github.com/dotnet/arcade/issues/1452 -->
  <Target Name="Execute" />
</Project>
