<Project DefaultTargets="Build">

  <Import Project="Directory.Build.props" />

  <PropertyGroup>
    <BuildNative Condition="'$(BuildNative)' == '' and '$(DirectoryToBuild)' == ''">true</BuildNative>
    <BuildManaged Condition="'$(BuildManaged)' == ''">true</BuildManaged>
    <BuildPackages Condition="'$(BuildPackages)' == '' and '$(DirectoryToBuild)' == ''">true</BuildPackages>

    <BuildDependsOn Condition="'$(BuildNative)' == 'true'">$(BuildDependsOn);BuildNative</BuildDependsOn>
    <BuildDependsOn Condition="'$(BuildManaged)' == 'true'">$(BuildDependsOn);BuildManaged</BuildDependsOn>
    <BuildDependsOn Condition="'$(BuildPackages)' == 'true'">$(BuildDependsOn);Pack</BuildDependsOn>

    <!-- Explicitly set Configuration based on BuildConfiguration for the root projects -->
    <ProjectProperties>Configuration=$(BuildConfiguration)</ProjectProperties>
  </PropertyGroup>

  <Import Project="Directory.Build.targets" />

  <Target Name="Restore" DependsOnTargets="GenerateConfigurationProps">
    <ItemGroup Condition="'$(DirectoryToBuild)' == ''">
      <_RestoreProjects Include="$(RepositoryEngineeringDir)restore\dirs.proj" Build="true" />
    </ItemGroup>
    
    <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
      <_RestoreProjects Include="$(SourceDir)tests.proj" Build="false" />
    </ItemGroup>

    <MSBuild Projects="@(_RestoreProjects)" Targets="Restore" Properties="$(ProjectProperties)" />
    <MSBuild Projects="@(_RestoreProjects)" Condition="'%(Build)' != 'false'" Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="BuildNative">
    <ItemGroup>
      <_BuildNativeProjects Include="src\Native\build-native.proj" />
    </ItemGroup>

    <MSBuild Projects="@(_BuildNativeProjects)" Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="BuildManaged">
    <ItemGroup Condition="'$(DirectoryToBuild)' == ''">
      <_BuildMangedProjects Include="$(SourceDir)ref.builds" />
      <_BuildMangedProjects Include="$(SourceDir)shims\generated\*.csproj" />
      <_BuildMangedProjects Include="$(SourceDir)Native\native-binplace.proj" />
      <_BuildMangedProjects Include="$(SourceDir)src.builds" />
      <_BuildMangedProjects Include="$(SourceDir)shims\manual\*.csproj" />
      <_BuildMangedProjects Condition="'$(DotNetBuildFromSource)' != 'true'" Include="$(SourceDir)shims\ApiCompat.proj" />
      <_BuildMangedProjects Condition="'$(DotNetBuildFromSource)' != 'true' and '$(BuildAllConfigurations)' != 'true'" Include="$(SourceDir)pretest.proj" />
    </ItemGroup>

    <ItemGroup Condition="'$(DirectoryToBuild)' != ''">
      <_BuildMangedProjects Include="$(SourceDir)ref.builds" />
      <_BuildMangedProjects Include="$(SourceDir)src.builds" />
    </ItemGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(MSBuildProjectDefaultTargets)"
             Condition="'%(Identity)' != ''"
             Projects="@(_BuildMangedProjects)"
             Properties="BuildAllProjects=true;BuildConfiguration=$(BuildConfiguration);%(Project.AdditionalProperties)"
             ContinueOnError="ErrorAndStop" />
  </Target>

  <Target Name="BuildTests">
    <ItemGroup>
      <_TestProjects Include="src\tests.proj" />
    </ItemGroup>

    <MSBuild Projects="@(_TestProjects)"
             Targets="Build"
             Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="Test">
    <ItemGroup>
      <_TestProjects Include="src\tests.proj" />
    </ItemGroup>

    <MSBuild Projects="@(_TestProjects)"
             Targets="Test"
             Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="Pack">
    <ItemGroup>
      <_PackProjects Include="src\packages.builds" />
    </ItemGroup>

    <MSBuild Projects="@(_PackProjects)" Properties="$(ProjectProperties)" />
  </Target>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <!-- set up inputs for UpdateVSConfigurations in a target to avoid globbing all the time -->
  <Target Name="_setProjectsToUpdate" BeforeTargets="UpdateVSConfigurations">
    <ItemGroup>
      <ProjectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*csproj" 
                        Exclude="$(MSBuildThisFileDirectory)src/shims/**/*.*csproj"/>
      <ProjectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*ilproj" />
      <ProjectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*vbproj" />
      <_solutionsToUpdateFiles Include="$(MSBuildThisFileDirectory)src/*/Directory.Build.props" />
      <SolutionsToUpdate Include="@(_solutionsToUpdateFiles->'%(RootDir)%(Directory)')" Exclude="@(_solutionsToExcludeFromUpdate)" />
    </ItemGroup>
  </Target>

  <Import Project="$(RepositoryEngineeringDir)restore\uap-tools.targets" />
</Project>
