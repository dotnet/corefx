<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="Directory.Build.props" />

  <!-- required to build the projects in their specified order -->
  <PropertyGroup>
    <SerializeProjects>true</SerializeProjects>
  </PropertyGroup>

  <PropertyGroup>
    <BuildPackages Condition="'$(BuildPackages)'==''">true</BuildPackages>
  </PropertyGroup>

  <Import Project="$(ToolsDir)VersionTools.targets" Condition="Exists('$(ToolsDir)VersionTools.targets')" />

  <ItemGroup>
    <Project Include="external\dir.proj" />
    <Project Include="src\dirs.proj" />
    <Project Include="src\tests.builds" Condition="'$(BuildTests)'=='true'" />
    <!-- signing must happen before packaging -->
    <Project Include="src\sign.proj" />
    <Project Include="src\packages.builds" Condition="'$(BuildPackages)'=='true'" />
  </ItemGroup>

  <Import Project="Directory.Build.targets" />

  <Import Project="dir.traversal.targets" />

  <Import Project="$(ToolsDir)clean.targets" />

  <PropertyGroup>
    <PrebuildSetupTargets>
      GenerateConfigurationProperties;
      CreateOrUpdateCurrentVersionFile
    </PrebuildSetupTargets>
  </PropertyGroup>

  <PropertyGroup>
    <TraversalBuildDependsOn>
      $(PrebuildSetupTargets);
      $(TraversalBuildDependsOn);
    </TraversalBuildDependsOn>
  </PropertyGroup>

  <!-- Generate the configurations for this repo -->
  <UsingTask TaskName="GenerateConfigurationProps" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <Target Name="GenerateConfigurationProperties">
    <GenerateConfigurationProps Properties="@(Property)" PropertyValues="@(PropertyValue)" PropsFolder="$(BuildConfigurationFolder)" />
  </Target>

  <Target Name="Sync" DependsOnTargets="$(PrebuildSetupTargets)">
    <ItemGroup>
      <ExternalProject Include="external\dir.proj" />
    </ItemGroup>

    <MSBuild Projects="@(ExternalProject)"
             ContinueOnError="ErrorAndContinue" />
  </Target>

  <UsingTask TaskName="UpdateVSConfigurations" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <Target Name="UpdateVSConfigurations">
    <Message Importance="High" Text="Updating configurations for projects ..." />
    <ItemGroup>
      <_projectsToExcludeFromUpdate Include="$(MSBuildThisFileDirectory)src/SharedFrameworkValidation/**/*.csproj" />
      <_projectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*csproj" Exclude="@(_projectsToExcludeFromUpdate)" />
      <_projectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*ilproj" Exclude="@(_projectsToExcludeFromUpdate)" />
      <_projectsToUpdate Include="$(MSBuildThisFileDirectory)src/**/*.*vbproj" Exclude="@(_projectsToExcludeFromUpdate)" />
      <_solutionsToUpdateFiles Include="$(MSBuildThisFileDirectory)src/*/Directory.Build.props" />
      <_solutionsToUpdate Include="@(_solutionsToUpdateFiles->'%(RootDir)%(Directory)')" Exclude="@(_solutionsToExcludeFromUpdate)" />
    </ItemGroup>
    <UpdateVSConfigurations ProjectsToUpdate="@(_projectsToUpdate)" SolutionsToUpdate="@(_solutionsToUpdate)" />
    <Message Importance="High" Text="Updating configurations for projects ... Done." />
  </Target>

  <!-- Override CleanAllProjects from dir.traversal.targets and just remove the full BinDir -->
  <Target Name="CleanAllProjects">
    <RemoveDir Directories="$(BinDir)" />
    <!-- Temporarily outside BinDir -->
    <RemoveDir Directories="$(PackageInstallPath)" />
  </Target>

  <!-- Hook that can be used to insert custom build tasks to the build process such as setup and/or cleanup tasks -->
  <Import Project="build.override.targets" Condition="Exists('build.override.targets')" />

</Project>
