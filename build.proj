<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="dir.props" />

  <!-- required to build the projects in their specified order -->
  <PropertyGroup>
    <SerializeProjects>true</SerializeProjects>
  </PropertyGroup>

  <PropertyGroup>
    <GenerateCodeCoverageReportForAll>true</GenerateCodeCoverageReportForAll>
  </PropertyGroup>

  <PropertyGroup>
    <BuildPackages Condition="'$(BuildPackages)'==''">true</BuildPackages>
  </PropertyGroup>

  <Import Project="$(ToolsDir)CodeCoverage.targets" Condition="Exists('$(ToolsDir)CodeCoverage.targets')" />
  <Import Project="$(ToolsDir)PerfTesting.targets" Condition="Exists('$(ToolsDir)PerfTesting.targets') and '$(Performance)' == 'true'"/>
  <Import Project="$(ToolsDir)VersionTools.targets" Condition="Exists('$(ToolsDir)VersionTools.targets')" />

  <ItemGroup>
    <Project Include="external\dir.proj" />
    <Project Include="src\ref.builds" />
    <Project Include="src\src.builds" />
    <!--
    <Project Include="src\tests.builds" Condition="$(BuildTests)=='true'">
      <InputOSGroup>$(InputOSGroup)</InputOSGroup>
    </Project>
    <!- signing must happen before packaging -!>
    <Project Include="src\sign.builds" />
    -->
    <Project Include="src\packages.builds" Condition="'$(BuildPackages)'=='true'">
      <InputOSGroup>$(InputOSGroup)</InputOSGroup>
    </Project>
    <!--
    <Project Include="src\post.builds">
      <!- For the root traversal default filter the OSGroup to the OSEnvironment which is the OS we are running on -!>
      <FilterToOSGroup Condition="'$(_OriginalOSGroup)' == ''">$(OSEnvironment)</FilterToOSGroup>
    </Project>
    -->
  </ItemGroup>

  <Import Project="dir.targets" />

  <Import Project="dir.traversal.targets" />

  <Import Project="$(ToolsDir)clean.targets" />

  <PropertyGroup>
    <TraversalBuildDependsOn>
      BuildCoreFxTools;
      CreateOrUpdateCurrentVersionFile;
      $(TraversalBuildDependsOn);
    </TraversalBuildDependsOn>
  </PropertyGroup>

  <Target Name="BuildCoreFxTools">
    <ItemGroup>
      <BuildToolsProject Include="src\Tools\CoreFx.Tools\CoreFx.Tools.csproj" />
      <BuildToolsProject Include="src\Tools\CoreFx.Tools\CoreFx.Tools.csproj">
        <TargetGroup>net45</TargetGroup>
      </BuildToolsProject>
      <BuildToolsProject Include="src\Tools\GenerateProps\GenerateProps.proj" />
    </ItemGroup>
    <MSBuild Projects="@(BuildToolsProject)"
             ContinueOnError="ErrorAndContinue"
             Condition="'%(Identity)' != ''"
             Properties="TargetGroup=%(BuildToolsProject.TargetGroup)" />
  </Target>

  <!-- TODO: Can we move this archive test build to BuildTools -->
  <UsingTask TaskName="ZipFileCreateFromDependencyLists" Condition="'$(ArchiveTests)' == 'true'" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <Target Name="ArchiveTestBuild" Condition="'$(ArchiveTests)' == 'true'" AfterTargets="Build" >
    <ItemGroup>
      <ExcludeFromArchive Include="nupkg$" />
      <ExcludeFromArchive Include="Microsoft.DotNet.BuildTools" />
      <ExcludeFromArchive Include="TestData" />
      <TestDependencyListFile Include="$(BinDir)/TestDependencies/*.dependencylist.txt" />
    </ItemGroup>

    <PropertyGroup>
      <TestArchiveDir>$(TestWorkingDir)$(OSPlatformConfig)/archive/tests/</TestArchiveDir>
      <TestArchiveDir Condition="'$(TestTFM)' != ''">$(TestArchiveDir)$(TestTFM)/</TestArchiveDir>
    </PropertyGroup>

    <ZipFileCreateFromDependencyLists
      DependencyListFiles="@(TestDependencyListFile)"
      DestinationArchive="$(TestArchiveDir)\Packages.zip"
      RelativePathBaseDirectory="$(PackagesDir)"
      OverwriteDestination="true" />
  </Target>

  <!-- Override CleanAllProjects from dir.traversal.targets and just remove the full BinDir -->
  <Target Name="CleanAllProjects">
    <RemoveDir Directories="$(BinDir)" />
  </Target>

  <!-- Hook that can be used to insert custom build tasks to the build process such as setup and/or cleanup tasks -->
  <Import Project="build.override.targets" Condition="Exists('build.override.targets')" />

</Project>
