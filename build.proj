<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="BuildAndTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="dir.props" />

  <!-- required to build the projects in their specified order -->
  <PropertyGroup>
    <SerializeProjects>true</SerializeProjects>
  </PropertyGroup>

  <ItemGroup>
    <Project Include="src\dirs.proj" />
    <Project Include="src\packages.builds" />
    <Project Include="src\post.msbuild" />
  </ItemGroup>

  <Import Project="dir.targets" />

  <Import Project="dir.traversal.targets" />

  <PropertyGroup>
    <TraversalBuildDependsOn>
      ValidateAllProjectDependencies;
      BatchRestorePackages;
      $(TraversalBuildDependsOn);
    </TraversalBuildDependsOn>
  </PropertyGroup>

  <Target Name="BatchRestorePackages">
    <Message Importance="High" Text="Restoring all packages..." />
    <!-- restore all project.jsons in one pass for perf & to avoid concurrency problems with dnu -->
    <!-- include ToolsDir to restore test-runtime\project.json as well -->
    <Exec Command="$(DnuRestoreCommand) &quot;%(DnuRestoreDir.Identity)&quot;" StandardOutputImportance="Low" CustomErrorRegularExpression="(^Unable to locate .*)|(^Updating the invalid lock file with .*)" ContinueOnError="WarnAndContinue" />

    <ItemGroup>
      <_allPackagesConfigs Include="$(MSBuildProjectDirectory)\src\**\packages.config"/>
    </ItemGroup>
    <Exec Condition="'@(_allPackagesConfigs)' != ''" Command="$(NugetRestoreCommand) &quot;%(_allPackagesConfigs.FullPath)&quot;" StandardOutputImportance="Low" />
  </Target>

  <!-- Task from buildtools that validates dependencies contained in project.json files. -->
  <UsingTask TaskName="ValidateProjectDependencyVersions" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />

  <Target Name="ValidateAllProjectDependencies"
          Condition="'$(ValidatePackageVersions)'=='true' and '@(ProjectJsonFiles)'!=''">
    <ValidateProjectDependencyVersions ProjectJsons="@(ProjectJsonFiles)"
                                       ProhibitFloatingDependencies="$(ProhibitFloatingDependencies)"
                                       ValidationPatterns="@(ValidationPattern)" />
  </Target>

  <Target Name="UpdateInvalidPackageVersions">
    <ValidateProjectDependencyVersions ProjectJsons="@(ProjectJsonFiles)"
                                       ProhibitFloatingDependencies="$(ProhibitFloatingDependencies)"
                                       ValidationPatterns="@(ValidationPattern)"
                                       UpdateInvalidDependencies="true" />
  </Target>

  <!-- Tasks from buildtools for easy project.json dependency updates -->
  <UsingTask TaskName="UpdatePackageDependencyVersion" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />

  <Target Name="UpdatePackageDependencyVersion">
    <UpdatePackageDependencyVersion ProjectJsons="@(ProjectJsonFiles)"
                                    PackageId="$(PackageId)"
                                    OldVersion="$(OldVersion)"
                                    NewVersion="$(NewVersion)" />
  </Target>

  <!-- Override RestorePackages from dir.traversal.targets and do a batch restore -->
  <Target Name="RestorePackages" DependsOnTargets="BatchRestorePackages" />

  <!-- Override clean from dir.traversal.targets and just remove the full BinDir -->
  <Target Name="Clean">
    <RemoveDir Directories="$(BinDir)" />
  </Target>

</Project>