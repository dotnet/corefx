<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="BuildAndTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Capture OSGroup passed to command line for setting default FilterToOSGroup value below -->
    <_OriginalOSGroup>$(OSGroup)</_OriginalOSGroup>
  </PropertyGroup>
  <PropertyGroup>
    <InputOSGroup>$(OSGroup)</InputOSGroup>
    <InputOSGroup Condition="'$(InputOSGroup)'==''">$(FilterToOSGroup)</InputOSGroup>
  </PropertyGroup>
  <Import Project="dir.props" />

  <!-- required to build the projects in their specified order -->
  <PropertyGroup>
    <SerializeProjects>true</SerializeProjects>
  </PropertyGroup>

  <!-- The following properties are in place to keep the behavior of build.cmd while we work on the dev workflow steps. -->
  <PropertyGroup>
    <!-- To disable the restoration of packages, set RestoreDuringBuild=false or pass /p:RestoreDuringBuild=false.-->
    <RestoreDuringBuild Condition="'$(RestoreDuringBuild)'==''">true</RestoreDuringBuild>
    <!-- To disable building packages, set BuildPackages=false or pass /p:BuildPackages=false.-->
    <BuildPackages Condition="'$(BuildPackages)'==''">true</BuildPackages>
    <!-- To disable building tests, set BuildTests=false or pass /p:BuildTests=false.-->
    <BuildTests Condition="'$(BuildTests)'==''">true</BuildTests>
  </PropertyGroup>

  <ItemGroup>
    <Project Include="src\dirs.proj">
      <!-- For the root traversal default filter the OSGroup to the OSEnvironment which is the OS we are running on -->
      <FilterToOSGroup Condition="'$(_OriginalOSGroup)' == ''">$(OSEnvironment)</FilterToOSGroup>
      <InputOSGroup>$(InputOSGroup)</InputOSGroup>
    </Project>
    <Project Include="src\tests.builds" Condition="$(BuildTests)=='true'">
      <InputOSGroup>$(InputOSGroup)</InputOSGroup>
    </Project>
    <!-- signing must happen before packaging -->
    <Project Include="src\sign.builds" />
    <Project Include="src\packages.builds" Condition="'$(BuildPackages)'=='true'"/>
    <Project Include="src\post.builds">
      <!-- For the root traversal default filter the OSGroup to the OSEnvironment which is the OS we are running on -->
      <FilterToOSGroup Condition="'$(_OriginalOSGroup)' == ''">$(OSEnvironment)</FilterToOSGroup>
    </Project>
  </ItemGroup>

  <Import Project="dir.targets" />

  <Import Project="dir.traversal.targets" />

  <Import Project="$(ToolsDir)clean.targets" />

  <PropertyGroup Condition="'$(RestoreDuringBuild)'=='true'">
    <TraversalBuildDependsOn>
      ValidateAllProjectDependencies;
      BatchRestorePackages;
      CreateOrUpdateCurrentVersionFile;
      $(TraversalBuildDependsOn);
    </TraversalBuildDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="GatherDirectoriesToRestore" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />

  <Target Name="BatchRestorePackages">
    <MakeDir Directories="$(PackagesDir)" Condition="!Exists('$(PackagesDir)')" /> 

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Restoring all packages..." />

    <Exec Command="$(DnuRestoreCommand) @(DnuRestoreDir->'&quot;%(Identity)&quot;', ' ')"
          StandardOutputImportance="Low"
          CustomErrorRegularExpression="(^Unable to locate .*)|(^Updating the invalid lock file with .*)"
          ContinueOnError="ErrorAndContinue" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Restoring all packages...Done." />
  </Target>

  <!-- Task from buildtools that validates dependencies contained in project.json files. -->
  <UsingTask TaskName="ValidateProjectDependencyVersions" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />

  <Target Name="ValidateAllProjectDependencies"
          Condition="'$(ValidatePackageVersions)'=='true' and '@(ProjectJsonFiles)'!=''">
    <ValidateProjectDependencyVersions ProjectJsons="@(ProjectJsonFiles)"
                                       ProhibitFloatingDependencies="$(ProhibitFloatingDependencies)"
                                       ValidationPatterns="@(ValidationPattern)" />
  </Target>

  <Target Name="UpdateInvalidPackageVersions">
    <ValidateProjectDependencyVersions ProjectJsons="@(ProjectJsonFiles)"
                                       ProhibitFloatingDependencies="$(ProhibitFloatingDependencies)"
                                       ValidationPatterns="@(ValidationPattern)"
                                       UpdateInvalidDependencies="true" />
  </Target>

  <!-- Tasks from buildtools for easy project.json dependency updates -->
  <UsingTask TaskName="UpdatePackageDependencyVersion" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" />

  <Target Name="UpdatePackageDependencyVersion">
    <UpdatePackageDependencyVersion ProjectJsons="@(ProjectJsonFiles)"
                                    PackageId="$(PackageId)"
                                    OldVersion="$(OldVersion)"
                                    NewVersion="$(NewVersion)" />
  </Target>

  <!-- Override RestorePackages from dir.traversal.targets and do a batch restore -->
  <Target Name="RestorePackages" DependsOnTargets="BatchRestorePackages" />

  <!-- Override clean from dir.traversal.targets and just remove the full BinDir -->
  <Target Name="Clean">
    <RemoveDir Directories="$(BinDir)" />
  </Target>

</Project>
