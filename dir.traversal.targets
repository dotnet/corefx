<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="ProducesPackageId"
          Returns="@(PackageIds)"
          DependsOnTargets="FilterProjects">
    <MSBuild Targets="ProducesPackageId"
             Projects="@(Project)"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue">
      <Output TaskParameter="TargetOutputs"
              ItemName="PackageIds" />
    </MSBuild>
    <ItemGroup>
      <PackageIds Include="@(PackageIds)" />
    </ItemGroup>
  </Target>

  <Target Name="ProducesTarget" DependsOnTargets="FilterProjects">
    <MSBuild Targets="ProducesPackageId"
             Projects="@(Project)"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue">
      <Output TaskParameter="TargetOutputs"
              ItemName="PackageIds" />
    </MSBuild>
    <Message Text="%(PackageIds.Identity)" Importance="High" />
  </Target>

  <!-- build vertical requires the FindBestConfiguration task which is currently in CoreFx.Tools.dll -->
  <Import Project="buildvertical.targets" Condition="'$(ImportedBuildVerticalTargets)' != 'true' and Exists('$(CoreFxToolsTaskDir)CoreFx.Tools.dll')" />

  <Target Name="BuildAllProjects">
    <PropertyGroup>
      <DefaultBuildAllTarget Condition="'$(DefaultBuildAllTarget)'==''">$(MSBuildProjectDefaultTargets)</DefaultBuildAllTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultBuildAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true;BuildConfiguration=$(BuildConfiguration)"
             ContinueOnError="ErrorAndStop" />

    <MSBuild Targets="$(DefaultBuildAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true;BuildConfiguration=$(BuildConfiguration);%(Project.AdditionalProperties)"
             BuildInParallel="true"
             ContinueOnError="ErrorAndStop" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <!-- FilterProjectsToTest will filter the project list according to the FilterToTestTFM value -->
  <Target Name="FilterProjectsToTest"
          BeforeTargets="TestAllProjects"
          Condition="$(MSBuildProjectName.EndsWith('.Tests'))">

    <ItemGroup>
      <Project>
        <!-- default to DefaultTestTFM defined in root dir.props if TestTFMs aren't set on the project -->
        <TestTFMs Condition="'%(Project.TestTFMs)'==''">$(DefaultTestTFM)</TestTFMs>
      </Project>
      <Project>
        <!-- make sure every defined TestTFM value are surrounded by semicolons for easier search, e.g. ";net46;"" -->
        <TestTFMs>;%(Project.TestTFMs);</TestTFMs>
      </Project>

      <!-- Include all projects which have TestTFM from the supported set -->
      <ProjectsToTest Include="@(Project)" Condition="'%(Project.Extension)'=='.csproj' And $([System.String]::new('%(Project.TestTFMs)').Contains(';$(FilterToTestTFM);'))">
        <TestTFM>$(FilterToTestTFM)</TestTFM>
      </ProjectsToTest>

      <ProjectsToTest>
       <AdditionalProperties Condition="'%(ProjectsToTest.TestTFM)'!=''">TestTFM=%(ProjectsToTest.TestTFM);%(ProjectsToTest.AdditionalProperties)</AdditionalProperties>
      </ProjectsToTest>
      <ProjectsToTest>
        <AdditionalProperties Condition="'%(ProjectsToTest.FilterToTestTFM)'!=''">FilterToTestTFM=%(ProjectsToTest.FilterToTestTFM);%(ProjectsToTest.AdditionalProperties)</AdditionalProperties>
      </ProjectsToTest>
      <ProjectsToTest>
        <FilterToTestTFM>$(FilterToTestTFM)</FilterToTestTFM>
      </ProjectsToTest>
      <ProjectsToTest>
        <AdditionalProperties Condition="'%(ProjectsToTest.FilterToTestTFM)'!=''">FilterToTestTFM=%(ProjectsToTest.FilterToTestTFM);%(ProjectsToTest.AdditionalProperties)</AdditionalProperties>
      </ProjectsToTest>
    </ItemGroup>
  </Target>

  <!-- TestAllProjects will run all tests according to TestTFM value we are filtering with -->
  <Target Name="TestAllProjects"
          AfterTargets="BuildAllProjects"
          Condition="$(MSBuildProjectName.EndsWith('.Tests'))">
    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->

    <MSBuild Targets="Test"
             Projects="@(ProjectsToTest)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="Test"
             Projects="@(ProjectsToTest)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="GetFilesToPackage" DependsOnTargets="FilterProjects"
          Returns="@(FilesToPackage)">
    <MSBuild Targets="GetFilesToPackage"
             Projects="@(Project)"
             BuildInParallel="true"
             Properties="$(ProjectProperties)"
             ContinueOnError="ErrorAndContinue" >
      <Output TaskParameter="TargetOutputs"
              ItemName="FilesToPackage" />
    </MSBuild>

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="CleanAllProjects" DependsOnTargets="FilterProjects">
    <PropertyGroup>
      <DefaultCleanAllTarget Condition="'$(DefaultCleanAllTarget)'==''">Clean</DefaultCleanAllTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultCleanAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="CleanAllProjects=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultCleanAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="CleanAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="RestoreAllProjectPackages" DependsOnTargets="FilterProjects">
    <Message Importance="High" Text="Restoring project packages..." />

    <PropertyGroup>
      <DefaultRestoreAllPackagesTarget Condition="'$(DefaultRestoreAllPackagesTarget)'==''">RestorePackages</DefaultRestoreAllPackagesTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
      however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultRestoreAllPackagesTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="RestoreAllPackages=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultRestoreAllPackagesTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="RestoreAllPackages=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="GenerateAllTestProjectJsons">
    <PropertyGroup>
      <DefaultGenerateAllTestProjectJsonsTarget Condition="'$(DefaultGenerateAllTestProjectJsonsTarget)' == ''">GenerateAllTestProjectJsons</DefaultGenerateAllTestProjectJsonsTarget>
    </PropertyGroup>

    <ItemGroup>
      <GeneratedProject Include="@(Project)">
        <AdditionalProperties>GeneratedTargetGroup=%(Project.TargetGroup);GeneratedOSGroup=%(Project.OSGroup);%(Project.AdditionalProperties)</AdditionalProperties>
      </GeneratedProject>
    </ItemGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultGenerateAllTestProjectJsonsTarget)"
             Projects="@(GeneratedProject)"
             Condition="'$(SerializeProjects)' != 'true'"
             Properties="GenerateAllTestProjectJsons=$(DefaultGenerateAllTestProjectJsonsTarget)"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultGenerateAllTestProjectJsonsTarget)"
             Projects="@(GeneratedProject)"
             Condition="'$(SerializeProjects)' == 'true' AND '%(Identity)' != ''"
             Properties="GenerateAllTestProjectJsons=$(DefaultGenerateAllTestProjectJsonsTarget)"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <PropertyGroup>
    <TraversalBuildDependsOn>
      BuildAllProjects;
      $(TraversalBuildDependsOn);
    </TraversalBuildDependsOn>

    <TraversalCleanDependsOn>
      CleanAllProjects;
      $(TraversalCleanDependsOn);
    </TraversalCleanDependsOn>

    <TraversalGenerateTestProjectJsonsDependsOn>
      GenerateAllTestProjectJsons;
      $(TraversalGenerateTestProjectJsonsDependsOn)
    </TraversalGenerateTestProjectJsonsDependsOn>

    <TraversalRestorePackagesDependsOn>
      RestoreAllProjectPackages;
      $(TraversalRestorePackagesDependsOn)
    </TraversalRestorePackagesDependsOn>

    <TraversalRestorePackagesDependsOn Condition="'$(_BuildAgainstPackages)' == 'true'">
      $(TraversalGenerateTestProjectJsonsDependsOn);
      $(TraversalRestorePackagesDependsOn)
    </TraversalRestorePackagesDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(TraversalBuildDependsOn)" />

  <Target Name="Clean" DependsOnTargets="$(TraversalCleanDependsOn)" />

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Target Name="RestorePackages" DependsOnTargets="$(TraversalRestorePackagesDependsOn)" />
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />
  <Target Name="Test" />

  <!-- Target will be overridden if buildagainstpackages.targets is imported. -->
  <Target Name="GenerateTestProjectJson" />
 <Import Condition="'$(_BuildAgainstPackages)' == 'true'" Project="$(ToolsDir)/buildagainstpackages.targets" />
</Project>
