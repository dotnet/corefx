<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="FilterProjects">
    <PropertyGroup>
      <FilterToOSGroup Condition="'$(FilterToOSGroup)'=='' and '$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'">$(OSGroup)</FilterToOSGroup>
    </PropertyGroup>

    <ItemGroup>
      <!-- list each append as a seperate item to force re-evaluation of AdditionalProperties metadata -->
      <Project>
        <AdditionalProperties Condition="'%(Project.TargetGroup)'!=''">TargetGroup=%(Project.TargetGroup);%(Project.AdditionalProperties)</AdditionalProperties>
      </Project>
      <Project>
        <FilterToOSGroup Condition="'$(FilterToOSGroup)'!=''">$(FilterToOSGroup)</FilterToOSGroup>
      </Project>
      <Project>
        <AdditionalProperties Condition="'%(Project.OSGroup)'!=''">OSGroup=%(Project.OSGroup);%(Project.AdditionalProperties)</AdditionalProperties>
      </Project>
      <Project>
        <AdditionalProperties Condition="'%(Project.Platform)'!=''">Platform=%(Project.Platform);%(Project.AdditionalProperties)</AdditionalProperties>
      </Project>
      <Project>
        <AdditionalProperties Condition="'%(Project.FilterToOSGroup)'!=''">FilterToOSGroup=%(Project.FilterToOSGroup);%(Project.AdditionalProperties)</AdditionalProperties>
      </Project>
      <Project>
        <AdditionalProperties Condition="'%(Project.InputOSGroup)' != ''">InputOSGroup=%(Project.InputOSGroup);%(Project.AdditionalProperties)</AdditionalProperties>
      </Project>
      <Project>
        <!-- If a project isn't setting the OSGroup via metadata then undefine it so that the globally set OSGroup doesn't override empty OSGroup -->
        <UndefineProperties Condition="'%(Project.OSGroup)'==''">%(Project.UndefineProperties);OSGroup</UndefineProperties>
      </Project>
      <Project>
        <UndefineProperties Condition="'%(Project.Extension)'!='.builds' and '%(Project.Extension)'!='.proj'">%(Project.UndefineProperties);FilterToOSGroup;DefaultBuildAllTarget</UndefineProperties>
      </Project>
    </ItemGroup>

    <!-- If we have enabled code coverage and set the projects to be serialized we need to pass that property down to the childe projects -->
    <ItemGroup Condition="'$(CodeCoverageEnabled)'=='true' and '$(SerializeProjects)'=='true'">
      <Project>
        <AdditionalProperties>SerializeProjects=true;%(Project.AdditionalProperties)</AdditionalProperties>
      </Project>
    </ItemGroup>

    <ItemGroup Condition="'$(FilterToOSGroup)'!='' and '$(BuildAllOSGroups)' != 'true'">
      <ProjectsToBuild Include="@(Project)" Condition="'%(Project.OSGroup)'=='$(FilterToOSGroup)' or '%(Project.OSGroup)'=='AnyOS' or '%(Project.OSGroup)'==''" />

      <Project Remove="@(Project)" />
      <Project Include="@(ProjectsToBuild)" />
    </ItemGroup>
  </Target>

  <Target Name="DumpTargets" DependsOnTargets="FilterProjects">
        <MSBuild Targets="$(DefaultBuildAllTarget)"
             Projects="@(Project)"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true"
             ContinueOnError="ErrorAndContinue" />
  </Target>

  <Target Name="BuildAllProjects" DependsOnTargets="FilterProjects">
    <PropertyGroup>
      <DefaultBuildAllTarget Condition="'$(DefaultBuildAllTarget)'==''">$(MSBuildProjectDefaultTargets)</DefaultBuildAllTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultBuildAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultBuildAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="DefaultBuildAllTarget=$(DefaultBuildAllTarget);BuildAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="GetFilesToPackage" DependsOnTargets="FilterProjects"
          Returns="@(FilesToPackage)">
    <MSBuild Targets="GetFilesToPackage"
             Projects="@(Project)"
             BuildInParallel="$(BuildInParallel)"
             Properties="$(ProjectProperties)"
             ContinueOnError="ErrorAndContinue" >
      <Output TaskParameter="TargetOutputs"
              ItemName="FilesToPackage" />
    </MSBuild>

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="CleanAllProjects" DependsOnTargets="FilterProjects">
    <PropertyGroup>
      <DefaultCleanAllTarget Condition="'$(DefaultCleanAllTarget)'==''">Clean</DefaultCleanAllTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
         however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultCleanAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="CleanAllProjects=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultCleanAllTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="CleanAllProjects=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <Target Name="RestoreAllProjectPackages" DependsOnTargets="FilterProjects">
    <Message Importance="High" Text="Restoring project packages..." />

    <PropertyGroup>
      <DefaultRestoreAllPackagesTarget Condition="'$(DefaultRestoreAllPackagesTarget)'==''">RestorePackages</DefaultRestoreAllPackagesTarget>
    </PropertyGroup>

    <!-- To Serialize we use msbuild's batching functionality '%' to force it to batch all similar projects with the same identity
      however since the project names are unique it will essentially force each to run in its own batch -->
    <MSBuild Targets="$(DefaultRestoreAllPackagesTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'=='true' AND '%(Identity)' != ''"
             Properties="RestoreAllPackages=true"
             ContinueOnError="ErrorAndContinue" />

    <MSBuild Targets="$(DefaultRestoreAllPackagesTarget)"
             Projects="@(Project)"
             Condition="'$(SerializeProjects)'!='true'"
             Properties="RestoreAllPackages=true"
             BuildInParallel="true"
             ContinueOnError="ErrorAndContinue" />

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)'=='false'" />
  </Target>

  <PropertyGroup>
    <TraversalBuildDependsOn>
      BuildAllProjects;
      $(TraversalBuildDependsOn);
    </TraversalBuildDependsOn>

    <TraversalCleanDependsOn>
      CleanAllProjects;
      $(TraversalCleanDependsOn);
    </TraversalCleanDependsOn>

    <TraversalRestorePackagesDependsOn>
      RestoreAllProjectPackages;
      $(TraversalRestorePackagesDependsOn)
    </TraversalRestorePackagesDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(TraversalBuildDependsOn)" />

  <Target Name="Clean" DependsOnTargets="$(TraversalCleanDependsOn)" />

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Target Name="RestorePackages" DependsOnTargets="$(TraversalRestorePackagesDependsOn)" />
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />
  <Target Name="Test" />

</Project>