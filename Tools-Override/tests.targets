<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- This is the target that copies the test assets to the test output -->
  <Import Project="$(MSBuildThisFileDirectory)publishtest.targets" />
  <UsingTask TaskName="GetTargetMachineInfo" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="GenerateTestExecutionScripts" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <!-- Which categories of tests to run by default -->
  <PropertyGroup>
    <TestDisabled>false</TestDisabled>
    <TestDisabled Condition="'$(IsTestProject)'!='true' Or '$(SkipTests)'=='true' Or '$(RunTestsForProject)'=='false'">true</TestDisabled>
    <TestsSuccessfulSemaphore>tests.passed</TestsSuccessfulSemaphore>
  </PropertyGroup>

  <ItemGroup>
    <!-- Split semicolon separated lists -->
    <WithCategoriesItems Include="$(WithCategories)" />
    <WithoutCategoriesItems Include="$(WithoutCategories)" />
    <DefaultNoCategories Include="$(DefaultNoCategories)" />
    <UnsupportedPlatformsItems Include="$(UnsupportedPlatforms)"/>
  </ItemGroup>

  <PropertyGroup>
    <TestWithCore Condition="'$(TestWithCore)' == '' And !$(TestTFM.StartsWith('netcoreapp', StringComparison.OrdinalIgnoreCase))">false</TestWithCore>
    <!-- TestAppX is true only for debug scenario which runs on non-aot runtime ids -->
    <TestAppX Condition="'$(TestWithCore)' == 'false' And '$(TestTFM)' == 'netcore50' And !$(TestNugetRuntimeId.Contains('aot'))">true</TestAppX>
    <TestWithCore Condition="'$(TestWithCore)' == '' ">true</TestWithCore>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TestWithCore)' == 'true' And '$(TestAppX)' != 'true'">
    <TestHostExecutable>CoreRun.exe</TestHostExecutable>
    <TestHostDirectory>$(TestPath)$(TestTFM)/</TestHostDirectory>
    <XunitExecutable Condition="'$(XunitExecutable)' == ''">xunit.console.netcore.exe</XunitExecutable>
    <DebugTestFrameworkFolder>$(TestTFM)</DebugTestFrameworkFolder>
    <DebugEngines>{2E36F1D4-B23C-435D-AB41-18E608940038}</DebugEngines>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UseDotNetNativeToolchain)' == 'true'">
    <TestILCVersion>1.4.24208-prerelease</TestILCVersion>
    <!-- Workaround:  On .NET execution, these paths will hit 263 characters during unzipping and fail
         Unfortunately this means slightly different content of Runtests.cmd local vs Helix, but without lots of
         long-path trickery this is the only current options.
    -->
    <TestILCFolder Condition="'$(EnableCloudTest)' != 'true'">%PACKAGE_DIR%\Microsoft.DotNet.TestILC\$(TestILCVersion)\contentFiles\any\any\TestILC</TestILCFolder>
    <!-- CloudTest.targets will zip up the TestILC folder from within the package path above to this folder.-->
    <TestILCFolder Condition="'$(EnableCloudTest)' == 'true'">%PACKAGE_DIR%\TestILC</TestILCFolder>
    <TestHostExecutable></TestHostExecutable>
    <XunitExecutable>xunit.console.netcore.exe</XunitExecutable>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TestWithCore)' != 'true' And '$(TestAppX)' != 'true'">
    <XunitExecutable Condition="'$(XunitExecutable)' == ''">xunit.console.exe</XunitExecutable>
    <DebugTestFrameworkFolder>net45</DebugTestFrameworkFolder>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TestAppX)' == 'true'">
    <TestHostExecutable></TestHostExecutable>
    <XunitExecutable Condition="'$(XunitExecutable)' == ''">xunit.console.uwp.exe</XunitExecutable>
  </PropertyGroup>

  <ItemGroup>
    <!-- Table to track mapping between TestNugetTargetMoniker and the corresponding TestTFM -->
    <TestNugetTargetMoniker Include=".NETCoreApp,Version=v1.0" Condition="'$(TestTFM)' == 'netcoreapp1.0'">
      <Folder>netcoreapp1.0</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETCoreApp,Version=v1.1" Condition="'$(TestTFM)' == 'netcoreapp1.1'">
      <Folder>netcoreapp1.1</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETFramework,Version=v4.6.3" Condition="'$(TestTFM)' == 'net463'">
      <Folder>net463</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETFramework,Version=v4.6.2" Condition="'$(TestTFM)' == 'net462'">
      <Folder>net462</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETFramework,Version=v4.6.1" Condition="'$(TestTFM)' == 'net461'">
      <Folder>net461</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETFramework,Version=v4.6" Condition="'$(TestTFM)' == 'net46'">
      <Folder>net46</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETFramework,Version=v4.5" Condition="'$(TestTFM)' == 'net45'">
      <Folder>net45</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETFramework,Version=v4.5.1" Condition="'$(TestTFM)' == 'net451'">
      <Folder>net451</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include=".NETFramework,Version=v4.5.2" Condition="'$(TestTFM)' == 'net452'">
      <Folder>net452</Folder>
    </TestNugetTargetMoniker>
    <!-- Project template for UWP Apps uses uap10.0, this mapping allows support for the Debug and Release scenarios -->
    <TestNugetTargetMoniker Include="UAP,Version=v10.0" Condition="'$(TestTFM)' == 'netcore50aot'">
      <Folder>netcore50aot</Folder>
    </TestNugetTargetMoniker>
    <TestNugetTargetMoniker Include="UAP,Version=v10.0" Condition="'$(TestTFM)' == 'netcore50'">
      <Folder>netcore50</Folder>
    </TestNugetTargetMoniker>
  </ItemGroup>

  <!-- General xunit options -->
  <PropertyGroup>
    <XunitResultsFileName>testResults.xml</XunitResultsFileName>

    <XunitOptions Condition="'$(TestWithCore)' != 'true'">$(XunitOptions) -noshadow </XunitOptions>
    <XunitOptions>$(XunitOptions) -xml $(XunitResultsFileName)</XunitOptions>

    <XunitOptions Condition="'$(Performance)'!='true'">$(XunitOptions) -notrait Benchmark=true</XunitOptions>

    <XunitOptions Condition="'$(UseDotNetNativeToolchain)'=='true'">$(XunitOptions) -redirectoutput</XunitOptions>

    <XunitOptions Condition="'$(TestTFM)'!=''">$(XunitOptions) -notrait category=non$(TestTFM)tests</XunitOptions>
    <XunitOptions Condition="'$(XunitMaxThreads)'!=''">$(XunitOptions) -maxthreads $(XunitMaxThreads)</XunitOptions>
    <XunitTestAssembly Condition="'$(XunitTestAssembly)' == ''">$(TargetFileName)</XunitTestAssembly>
    <XunitArguments>$(XunitTestAssembly) $(XunitOptions)</XunitArguments>

    <TestProgram Condition="'$(TestHostExecutable)'!=''">$(TestHostExecutable)</TestProgram>
    <TestArguments Condition="'$(TestHostExecutable)'!=''">$(XunitExecutable) $(XunitArguments)</TestArguments>

    <TestProgram Condition="'$(TestHostExecutable)'==''">$(XunitExecutable)</TestProgram>
    <TestArguments Condition="'$(TestHostExecutable)'==''">$(XunitArguments)</TestArguments>

    <TestCommandLine Condition="'$(Performance)'!='true' or '$(IncludePerformanceTests)'!='true'">$(TestProgram) $(TestArguments) {XunitTraitOptions}</TestCommandLine>
  </PropertyGroup>

  <!-- The Code Coverage targets will override TestHost and TestCommandLine if coverage is enabled -->
  <Import Project="$(MSBuildThisFileDirectory)CodeCoverage.targets" />

  <!-- import settings for perf testing -->
  <Import Project="$(MSBuildThisFileDirectory)PerfTesting.targets" Condition="'$(Performance)'=='true' and '$(IncludePerformanceTests)'=='true'"/>

  <!-- In VS (2015 Preview or later currently required): Debug to run unit tests on CoreCLR. -->
  <PropertyGroup Condition="'$(IsTestProject)'=='true'">
    <StartWorkingDirectory Condition="'$(StartWorkingDirectory)'==''">$(TestPath)$(DebugTestFrameworkFolder)</StartWorkingDirectory>
    <StartAction Condition="'$(StartAction)'==''">Program</StartAction>
    <StartProgram Condition="'$(StartProgram)'==''">$(TestHostDirectory)$(TestProgram)</StartProgram>
    <StartArguments Condition="'$(StartArguments)'==''">$(TestArguments) -wait -parallel none</StartArguments>
  </PropertyGroup>

  <Target Name="DiscoverTestInputs" DependsOnTargets="ResolveProjectReferences;ResolveAssemblyReferences;GetCopyToOutputDirectoryItems">
    <ItemGroup>
      <RunTestsForProjectInputs Include="@(ReferenceCopyLocalPaths)" />
      <RunTestsForProjectInputs Include="@(Content)" />
      <RunTestsForProjectInputs Include="@(IntermediateAssembly)" />
      <RunTestsForProjectInputs Include="@(_DebugSymbolsIntermediatePath)" />
      <RunTestsForProjectInputs Include="@(AllItemsFullPathWithTargetPath)" />
    </ItemGroup>
  </Target>

  <!--
    On command line run unit tests on CoreCLR after the Test target.
    Set ForceRunTests to true to run tests even if there have been no changes since the last successful run.
  -->
  <Target Name="RunTestsForProject"
          DependsOnTargets="DiscoverTestInputs;CheckTestCategories"
          AfterTargets="CheckTestCategories"
          Inputs="@(RunTestsForProjectInputs)"
          Outputs="$(TestsSuccessfulSemaphore);$(TestPath)%(TestNugetTargetMoniker.Folder)/$(XunitResultsFileName);$(CoverageOutputFilePath)"
          >

    <ItemGroup>
      <RunWithoutTraits Condition="'$(TargetOS)'=='Windows_NT'" Include="nonwindowstests" />
      <RunWithoutTraits Condition="'$(TargetOS)'=='Linux'" Include="nonlinuxtests" />
      <RunWithoutTraits Condition="'$(TargetOS)'=='OSX'" Include="nonosxtests"/>
      <RunWithoutTraits Condition="'$(TargetOS)'=='FreeBSD'" Include="nonfreebsdtests"/>
      <RunWithoutTraits Condition="'$(TargetOS)'=='NetBSD'" Include="nonnetbsdtests"/>
    </ItemGroup>

    <PropertyGroup>
      <RunnerScriptName Condition="'$(TargetOS)'=='Windows_NT'" >RunTests.cmd</RunnerScriptName>
      <RunnerTemplateName Condition="'$(TargetOS)'=='Windows_NT'" >RunnerTemplate.Windows.txt</RunnerTemplateName>
      <RunnerScriptName Condition="'$(TargetOS)'!='Windows_NT'" >RunTests.sh</RunnerScriptName>
      <RunnerTemplateName Condition="'$(TargetOS)'!='Windows_NT'" >RunnerTemplate.Unix.txt</RunnerTemplateName>
    </PropertyGroup>

    <PropertyGroup>
      <XunitTraitOptions Condition="'@(RunWithTraits)'!=''">$(XunitTraitOptions) -trait category=@(RunWithTraits, ' -trait category=') </XunitTraitOptions>
      <XunitTraitOptions Condition="'@(RunWithoutTraits)'!=''">$(XunitTraitOptions) -notrait category=@(RunWithoutTraits, ' -notrait category=') </XunitTraitOptions>
    </PropertyGroup>

    <!-- Replace the {XunitTraitOptions} place holder with the actual traits.  We use the place holder
         because code coverage needs to have a bit of the test command line after the traits (it adds ending quotes
         to one of its options).  Simply appending the traits would break code coverage.
         Additionally, replace CoreRun.exe with ./corerun on Non-Windows OSes (this is the only difference in the command)
         Future refactoring will allow us to construct this correctly initially, but we don't always know the TargetOS
         when the properties are set currently.
         -->

    <PropertyGroup>
      <TestCommandLine Condition="'$(TargetOS)'!='Windows_NT'" >$(TestCommandLine.Replace('$(TestHostExecutable)', './corerun'))</TestCommandLine>
      <TestCommandLine>$(TestCommandLine.Replace('{XunitTraitOptions}', '$(XunitTraitOptions)'))</TestCommandLine>
      <OutputFolderForScriptGenerator>$(TestPath)%(TestNugetTargetMoniker.Folder)</OutputFolderForScriptGenerator>
      <OutputPathForScriptGenerator>$(OutputFolderForScriptGenerator)/$(RunnerScriptName)</OutputPathForScriptGenerator>
      <OutputFolderForTestDependencies>$(BinDir)/TestDependencies</OutputFolderForTestDependencies>
    </PropertyGroup>

    <MakeDir Condition="'$(CoverageEnabledForProject)'=='true'" Directories="$(CoverageReportDir)" />

    <ItemGroup>
      <!-- Not all platforms can use the .ni.dlls that come from packages.  If TestWithoutNativeImages is specified, we'll exclude them from copy generation.
           If we end up needing this for any other sorts of filtering, we'll want to add a list of filtered extensions to be matched on EndsWith.  -->
      <IncludedFileForRunnerScript Include="@(_TestCopyLocalByFileNameWithoutDuplicates)"
                                   Condition="'$(TestWithoutNativeImages)' != 'true' Or !$([System.String]::Copy('%(_TestCopyLocalByFileNameWithoutDuplicates.SourcePath)').EndsWith('.ni.dll'))" >
        <PackageRelativePath Condition="'%(_TestCopyLocalByFileNameWithoutDuplicates.NugetPackageId)' != ''">$([System.String]::Copy('%(_TestCopyLocalByFileNameWithoutDuplicates.SourcePath)').Replace('$(PackagesDir)',''))</PackageRelativePath>
        <UseAbsolutePath Condition="'$(TestWithLocalLibraries)'=='true' Or '$(TestWithLocalNativeLibraries)'=='true'">$([System.String]::Copy('%(_TestCopyLocalByFileNameWithoutDuplicates.SourcePath)').StartsWith('$(BinDir)'))</UseAbsolutePath>
      </IncludedFileForRunnerScript>
    </ItemGroup>

    <MakeDir Directories="$(OutputFolderForTestDependencies)" />
    <PropertyGroup>
      <_TestDependencyListRoot>$(AssemblyName)-$(OSGroup).$(Platform).$(ConfigurationGroup)</_TestDependencyListRoot>
      <_TestDependencyListRoot Condition="'$(TestTFM)' != ''">$(_TestDependencyListRoot).$(TestTFM)</_TestDependencyListRoot>
      <_TestDependencyListFileName>$(_TestDependencyListRoot).dependencylist.txt</_TestDependencyListFileName>
      <TestDependencyListFilePath>$(OutputFolderForTestDependencies)/$(_TestDependencyListFileName)</TestDependencyListFilePath>
    </PropertyGroup>
    <Message Text="Generating $(TestDependencyListFilePath)" />
    <WriteLinesToFile
      File="$(TestDependencyListFilePath)"
      Lines="@(IncludedFileForRunnerScript -> '%(PackageRelativePath)')"
      Overwrite="true"
      Encoding="Ascii" />

    <Message Text="Generating JSON-Processed $(OutDir)assemblylist.txt for legacy execution" Condition="'$(UseLegacyXunitPerfRunner)'=='true'" />
    <GenerateAssemblyList
      InputListLocation="$(TestDependencyListFilePath)"
      OutputListLocation="$(OutDir)assemblylist.txt"
      Condition="'$(UseLegacyXunitPerfRunner)'=='true'"
     />

    <!-- For .NET Native compilation, we first need to generate a native executable if possible. -->
    <ItemGroup Condition="'$(UseDotNetNativeToolchain)' == 'true' AND '$(Performance)'!='true'" >
      <TestCommandLines Include="copy /y $(TestILCFolder)\default.rd.xml  %EXECUTION_DIR%" />
      <TestCommandLines Include="$(TestILCFolder)\ilc.exe -usecustomframework -ExeName xunit.console.netcore.exe -in %EXECUTION_DIR% -out %EXECUTION_DIR%\native -usedefaultpinvoke -buildtype ret -v diag || exit /b %ERRORLEVEL%"/>
      <TestCommandLines Include="copy /y $(TestILCFolder)\CRT\vcruntime140_app.dll %EXECUTION_DIR%\native" />
      <TestCommandLines Include="echo > %EXECUTION_DIR%\native\$(XunitTestAssembly)"/>
      <TestCommandLines Include="cd native"/>
    </ItemGroup>

    <ItemGroup Condition="'$(Performance)'!='true'">
      <!-- On Windows, call prevents the test command from making execution end prematurely -->
      <TestCommandLines  Condition="'$(TargetOS)'=='Windows_NT'" Include="call $(TestCommandLine)"/>
      <TestCommandLines  Condition="'$(TargetOS)'!='Windows_NT'" Include="$(TestCommandLine)"/>
    </ItemGroup>

    <ItemGroup Condition="'$(Performance)'=='true' and '$(IncludePerformanceTests)'!='true'">
      <!-- On Windows, call prevents the test command from making execution end prematurely -->
      <TestCommandLines  Condition="'$(TargetOS)'=='Windows_NT'" Include="call $(TestCommandLine)"/>
      <TestCommandLines  Condition="'$(TargetOS)'!='Windows_NT'" Include="$(TestCommandLine)"/>
    </ItemGroup>

    <ItemGroup Condition="'$(Performance)'=='true' and '$(IncludePerformanceTests)'=='true'">
      <TestCommandLines Include="@(PerfTestCommandLines)" />
    </ItemGroup>

    <!-- Currently all netcore50 implementations of System.Console actually write to a noop stream -->
    <!-- Workaround is to have the exe detect this and use Console.SetOut to write to a text file. -->
    <ItemGroup Condition="'$(UseDotNetNativeToolchain)' == 'true' AND '$(Performance)'!='true'" >
      <TestCommandLines Include="type Xunit.Console.Output.txt" />
      <TestCommandLines Include="copy /y testResults.xml %EXECUTION_DIR%\" />
    </ItemGroup>

    <!-- Do not put anything between this Item Group and the GenerateTestExecutionScripts invocation -->
    <ItemGroup>
      <TestCommandLines Include="@(PostExecutionTestCommandLines)" />
    </ItemGroup>
    <GenerateTestExecutionScripts
      TestCommands="@(TestCommandLines)"
      TestDependencies="@(IncludedFileForRunnerScript)"
      RunnerScriptTemplate="$(MSBuildThisFileDirectory)/$(RunnerTemplateName)"
      ScriptOutputPath ="$(OutputPathForScriptGenerator)"
    />

    <Exec Condition="'$(TestDisabled)'!='true'"
          Command="$(TestPath)%(TestNugetTargetMoniker.Folder)/$(RunnerScriptName) $(PackagesDir)"
          WorkingDirectory="$(TestPath)%(TestNugetTargetMoniker.Folder)"
          CustomErrorRegularExpression="Failed: [^0]"
          ContinueOnError="true"
          IgnoreStandardErrorWarningFormat="true"
          >
      <Output PropertyName="TestRunExitCode" TaskParameter="ExitCode" />
    </Exec>

    <Delete Condition="'$(DeletePerfDataFile)' == 'true'" Files="$(TestPath)%(TestNugetTargetMoniker.Folder)/$(EventTracerDataFile)" />
    <Error Condition="'$(TestDisabled)'!='true' And '$(TestRunExitCode)' != '0'" Text="One or more tests failed while running tests from '$(MSBuildProjectName)' please check log for details!" />
    <Touch Condition="'$(TestRunExitCode)' == '0'" Files="$(TestsSuccessfulSemaphore)" AlwaysCreate="true" />
  </Target>

  <!-- Needs to run before RunTestsForProject target as it computes categories and set TestDisabled -->
  <Target Name="CheckTestCategories"
          AfterTargets="CheckTestPlatforms">

    <!-- Default behavior is to disable OuterLoop and failing tests if not specified in WithCategories. -->
    <ItemGroup>
      <DefaultNoCategories Condition="'$(Outerloop)'!='true'" Include="OuterLoop" />
      <DefaultNoCategories Include="failing" />
      <WithoutCategoriesItems Include="@(DefaultNoCategories)" Exclude="@(WithCategoriesItems)" />
      <WithoutCategoriesItemsDistinct Include="@(WithoutCategoriesItems->Distinct())" />
    </ItemGroup>

    <ItemGroup>
      <RunWithTraits Condition="'@(WithCategoriesItems)'!=''" Include="@(WithCategoriesItems)" />
      <RunWithoutTraits Condition="'@(WithoutCategoriesItemsDistinct)'!=''" Include="@(WithoutCategoriesItemsDistinct)" />
    </ItemGroup>

    <PropertyGroup>
      <TestsSuccessfulSemaphore Condition="'@(RunWithTraits)' != ''">$(TestsSuccessfulSemaphore).with.@(RunWithTraits, '.')</TestsSuccessfulSemaphore>
      <TestsSuccessfulSemaphore Condition="'@(RunWithoutTraits)' != ''">$(TestsSuccessfulSemaphore).without.@(RunWithoutTraits, '.')</TestsSuccessfulSemaphore>
      <TestsSuccessfulSemaphore>$(TestPath)%(TestNugetTargetMoniker.Folder)/$(TestsSuccessfulSemaphore)</TestsSuccessfulSemaphore>
    </PropertyGroup>

    <Delete Condition="'$(ForceRunTests)'=='true' And Exists($(TestsSuccessfulSemaphore))"
            Files="$(TestsSuccessfulSemaphore)" />
  </Target>

  <Target Name="CheckTestPlatforms"
          BeforeTargets="Test">
    <GetTargetMachineInfo Condition="'$(TargetOS)' == ''">
      <Output TaskParameter="TargetOS" PropertyName="TargetOS" />
    </GetTargetMachineInfo>
    <PropertyGroup>
      <TestDisabled Condition="'%(UnsupportedPlatformsItems.Identity)' == '$(TargetOS)'">true</TestDisabled>
    </PropertyGroup>
    <Message Condition="'%(UnsupportedPlatformsItems.Identity)' == '$(TargetOS)'"
      Text="Skipping tests in $(AssemblyName) because it is not supported on $(TargetOS)" />
  </Target>
</Project>
