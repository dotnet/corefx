<Project DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />

  <ItemGroup>
    <TestPackages Condition="'$(TestPackages)' != ''" Include="$(TestPackages)" />
    <ExcludePackages Include="$(ExcludePackages)" />

    <PackageReports Condition="'@(TestPackages)' == ''" Include="$(PackageReportDir)*.json" Exclude="@(ExcludePackages->'$(PackageReportDir)%(Identity).json')"/>
    <PackageReports Condition="'@(TestPackages)' != ''" Include="@(TestPackages->'$(PackageReportDir)%(Identity).json')" />

    <!-- support override via commandline -->
    <RuntimesToInclude Condition="'$(RuntimesToInclude)' != ''" Include="$(RuntimesToInclude)" />
    <TargetFrameworksToInclude Condition="'$(TargetFrameworksToInclude)' != ''" Include="$(TargetFrameworksToInclude)" />

    <!-- we don't build alpine or older OSX versions -->
    <RuntimesToExclude Include="alpine.3.4.3-x64;osx.10.10-x64;osx.10.11-x64" />

    <!-- no targeting pack was ever shipped for net463 -->
    <TargetFrameworksToExclude Include="net463" />
    <TargetFrameworksToExclude Include="net47" />
    <TargetFrameworksToExclude Include="netcoreapp2.2" />

    <!-- CI machines doesn't have net472 targeting pack installed yet and we hit: https://github.com/dotnet/corefx/issues/29906 -->
    <TargetFrameworksToExclude Include="net472" />
    <TargetFrameworksToExclude Include="netfx" />
  </ItemGroup>

  <PropertyGroup>
    <TestDir>$(ArtifactsBinDir)testPkg/</TestDir>
    <TestSupportDir>$(TestDir)support/</TestSupportDir>
    <TestProjectName>test.msbuild</TestProjectName>
    <TestProject>$(TestSupportDir)$(TestProjectName)</TestProject>
    <TestToolsDir>$(TestSupportDir)tools/</TestToolsDir>
    <TestProjectDir>$(TestDir)projects/</TestProjectDir>
    <TestPackageDir>$(ArtifactsBinDir)testPackages</TestPackageDir>
    <TestDotNetPath>$(TestToolsDir)/dotnet</TestDotNetPath>

    <ProjectTemplate>project.csproj.template</ProjectTemplate>
  </PropertyGroup>

  <ItemGroup>
    <TestSupportFiles Include="$(DotNetRoot)**\*.*" Exclude="$(DotNetRoot)sdk\NuGetFallbackFolder\**\*.*">
      <DestinationFolder>$(TestToolsDir)%(RecursiveDir)</DestinationFolder>
    </TestSupportFiles>
    <TestSupportFiles Include="$(SourceDir)shims\netfxreference.props">
      <DestinationFolder>$(TestToolsDir)</DestinationFolder>
    </TestSupportFiles>
    <TestSupportFiles Include="$(RepositoryEngineeringDir)versions.props">
      <DestinationFolder>$(TestToolsDir)eng/</DestinationFolder>
    </TestSupportFiles>
    <TestSupportFiles Include="$(PackagingTaskDir)..\..\**\*.*" Exclude="$(PackagingTaskDir)..\..\*.*">
      <DestinationFolder>$(TestToolsDir)%(RecursiveDir)</DestinationFolder>
    </TestSupportFiles>
    <TestSupportFiles Include="props\Directory.Build.props">
      <DestinationFolder>$(TestDir)</DestinationFolder>
    </TestSupportFiles>
    <TestSupportFiles Include="**\*.targets">
      <DestinationFolder>$(TestSupportDir)%(RecursiveDir)</DestinationFolder>
    </TestSupportFiles>
    <TestSupportFiles Include="$(TestProjectName)">
      <DestinationFolder>$(TestSupportDir)</DestinationFolder>
    </TestSupportFiles>
  </ItemGroup>

  <ItemGroup>
    <CliEnvironment Include="DOTNET_CLI_TELEMETRY_OPTOUT=1" />
    <CliEnvironment Include="DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1" />
    <CliEnvironment Include="DOTNET_MULTILEVEL_LOOKUP=0" />
  </ItemGroup>

  <Target Name="CreateTestDir"
          Inputs="@(TestSupportFiles)"
          Outputs="@(TestSupportFiles->'%(DestinationFolder)\%(FileName)%(Extension)')">
    <MakeDir Directories="%(TestSupportFiles.DestinationFolder)" />
    <Copy SourceFiles="@(TestSupportFiles)" DestinationFolder="%(TestSupportFiles.DestinationFolder)" />
  </Target>

  <Target Name="GetSupportedPackages">
    <GetSupportedPackagesFromPackageReports PackageReports="@(PackageReports)">
      <Output TaskParameter="SupportedPackages" ItemName="SupportedPackage"/>
    </GetSupportedPackagesFromPackageReports>

    <ItemGroup>
      <SupportedPackage>
        <ProjectDir>$(TestProjectDir)%(Identity)/%(TargetFrameworkShort)/</ProjectDir>
      </SupportedPackage>
      <SupportedPackage>
        <ProjectFile>%(ProjectDir)project.csproj</ProjectFile>
        <AssetsFile>%(ProjectDir)obj/project.assets.json</AssetsFile>
      </SupportedPackage>
    </ItemGroup>
  </Target>

  <Target Name="UpdateTargetFrameworks" AfterTargets="GetSupportedPackages">
    <ItemGroup>
      <_supportedPackageByTargetFramework Include="@(SupportedPackage->'%(TargetFrameworkShort)')">
        <Original>%(Identity)</Original>
      </_supportedPackageByTargetFramework>

      <_supportedPackageByTargetFrameworkToRemove Include="@(_supportedPackageByTargetFramework)" Exclude="@(TargetFrameworksToInclude)" Condition="'@(TargetFrameworksToInclude)' != ''" />
      <_filteredSupportedPackageByTargetFramework Include="@(_supportedPackageByTargetFramework)" Exclude="@(TargetFrameworksToExclude);@(_supportedPackageByTargetFrameworkToRemove)" />

      <SupportedPackage Remove="@(SupportedPackage)" />
      <SupportedPackage Include="@(_filteredSupportedPackageByTargetFramework->'%(Original)')" />
    </ItemGroup>
  </Target>

  <Target Name="UpdateRuntimeIdentifiers"
          AfterTargets="GetSupportedPackages"
          Inputs="%(SupportedPackage.Identity);%(SupportedPackage.TargetFrameworkShort)"
          Outputs="unused">
    <ItemGroup>
      <_supportedPackageRuntimes Remove="@(_supportedPackageRuntimes)" />
      <_supportedPackageRuntimes Include="%(SupportedPackage.RuntimeIdentifiers)" />

      <_supportedPackageRuntimesToRemove Include="@(_supportedPackageRuntimes)" Exclude="@(RuntimesToInclude)" Condition="'@(RuntimesToInclude)' != ''" />
      <_filteredSupportedPackageRuntimes Include="@(_supportedPackageRuntimes)" Exclude="@(RuntimesToExclude);@(_supportedPackageRuntimesToRemove)" />

      <SupportedPackage>
        <RuntimeIdentifiers>@(_filteredSupportedPackageRuntimes)</RuntimeIdentifiers>
      </SupportedPackage>
    </ItemGroup>
  </Target>

  <Target Name="GenerateProjects"
          DependsOnTargets="GetSupportedPackages;CreateTestDir"
          Inputs="@(PackageReports);$(ProjectTemplate)"
          Outputs="%(SupportedPackage.ProjectFile)">
    <PropertyGroup>
      <_projectDir>%(SupportedPackage.ProjectDir)/</_projectDir>
      <_projectFile>%(SupportedPackage.ProjectFile)</_projectFile>
      <_packageId>%(SupportedPackage.Identity)</_packageId>
      <_packageVersion>%(SupportedPackage.Version)</_packageVersion>
      <_projectTFM>%(SupportedPackage.TargetFrameworkShort)</_projectTFM>
      <_projectRIDs>%(SupportedPackage.RuntimeIdentifiers)</_projectRIDs>
    </PropertyGroup>

    <MakeDir Directories="$(_projectDir)" />
    <!-- Update project.json template -->
    <WriteLinesToFile
      File="$(_projectFile)"
      Lines="$([System.IO.File]::ReadAllText('$(ProjectTemplate)').Replace('{PackageId}', $(_packageId)).Replace('{PackageVersion}', $(_packageVersion)).Replace('{TFM}', $(_projectTFM)).Replace('{RIDs}', '$(_projectRIDs)'))"
      Overwrite="true" />
    <Message Text="Generated $(_projectFile)" />
  </Target>

  <Target Name="CopyProducedPackages">
    <!-- Copy over package local cache to our helix runtime path -->
    <ItemGroup>
     <_localPackages Include="$(ArtifactsShippingPackagesDir)*.nupkg"/>
     <_localPackages Include="$(ArtifactsNonShippingPackagesDir)*.nupkg"/>
    </ItemGroup>

    <Copy SourceFiles="@(_localPackages)"
          UseHardlinksIfPossible="true"
          DestinationFolder="$(TestSupportDir)packages" />
  </Target>

  <Target Name="ArchiveHelixItems"
          DependsOnTargets="GenerateProjects;CopyProducedPackages"
          Condition="'$(ArchiveTests.ToLower())' == 'packages' or '$(ArchiveTests.ToLower())' == 'all'">

    <MakeDir Directories="$(TestArchiveTestsRoot)" />
    <ZipDirectory
        SourceDirectory="$(TestProjectDir)%(SupportedPackage.Identity)"
        DestinationFile="$(TestArchiveTestsRoot)%(SupportedPackage.Identity).zip"
        Overwrite="true" />

    <MakeDir Directories="$(TestArchiveRuntimeRoot)" />
    <ZipDirectory
        SourceDirectory="$(TestSupportDir)"
        DestinationFile="$(TestArchiveRuntimeRoot)packages-testPayload-$(ConfigurationGroup).zip"
        Overwrite="true" />

  </Target>

  <Target Name="RestoreProjects"
          DependsOnTargets="GenerateProjects"
          Condition="'$(ArchiveTests.ToLower())' != 'packages' and '$(ArchiveTests.ToLower())' != 'all'">

    <PropertyGroup>
      <TestRestoreCommand>$(TestDotNetPath)</TestRestoreCommand>
      <TestRestoreCommand>$(TestRestoreCommand) restore</TestRestoreCommand>
      <TestRestoreCommand>$(TestRestoreCommand) --packages "$(TestPackageDir)"</TestRestoreCommand>
      <TestRestoreCommand>$(TestRestoreCommand) /p:LocalPackagesPath=$(PackageOutputPath)</TestRestoreCommand>
      <TestRestoreCommand>$(TestRestoreCommand) /nr:false</TestRestoreCommand>
      <TestRestoreCommand>$(TestRestoreCommand) /warnaserror</TestRestoreCommand>
      <TestRestoreCommand  Condition="'$(TestPackages)' != ''">$(TestRestoreCommand) /p:TestPackages=$(TestPackages)</TestRestoreCommand>
    </PropertyGroup>

    <Message Importance="High" Text="*** Restoring ***" />
    <Exec Command="$(TestRestoreCommand) &quot;$(TestProject)&quot;" EnvironmentVariables="@(CliEnvironment)" StandardOutputImportance="High" />
  </Target>

  <Target Name="BuildProjects"
          DependsOnTargets="RestoreProjects"
          Condition="'$(ArchiveTests.ToLower())' != 'packages' and '$(ArchiveTests.ToLower())' != 'all'">

    <PropertyGroup>
      <TestBuildCommand>$(TestDotNetPath)</TestBuildCommand>
      <TestBuildCommand>$(TestBuildCommand) msbuild</TestBuildCommand>
      <TestBuildCommand>$(TestBuildCommand) /t:Test</TestBuildCommand>
      <TestBuildCommand>$(TestBuildCommand) /nr:false</TestBuildCommand>
      <TestBuildCommand>$(TestBuildCommand) /warnaserror</TestBuildCommand>
      <TestBuildCommand  Condition="'$(TestPackages)' != ''">$(TestBuildCommand) /p:TestPackages=$(TestPackages)</TestBuildCommand>
    </PropertyGroup>

    <Message Importance="High" Text="*** Testing *** %(SupportedPackage.Identity)" />
    <Message Importance="High" Text="$(TestBuildCommand) &quot;$(TestProject)&quot;" />
    <Exec Command="$(TestBuildCommand) &quot;$(TestProject)&quot;" EnvironmentVariables="@(CliEnvironment)" StandardOutputImportance="High" />
  </Target>

  <UsingTask TaskName="ValidateHarvestVersionIsLatestForRelease" AssemblyFile="$(PackagingTaskDir)Microsoft.DotNet.Build.Tasks.Packaging.dll"/>
  <Target Name="HarvestVersionValidation">
    <!-- This target will validate that all packages that are harvesting assets will be doing it from the right package version.
         If an error is detected, the task will print out the command needed in order to fix the problem. This test requires
         network access, as what it does is ensure that the harvest version we are using is the latest stable available for that
         specific package release. -->
    <ValidateHarvestVersionIsLatestForRelease PackageReports="@(PackageReports)" />
  </Target>

  <Target Name="Build" DependsOnTargets="BuildProjects;HarvestVersionValidation;ArchiveHelixItems" />

  <!-- define test to do nothing, for this project Build does all the testing -->
  <Target Name="Test" />

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.targets))\Directory.Build.targets" />
</Project>
