<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="FindBestConfiguration" AssemblyFile="$(CoreFxToolsTaskDir)CoreFx.Tools.dll"/>
  <PropertyGroup>
    <ImportedBuildVerticalTargets>true</ImportedBuildVerticalTargets>
  </PropertyGroup>

  <!-- Import configuration data model -->
  <Import Project="$(MSBuildThisFileDirectory)src/Tools/GenerateProps/properties.props" />

  <!-- Runs during traversal to select which projects and configurations of those projects to build -->
  <Target Name="AnnotateAndFilterProjects"
          BeforeTargets="BuildAllProjects;TestAllProjects"
          Condition="!$(MSBuildProjectFullPath.EndsWith('.proj'))">

    <!-- find the best configuration for each project, projects that shouldn't build for this configuration
         return an empty item.  -->
    <MSBuild Targets="FindBestConfiguration"
             Projects="@(Project)">
      <Output TaskParameter="TargetOutputs"
              ItemName="_ProjectBestConfigurations" />
    </MSBuild>

    <ItemGroup>
      <!-- transform back to project -->
      <ProjectWithConfiguration Include="@(_ProjectBestConfigurations->'%(OriginalItemSpec)')">
        <AdditionalProperties>Configuration=%(Identity);%(_ProjectBestConfigurations.AdditionalProperties)</AdditionalProperties>
      </ProjectWithConfiguration>
    </ItemGroup>

    <ItemGroup>
      <Project Remove="@(Project)" />
      <Project Include="@(ProjectWithConfiguration)" />
    </ItemGroup>
  </Target>

  <!-- Runs in a leaf project (eg: csproj) to determine best configuration if one exists for purposes of filtering -->
  <Target Name="FindBestConfiguration"
          Returns="$(_BestConfiguration)">

    <!-- if BuildConfigurations is defined, find the best one -->
    <FindBestConfiguration Condition="'$(BuildConfigurations)' != ''"
                           Properties="@(Property)"
                           PropertyValues="@(PropertyValue)"
                           BuildConfigurations="$(BuildConfigurations)"
                           BuildConfiguration="$(BuildConfiguration)">
      <Output TaskParameter="BestConfiguration" PropertyName="_BestConfiguration" />
    </FindBestConfiguration>

    <!-- if BuildConfigurations is not defined, use BuildConfiguration -->
    <PropertyGroup>
      <_BestConfiguration Condition="'$(BuildConfigurations)' == ''">$(BuildConfiguration)</_BestConfiguration>
    </PropertyGroup>
  </Target>

  <!-- Runs in a leaf project (eg: csproj) to determine best configuration if one exists for purposes of project references -->
  <Target Name="FindBestConfigurationForProjectReference"
          DependsOnTargets="FindBestConfiguration"
          Returns="$(_BestConfiguration)">
    <Error Condition="'$(_BestConfiguration)' == ''" Text="Could not find a configuration for $(BuildConfiguration) from $(BuildConfigurations)" />
  </Target>

  <!-- Runs in a leaf project (csproj) to determine best configuration for ProjectReferences -->
  <Target Name="AnnotateProjectReference"
          BeforeTargets="BeforeResolveReferences">

    <!-- find the best configuration for each project, projects that do not have an 
        applicable configuration will fail the build.  -->
    <MSBuild Targets="FindBestConfigurationForProjectReference"
             Projects="@(ProjectReference)">
      <Output TaskParameter="TargetOutputs" ItemName="_ProjectReferenceBestConfigurations" />
    </MSBuild>

    <ItemGroup>
      <!-- transform back to ProjectReference -->
      <ProjectReferenceWithConfiguration Include="@(_ProjectReferenceBestConfigurations->'%(OriginalItemSpec)')">
        <AdditionalProperties>Configuration=%(Identity);%(_ProjectReferenceBestConfigurations.AdditionalProperties)</AdditionalProperties>
      </ProjectReferenceWithConfiguration>
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Remove="@(ProjectReference)" />
      <ProjectReference Include="@(ProjectReferenceWithConfiguration)" />
    </ItemGroup>
  </Target>
</Project>