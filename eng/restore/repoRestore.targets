<Project InitialTargets="_ClearResolvePackageAssets" TreatAsLocalProperty="ExcludeRestorePackageImports">
  <PropertyGroup>
    <!-- Disable restoring of package references in our projects -->
    <RestoreProjectStyle Condition="'$(MSBuildProjectExtension)' != '.depproj'">None</RestoreProjectStyle>
  </PropertyGroup>

  <Import Project="$(RepositoryEngineeringDir)CodeAnalysis.targets" />

  <PropertyGroup>
    <!-- Nuget will normally disable all generated imports as part of a restore to avoid 
         non-determinism where first restore changes a subsequent restore,
         but we need these since they define properties (like TargetFramework) needed by restore.
         In this case we guarantee this is ok since these specific props are not restored by this project's restore. -->
    <_excludeRestorePackageImports>$(ExcludeRestorePackageImports)</_excludeRestorePackageImports>
    <ExcludeRestorePackageImports>false</ExcludeRestorePackageImports>
  </PropertyGroup>
  <Import Project="$(ToolSetCommonDirectory)Tools.proj.nuget.g.targets" Condition="Exists('$(ToolSetCommonDirectory)Tools.proj.nuget.g.targets')" />
  <PropertyGroup>
    <ExcludeRestorePackageImports>$(_excludeRestorePackageImports)</ExcludeRestorePackageImports>
  </PropertyGroup>
  
  <!--
  Hack workaround for not restoring each project. Instead, we turn off all the targets
  that require a `project.assets.json`, since ours will be empty anyway.
  -->
  <Target Name="_ClearResolvePackageAssets"
          Condition="'$(MSBuildProjectExtension)' != '.depproj'">

    <PropertyGroup>
      <ResolvePackageDependenciesForBuildDependsOn></ResolvePackageDependenciesForBuildDependsOn>
    </PropertyGroup>

  </Target>
</Project>