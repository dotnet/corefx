<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <RuntimeIdentifier>$(PackageRID)</RuntimeIdentifier>
    <NoWarn>$(NoWarn);NU1603;NU1605</NoWarn>
    <SwapNativeForIL Condition="'$(SwapNativeForIL)' == '' AND ('$(ConfigurationGroup)' == 'Debug' OR '$(Coverage)' == 'true')">true</SwapNativeForIL>
  </PropertyGroup>

  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <PackageReference Include="Microsoft.DiaSymReader.Native" Version="1.7.0" />
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == 'netcoreapp3.0'">
    <!-- Non-shipping packages do not produce stable versions. -->
    <MicrosoftNETCoreRuntimeCoreCLRPackageVersion>3.0.0-rc2.19462.14</MicrosoftNETCoreRuntimeCoreCLRPackageVersion>
    <MicrosoftPrivateCorefxNETCoreAppVersion>4.6.0-rc2.19462.14</MicrosoftPrivateCorefxNETCoreAppVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETCore.Platforms" Version="$(MicrosoftNETCorePlatformsPackageVersion)" />
    <PackageReference Include="transport.Microsoft.NETCore.Runtime.CoreCLR" Version="$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)" />
    <PackageReference Include="Microsoft.NETCore.TestHost" Version="$(MicrosoftNETCoreRuntimeCoreCLRPackageVersion)" />
    <PackageReference Include="runtime.native.System.Data.SqlClient.sni" Version="$(RuntimeNativeSystemDataSqlClientSniPackageVersion)" />
    <PackageReference Include="Microsoft.NETCore.DotNetHost" Version="$(MicrosoftNETCoreDotNetHostPackageVersion)" />
    <PackageReference Include="Microsoft.NETCore.DotNetHostPolicy" Version="$(MicrosoftNETCoreDotNetHostPolicyPackageVersion)" />
    <!-- We do not need apphost.exe and the 3.0 SDK will actually remove it.
         Exclude here so that when building with the 2.x SDK we don't place it in the test shared framework.
         This can be removed once we have a new SDK -->
    <FileToExclude Include="apphost" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Condition="'$(TargetFramework)' == 'netcoreapp3.0'" Include="Microsoft.Private.Corefx.NETCoreApp" Version="$(MicrosoftPrivateCorefxNETCoreAppVersion)" />
  </ItemGroup>

  <!-- Setup the testing shared framework host -->
  <Target Name="SetupTestingHost"
          Condition="'$(BinPlaceTestSharedFramework)' == 'true'"
          AfterTargets="AfterResolveReferences">
    <PropertyGroup>
      <GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</GlobalJsonContent>
      <DotNetVersion>$([System.Text.RegularExpressions.Regex]::Match($(GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</DotNetVersion>

      <HostFxrFileName Condition="'$(TargetsWindows)' == 'true'">hostfxr</HostFxrFileName>
      <HostFxrFileName Condition="'$(TargetsWindows)' != 'true'">libhostfxr</HostFxrFileName>
      
      <UseHardlink>true</UseHardlink>
      <!-- workaround core-setup problem for hardlinking dotnet executable to testhost: core-setup #4742 -->
      <UseHardlink Condition="'$(_runtimeOSFamily)' == 'FreeBSD'">false</UseHardlink>
    </PropertyGroup>

    <ItemGroup>
      <HostFxFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == '$(HostFxrFileName)'" />
      <DotnetExe Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Filename)' == 'dotnet'" />
      <HostSdkFile Include="$(DotNetRoot)sdk\$(DotNetVersion)\**\*" />
    </ItemGroup>

    <Copy SourceFiles="@(HostFxFile)"
          DestinationFolder="$(TestHostRootPath)host\fxr\$(ProductVersion)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Copy SourceFiles="@(DotnetExe)"
          DestinationFolder="$(TestHostRootPath)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />

    <Exec Command="chmod +x $(TestHostRootPath)%(DotnetExe.Filename)%(DotnetExe.Extension)" Condition="'$(OS)' != 'Windows_NT'"/>

    <Copy SourceFiles="@(HostSdkFile)"
          DestinationFolder="$(TestHostRootPath)sdk\$(DotNetVersion)\%(RecursiveDir)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="$(UseHardlink)" />
  </Target>

  <Target Name="OverrideRuntime"
          Condition="'$(CoreCLROverridePath)' != ''"
          AfterTargets="AfterResolveReferences;FilterNugetPackages">
    <Error Condition="!Exists('$(CoreCLROverridePath)')" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not exist." />
    <PropertyGroup>
      <CoreCLRPDBOverridePath Condition="'$(CoreCLRPDBOverridePath)' == '' and Exists('$(CoreCLROverridePath)/PDB')">$(CoreCLROverridePath)/PDB</CoreCLRPDBOverridePath>
    </PropertyGroup>
    <ItemGroup>
      <CoreCLRFiles Include="$(CoreCLROverridePath)/*.*" />
      <CoreCLRFiles Condition="'$(CoreCLRPDBOverridePath)' != ''" Include="$(CoreCLRPDBOverridePath)/*.pdb;$(CoreCLRPDBOverridePath)/*.dbg" />

      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRFiles->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)'" />
      <ReferenceCopyLocalPaths Include="@(CoreCLRFiles)" />
    </ItemGroup>

    <Error Condition="'@(CoreCLRFiles)' == ''" Text="The path provided to CoreCLROverridePath ($(CoreCLROverridePath)) does not contain any files." />
  </Target>

  <Target Name="GetCoreLibPackagePath" Condition="'$(CoreCLROverridePath)' == ''" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <_CoreLibFile Include="@(ReferenceCopyLocalPaths)" Condition="'%(FileName)' == 'System.Private.CoreLib'" />
    </ItemGroup>
    <PropertyGroup>
      <_CoreLibFilePath>%(_CoreLibFile.FullPath)</_CoreLibFilePath>
      <_CoreLibPackagePath>$(_CoreLibFilePath.SubString(0, $(_CoreLibFilePath.IndexOf('runtimes'))))</_CoreLibPackagePath>
    </PropertyGroup>
    <Error Condition="'$(_CoreLibPackagePath)' == '' OR !Exists('$(_CoreLibPackagePath)')" 
           Text="Could not locate the CoreClr package." />
  </Target>

  <Target Name="GetCoreCLRILFiles" DependsOnTargets="GetCoreLibPackagePath">
    <ItemGroup>
      <CoreCLRILFiles Condition="'$(CoreCLROverridePath)' == ''" Include="$(_CoreLibPackagePath)/**/il/*.*" />
      <CoreCLRILFiles Condition="'$(CoreCLROverridePath)' != ''" Include="$(CoreCLROverridePath)/IL/*.*" />
    </ItemGroup>
    <Error Condition="'@(CoreCLRILFiles)' == ''" Text="Could not locate CoreCLR IL files." />
  </Target>

  <Target Name="SwapNativeForIL"
          AfterTargets="AfterResolveReferences"
          DependsOnTargets="GetCoreCLRILFiles;OverrideRuntime"
          Condition="'$(SwapNativeForIL)' == 'true'">
      <ItemGroup>
        <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRILFiles->'%(FileName)%(Extension)')' == '%(FileName)%(Extension)'" />
        <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'@(CoreCLRILFiles->'%(FileName).ni%(Extension)')' == '%(FileName)%(Extension)'" />
        <ReferenceCopyLocalPaths Include="@(CoreCLRILFiles)" />
      </ItemGroup>
  </Target>
  
</Project>
