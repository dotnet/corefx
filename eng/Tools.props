<Project>
  <PropertyGroup>
    <RestoreSources Condition="'$(DotNetBuildOffline)' != 'true'">
      https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json;
      https://dotnet.myget.org/F/sourcelink/api/v3/index.json;
      $(RestoreSources)
    </RestoreSources>
    <MSBuildTreatWarningsAsErrors>false</MSBuildTreatWarningsAsErrors>
    <Language>C#</Language>

    <!-- Need to keep in sync with CodeAnalysis.targets file. -->
    <AnalyzerPropsFile>$(ArtifactsToolsetDir)Common\Tools.Analyzers.props</AnalyzerPropsFile>

    <DotNetRoot Condition="'$(DotNetRoot)' == ''">$([MSBuild]::NormalizeDirectory('$(RepoRoot)', '.dotnet'))</DotNetRoot>
    <DotNetCmd>$(DotNetRoot)dotnet</DotNetCmd>
    <DotNetCmd Condition="'$(OS)' == 'Windows_NT'">$(DotNetCmd).exe</DotNetCmd>
    <DotNetCmd>"$(DotNetCmd)"</DotNetCmd>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)dependencies.props" />

  <!-- source-built packages -->
  <ItemGroup>
    <!-- arcade -->
    <PackageReference Include="Microsoft.DotNet.ApiCompat" Version="$(MicrosoftDotNetApiCompatPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.SourceRewriter" Version="$(MicrosoftDotNetSourceRewriterPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.GenAPI" Version="$(MicrosoftDotNetGenApiPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.GenFacades" Version="$(MicrosoftDotNetGenFacadesPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Feed" Version="$(MicrosoftDotNetBuildTasksFeedPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Packaging" Version="$(MicrosoftDotNetBuildTasksPackagingPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.CoreFxTesting" Version="$(MicrosoftDotNetCoreFxTestingPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Configuration" Version="$(MicrosoftDotNetBuildTasksConfigurationPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.VersionTools.Tasks" Version="$(MicrosoftDotNetVersionToolsTasksPackageVersion)" />
    <PackageReference Include="Microsoft.DotNet.CodeAnalysis" Version="$(MicrosoftDotNetCodeAnalysisPackageVersion)" />

    <!-- roslyn -->
    <PackageReference Include="Microsoft.Net.Compilers.Toolset" Version="$(MicrosoftNetCompilersToolsetVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
  </ItemGroup>

  <!-- excluded from source build -->
  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
    <!-- Symbol publishing -->
    <PackageReference Include="$(PublishSymbolsPackage)" Version="$(PublishSymbolsPackageVersion)" />

    <!-- SourceLink -->
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="$(MicrosoftSourceLinkVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
    <PackageReference Include="Microsoft.SourceLink.Vsts.Git" Version="$(MicrosoftSourceLinkVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />

    <!-- analyzers -->
    <PackageReference Include="Desktop.Analyzers" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.Common" Version="2.9.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="1.1.0" />
    <PackageReference Include="System.Runtime.Analyzers" Version="1.1.0" />
    <PackageReference Include="System.Runtime.InteropServices.Analyzers" Version="1.1.0" />
    <PackageReference Include="System.Security.Cryptography.Hashing.Algorithms.Analyzers" Version="1.1.0" />

    <!-- repo tools -->
    <RepoTool Include="coverlet.console" Version="$(CoverletConsolePackageVersion)" />
    <RepoTool Include="dotnet-reportgenerator-globaltool" Version="$(DotNetReportGeneratorGlobalToolPackageVersion)" />
  </ItemGroup>

  <!--
    Temporarily opt-in as dotnet restore interactive doesn't seem to work.
    https://github.com/NuGet/Home/issues/7812. Use nuget restore meanwhile.
  -->
  <Target Name="InitOptionalTools"
          Condition="'$(RestoreInternalTools)' == 'true'"
          AfterTargets="Restore">

    <PropertyGroup>
      <OptionalToolDir>$([MSBuild]::NormalizeDirectory('$(RepositoryEngineeringDir)', 'common', 'internal'))</OptionalToolDir>
      <OptionalToolProjectPath>$(OptionalToolDir)Tools.csproj</OptionalToolProjectPath>
    </PropertyGroup>

    <Exec Command="$(DotNetCmd) restore &quot;$(OptionalToolProjectPath)&quot; --interactive --ignore-failed-sources /p:TargetGroup=$(TargetGroup)"
          WorkingDirectory="$(RepoRoot)" />

  </Target>

  <Target Name="InitGlobalTools" Condition="'@(RepoTool)' != ''" AfterTargets="Restore">

    <PropertyGroup>
      <GlobalToolsDir>$(ArtifactsDir)tools</GlobalToolsDir>
    </PropertyGroup>

    <!-- List all global tools and save the output. -->
    <Exec Condition="Exists('$(GlobalToolsDir)')"
          Command="$(DotNetCmd) tool list --tool-path &quot;$(GlobalToolsDir)&quot;"
          WorkingDirectory="$(RepoRoot)"
          ConsoleToMsBuild="true"
          ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ConsoleOutput" PropertyName="DotNetListToolsOutput" />
    </Exec>

    <!-- Uninstall the global tool if it exists with a different version. -->
    <Exec Condition="Exists('$(GlobalToolsDir)') AND $(DotNetListToolsOutput.Contains('%(RepoTool.Identity)')) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(DotNetListToolsOutput)', '$([System.Text.RegularExpressions.Regex]::Escape('%(RepoTool.Identity)'))\s+$([System.Text.RegularExpressions.Regex]::Escape('%(RepoTool.Version)'))'))"
          Command="$(DotNetCmd) tool uninstall --tool-path &quot;$(GlobalToolsDir)&quot; %(RepoTool.Identity)"
          WorkingDirectory="$(RepoRoot)"
          ContinueOnError="WarnAndContinue" />

    <!--
      Installs the global tool if it doesn't exist with the right version.
      Creates the global tools folder automatically if it doesn't exist.
    -->
    <Exec Condition="!Exists('$(GlobalToolsDir)') OR !$([System.Text.RegularExpressions.Regex]::IsMatch('$(DotNetListToolsOutput)', '$([System.Text.RegularExpressions.Regex]::Escape('%(RepoTool.Identity)'))\s+$([System.Text.RegularExpressions.Regex]::Escape('%(RepoTool.Version)'))'))"
          Command="$(DotNetCmd) tool install --tool-path &quot;$(GlobalToolsDir)&quot; %(RepoTool.Identity) --version %(RepoTool.Version) --add-source https:%2F%2Fapi.nuget.org/v3/index.json"
          WorkingDirectory="$(RepoRoot)"
          ContinueOnError="WarnAndContinue" />

  </Target>

  <UsingTask TaskName="Microsoft.DotNet.Arcade.Sdk.SaveItems" AssemblyFile="$(ArcadeSdkBuildTasksAssembly)" />

  <Target Name="GenerateAnalyzersPropsFile"
          AfterTargets="Restore"
          DependsOnTargets="ResolveLockFileAnalyzers">

    <SaveItems Condition="'@(Analyzer)' != ''"
               ItemName="ResolvedAnalyzer"
               Items="@(Analyzer)"
               File="$(AnalyzerPropsFile)" />

  </Target>

</Project>
