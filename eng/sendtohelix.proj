<Project InitialTargets="BuildHelixWorkItem" Sdk="Microsoft.DotNet.Helix.Sdk">
  <PropertyGroup>
    <!-- Set helix source -->
    <HelixSourcePrefix>pr/</HelixSourcePrefix>
    <HelixSourcePrefix Condition="'$(OfficialBuildId)' != ''">official/</HelixSourcePrefix>
    <HelixSource Condition="'$(HelixSource)' == ''">$(HelixSourcePrefix)dotnet/corefx</HelixSource>
    <HelixSource Condition="'$(BUILD_SOURCEBRANCH)' != ''">$(HelixSource)/$(BUILD_SOURCEBRANCH)</HelixSource>
    
    <!-- Set helix build to build number if available -->
    <HelixBuild Condition="'$(HelixBuild)' == ''">$(BUILD_BUILDNUMBER)</HelixBuild>
    <HelixBuild Condition="'$(HelixBuild)' == ''">default</HelixBuild>

    <HelixType Condition="'$(HelixType)' == ''">test/functional/cli</HelixType>

    <TimeoutInSeconds Condition="'$(TimeoutInSeconds)' == ''">600</TimeoutInSeconds>
    <_timeoutSpan>$([System.TimeSpan]::FromSeconds($(TimeoutInSeconds)))</_timeoutSpan>
    
    <!-- We need to enable xunit reporter so that it parses test results -->
    <EnableXunitReporter>true</EnableXunitReporter>
    
    <!-- The helix runtime payload and the tests to run -->
    <!-- TODO: Use TestArchiveDir properties once: https://github.com/dotnet/corefx/pull/33423 -->
    <HelixCorrelationPayload Condition="'$(HelixCorrelationPayload)' == ''">$(ArtifactsDir)\**\tests\**\archive\test-runtime*.zip</HelixCorrelationPayload>
    <WorkItemArchiveWildCard Condition="'$(WorkItemArchiveWildCard)' == ''">$(ArtifactsDir)\**\tests\**\archive\tests\**\*.zip</WorkItemArchiveWildCard>

    <HelixConfiguration>$(ConfigurationGroup)</HelixConfiguration>
    <HelixArchitecture>$(ArchGroup)</HelixArchitecture>

    <!-- This property is used to show the tests results in VSTS. By setting this property the
    test run name will be displayed as $(TestRunNamePrefix)-$(HelixTargetQueue) -->
    <TestRunNamePrefix Condition="'$(TargetGroup)' != ''">$(TargetGroup)-</TestRunNamePrefix>

    <!-- TODO: Pass it as argument when adding official build support -->
    <EnableAzurePipelinesReporter>true</EnableAzurePipelinesReporter>
  </PropertyGroup>

  <PropertyGroup Condition="'$(HelixCommand)' == ''">
    <!-- For windows we need to use call, since the command is going to be called from a bat script created by Helix
    and we exit /b at the end of RunTests.cmd, Helix runs some other commands after ours within the bat script,
    if we don't use call, then we cause the parent script to exit, and anything after will not be executed. -->
    <HelixCommand Condition="'$(TargetsWindows)' == 'true'">call RunTests.cmd %HELIX_CORRELATION_PAYLOAD%</HelixCommand>
    <HelixCommand Condition="'$(TargetsWindows)' != 'true'">./RunTests.sh $HELIX_CORRELATION_PAYLOAD</HelixCommand>
  </PropertyGroup>

  <ItemGroup>
    <HelixCorrelationPayload Include="$(HelixCorrelationPayload)" />
  </ItemGroup>

  <Target Name="BuildHelixWorkItem">
    <ItemGroup>
      <_WorkItem Include="$(WorkItemArchiveWildCard)" Exclude="$(HelixCorrelationPayload)" />

      <HelixWorkItem Include="@(_WorkItem -> '%(FileName)')">
        <PayloadArchive>%(Identity)</PayloadArchive>
        <Command>$(HelixCommand)</Command>
        <Timeout>$(_timeoutSpan)</Timeout>
      </HelixWorkItem>
    </ItemGroup>
  </Target>
</Project>
