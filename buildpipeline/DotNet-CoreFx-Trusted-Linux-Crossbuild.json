{
  "build": [
    {
      "environment": {},
      "enabled": true,
      "continueOnError": true,
      "displayName": "run begin.sh",
      "timeoutInMinutes": 0,
      "alwaysRun": true,
      "task": {
        "id": "10f1f9a1-74b0-47ab-87bf-e3c9c68e8b0d",
        "versionSpec": "0.*",
        "definitionType": "task"
      },
      "inputs": {
        "type": "InlineScript",
        "scriptPath": "",
        "args": "",
        "cwd": "",
        "failOnStandardError": "false",
        "script": "if [ -f \"$AGENTTOOLSPATH/begin.sh\" ]; then echo \"$AGENTTOOLSPATH/begin.sh script found. Executing...\"; $AGENTTOOLSPATH/begin.sh ; else echo \"$AGENTTOOLSPATH/begin.sh script does not exist. Moving on.\" ; fi"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Local git clone",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "git",
        "arguments": "clone $(PB_VsoCorefxGitUrl) $(PB_GitDirectory)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Local git checkout",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "git",
        "arguments": "checkout $(SourceVersion)",
        "workingFolder": "$(PB_GitDirectory)",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Local initialize tools",
      "timeoutInMinutes": 0,
      "condition": "succeeded()",
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "$(PB_GitDirectory)/init-tools.sh",
        "arguments": "",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Local initialize Docker",
      "timeoutInMinutes": 0,
      "condition": "succeeded()",
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "$(PB_GitDirectory)/Tools/scripts/docker/init-docker.sh",
        "arguments": "$(PB_DockerImageName)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker git clone",
      "timeoutInMinutes": 0,
      "condition": "succeeded()",
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run $(PB_DockerCommonRunArgs) git clone $(PB_VsoCorefxGitUrl) $(PB_DockerVolumeName)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker git checkout",
      "timeoutInMinutes": 0,
      "condition": "succeeded()",
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run $(PB_DockerCommonRunArgs) git checkout $(SourceVersion)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker generate version assets",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run $(PB_DockerCommonRunArgs) $(PB_DockerVolumeName)/build-managed.sh -OfficialBuildId=$(OfficialBuildId) -- /t:GenerateVersionSourceFile /p:GenerateVersionSourceFile=true",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker run sync.sh",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run $(PB_DockerCommonRunArgs) $(PB_DockerVolumeName)/sync.sh $(PB_SyncArguments)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker run build-native.sh",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run -e ROOTFS_DIR=$(ROOTFS_DIR) $(PB_DockerCommonRunArgs) $(PB_DockerVolumeName)/build-native.sh -OfficialBuildId=$(OfficialBuildId) $(PB_BuildNativeArguments)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker run build-managed.sh",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run -e ROOTFS_DIR=$(ROOTFS_DIR) $(PB_DockerCommonRunArgs) $(PB_DockerVolumeName)/build-managed.sh -OfficialBuildId=$(OfficialBuildId) $(PB_BuildManagedArguments)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker run build-packages.sh",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run -e ROOTFS_DIR=$(ROOTFS_DIR) $(PB_DockerCommonRunArgs) $(PB_DockerVolumeName)/build-packages.sh -OfficialBuildId=$(OfficialBuildId) $(PB_BuildPackagesArguments)",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": false,
      "alwaysRun": false,
      "displayName": "Docker run publish-packages.sh",
      "timeoutInMinutes": 0,
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run $(PB_DockerCommonRunArgs) $(PB_DockerVolumeName)/publish-packages.sh -AzureAccount=$(PB_CloudDropAccountName) -AzureToken=$(CloudDropAccessToken) -Container=$(PB_Label) -verbose -- /p:OverwriteOnPublish=false",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": true,
      "alwaysRun": true,
      "displayName": "Local copy logs out of container",
      "timeoutInMinutes": 0,
      "condition": "succeededOrFailed()",
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "docker",
        "arguments": "run --rm -v $(Build.StagingDirectory):/docker_logs $(PB_DockerCommonRunArgs) find . -type f ( -iname *.log -o -iname MSBUILD_*.failure.txt ) -exec cp {} --target-directory=/docker_logs ;",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": true,
      "alwaysRun": true,
      "displayName": "Local publish artifact: BuildLogs",
      "timeoutInMinutes": 0,
      "condition": "succeededOrFailed()",
      "task": {
        "id": "2ff763a7-ce83-4e1f-bc89-0ae63477cebe",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "PathtoPublish": "$(Build.StagingDirectory)",
        "ArtifactName": "BuildLogs",
        "ArtifactType": "Container",
        "TargetPath": "\\\\my\\share\\$(Build.DefinitionName)\\$(Build.BuildNumber)",
        "Parallel": "false",
        "ParallelCount": "8"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": true,
      "alwaysRun": false,
      "displayName": "Local cleanup Docker",
      "timeoutInMinutes": 0,
      "condition": "always()",
      "task": {
        "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
        "versionSpec": "1.*",
        "definitionType": "task"
      },
      "inputs": {
        "filename": "$(PB_GitDirectory)/Tools/scripts/docker/cleanup-docker.sh",
        "arguments": "",
        "workingFolder": "",
        "failOnStandardError": "false"
      }
    },
    {
      "environment": {},
      "enabled": true,
      "continueOnError": true,
      "displayName": "run end.sh",
      "timeoutInMinutes": 0,
      "condition": "always()",
      "alwaysRun": true,
      "task": {
        "id": "10f1f9a1-74b0-47ab-87bf-e3c9c68e8b0d",
        "versionSpec": "0.*",
        "definitionType": "task"
      },
      "inputs": {
        "type": "InlineScript",
        "scriptPath": "",
        "args": "",
        "cwd": "",
        "failOnStandardError": "false",
        "script": "if [ -f \"$AGENTTOOLSPATH/end.sh\" ]; then echo \"$AGENTTOOLSPATH/end.sh script found. Executing...\"; $AGENTTOOLSPATH/end.sh ; else echo \"$AGENTTOOLSPATH/end.sh script does not exist. Moving on.\" ; fi"
      }
    }
  ],
  "options": [
    {
      "enabled": false,
      "definition": {
        "id": "5d58cc01-7c75-450c-be18-a388ddb129ec"
      },
      "inputs": {
        "branchFilters": "[\"+refs/heads/*\"]",
        "additionalFields": "{}"
      }
    },
    {
      "enabled": false,
      "definition": {
        "id": "a9db38f9-9fdc-478c-b0f9-464221e58316"
      },
      "inputs": {
        "workItemType": "234347",
        "assignToRequestor": "true",
        "additionalFields": "{}"
      }
    }
  ],
  "variables": {
    "CloudDropAccessToken": {
      "value": null,
      "isSecret": true
    },
    "GitHubBranch": {
      "value": "sni_plus_latestbuildtools"
    },
    "OfficialBuildId": {
      "value": "$(Build.BuildNumber)"
    },
    "PB_Architecture": {
      "value": "arm"
    },
    "PB_AssetRootUrl": {
      "value": ""
    },
    "PB_BuildArguments": {
      "value": "-BuildArch=$(PB_Architecture)"
    },
    "PB_BuildManagedArguments": {
      "value": "$(PB_BuildArguments)"
    },
    "PB_BuildNativeArguments": {
      "value": "$(PB_BuildArguments)"
    },
    "PB_BuildPackagesArguments": {
      "value": "$(PB_BuildArguments)"
    },
    "PB_CleanAgent": {
      "value": "true"
    },
    "PB_CloudDropAccountName": {
      "value": "dotnetbuildoutput"
    },
    "PB_ConfigurationGroup": {
      "value": "Release"
    },
    "PB_DockerCommonRunArgs": {
      "value": "--rm --name $(PB_DockerContainerName) -v \"$(PB_DockerContainerName):$(PB_DockerVolumeName)\" -w=\"$(PB_DockerVolumeName)\" -e \"PACKAGEVERSIONPROPSURL=$(PB_PackageVersionPropsUrl)\" -e \"MSBUILDDEBUGCOMM=1\" -e \"MSBUILDDEBUGPATH=$(PB_DockerVolumeName)\" $(PB_DockerImageName)"
    },
    "PB_DockerContainerName": {
      "value": "corefx-cross-$(Build.BuildId)"
    },
    "PB_DockerCopyDest": {
      "value": "$(Build.StagingDirectory)"
    },
    "PB_DockerImageName": {
      "value": "$(PB_DockerRepository):$(PB_DockerTag)"
    },
    "PB_DockerRepository": {
      "value": "microsoft/dotnet-buildtools-prereqs"
    },
    "PB_DockerTag": {
      "value": "ubuntu-14.04-cross-0cd4667-20170319080304",
      "allowOverride": true
    },
    "PB_DockerVolumeName": {
      "value": "/root/corefx-$(Build.BuildId)"
    },
    "PB_GitDirectory": {
      "value": "$(Build.SourcesDirectory)/corefx"
    },
    "PB_Label": {
      "value": "$(Build.BuildNumber)"
    },
    "PB_PackageVersionPropsUrl": {
      "value": ""
    },
    "PB_SyncArguments": {
      "value": "-p -- /p:ArchGroup=$(PB_Architecture)",
      "allowOverride": true
    },
    "PB_VsoAccountName": {
      "value": "dn-bot"
    },
    "PB_VsoCorefxGitUrl": {
      "value": "https://$(PB_VsoAccountName):$(VsoPassword)@devdiv.visualstudio.com/DevDiv/_git/$(PB_VsoRepositoryName)/",
      "isSecret": true
    },
    "PB_VsoRepositoryName": {
      "value": "DotNet-CoreFX-Trusted"
    },
    "portableBuild": {
      "value": ""
    },
    "ROOTFS_DIR": {
      "value": "/crossrootfs/$(PB_Architecture)",
      "allowOverride": true
    },
    "SourceVersion": {
      "value": "HEAD",
      "allowOverride": true
    },
    "system.debug": {
      "value": "false",
      "allowOverride": true
    },
    "VsoPassword": {
      "value": null,
      "isSecret": true
    }
  },
  "demands": [
    "Agent.OS -equals linux"
  ],
  "retentionRules": [
    {
      "branches": [
        "+refs/heads/*"
      ],
      "artifacts": [],
      "artifactTypesToDelete": [
        "FilePath",
        "SymbolStore"
      ],
      "daysToKeep": 10,
      "minimumToKeep": 1,
      "deleteBuildRecord": true,
      "deleteTestResults": true
    }
  ],
  "buildNumberFormat": "$(date:yyyyMMdd)$(rev:-rr)",
  "jobAuthorizationScope": "projectCollection",
  "jobTimeoutInMinutes": 90,
  "jobCancelTimeoutInMinutes": 5,
  "repository": {
    "properties": {
      "labelSources": "0",
      "reportBuildStatus": "true",
      "fetchDepth": "0",
      "gitLfsSupport": "false",
      "skipSyncSource": "true",
      "cleanOptions": "3",
      "checkoutNestedSubmodules": "false",
      "labelSourcesFormat": "$(build.buildNumber)"
    },
    "id": "58fa2458-e392-4373-ba2b-dd3ef0c2d7ce",
    "type": "TfsGit",
    "name": "DotNet-CoreFX-Trusted",
    "url": "https://devdiv.visualstudio.com/DevDiv/_git/DotNet-CoreFX-Trusted",
    "defaultBranch": "refs/heads/master",
    "clean": "true",
    "checkoutSubmodules": false
  },
  "processParameters": {},
  "quality": "definition",
  "drafts": [],
  "queue": {
    "_links": {
      "self": {
        "href": "https://devdiv.visualstudio.com/DefaultCollection/_apis/build/Queues/36"
      }
    },
    "id": 36,
    "name": "DotNet-Build",
    "url": "https://devdiv.visualstudio.com/DefaultCollection/_apis/build/Queues/36",
    "pool": {
      "id": 39,
      "name": "DotNet-Build"
    }
  },
  "id": 5247,
  "name": "DotNet-CoreFx-Trusted-Linux-Crossbuild",
  "path": "\\",
  "type": "build",
  "queueStatus": "enabled",
  "project": {
    "id": "0bdbc590-a062-4c3f-b0f6-9383f67865ee",
    "name": "DevDiv",
    "description": "Visual Studio and DevDiv team project for git source code repositories.  Work items for Visual Studio and most active DevDiv products are in this account.",
    "url": "https://devdiv.visualstudio.com/DefaultCollection/_apis/projects/0bdbc590-a062-4c3f-b0f6-9383f67865ee",
    "state": "wellFormed",
    "revision": 418099139,
    "visibility": "organization"
  }
}
